{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-xui","title":"What is XUI?","text":"<p>XUI started as a collection of user interface (UI) controls that I needed for my own projects but has grown over the years into a comprehensive suite of additional classes, modules and extensions that simplify and speed up Xojo app development.</p> <p>XUI contains many awesome UI controls including the insanely powerful XUICodeEditor and beautiful everyday components such as tab bars, source lists and tag canvases.</p> <p>In addition to UI controls XUI provides methods for working with Markdown, handling in-app notifications, handling undo, parsing TOML and a robust string and maths library.</p> <p>XUI is 100% API 2.0 compliant, is actively developed and suggestions for new controls are always welcome.</p> <p>XUI is sold as unencrypted Xojo source code that is extensively documented and has been battle-tested in multiple projects over several years. It's so well documented in fact that this entire documentation website is built from the source code comments using a custom command line tool that uses several of the XUI components itself!</p> <p>Use the sidebar to peruse the various components included in the framework.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>XUI is always developed on a Mac using the latest version of the Xojo ID. It's designed to be cross-platform and widely compatible, avoiding the use of declares and only ever using 100% Xojo code.</p> <p>The only non-Xojo requirement to use XUI in a project is that the open source <code>DesktopTextInputCanvas</code> plugin is required to be installed. This is included in the XUI framework download. You can read more about this plugin, why it is required and how to install it here.</p> <p>Since XUI is designed with Xojo's best practices in mind it is 100% API 2.0 code. This means it relies on the new API 2.0 UI controls provided by the Xojo IDE (such as <code>DesktopApplication</code> and <code>DesktopWindow</code>) to function correctly. Therefore, XUI may not be compatible with all API 1.0 projects out of the box. That does not mean that it won't work in older projects only that it may require a little bit of work on your part. If you put a XUI control on a Xojo <code>DesktopWindow</code> it should work fine. If you need to put a XUI control on an old API 1.0 <code>Window</code> you will need to manually change the <code>Super</code> of controls using a <code>Desktop</code>-prefixed control (such as <code>XUISourceList</code> which uses <code>DesktopContainer</code>) to the API 1.0 equivalent control (<code>Container</code> in this instance) and then rename several events on the control (such as <code>Opening</code> back to <code>Open</code>). Finally, controls that inherit from <code>DesktopTextInputCanvas</code> (such as <code>XUICodeEditor</code>) would need their <code>Super</code> changing to <code>TextInputCanvas</code> and you would need to download this open source plugin direct from Einhugur's website.</p> <p>Purchase a license</p>"},{"location":"XUI/XUIDotLabel/","title":"XUIDotLabel","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUIDotLabel/#description","title":"Description","text":"<p>A simple UI control that draws a customisable dot (rounded circle). Useful for representing  state (e.g. a red dot if something is disconnected or a green dot if something is active).</p> <p>Supports an optional caption.</p>"},{"location":"XUI/XUIDotLabel/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaptionColor <code>ColorGroup</code> CondenseCaption <code>Boolean</code> DotBorderColor <code>ColorGroup</code> DotColor <code>ColorGroup</code> DotDiameter <code>Double</code> DotHasBorder <code>Boolean</code> DotPadding <code>Integer</code> FontName <code>String</code> FontSize <code>Integer</code> mCaption <code>String</code> mCaptionColor <code>ColorGroup</code> mCondenseCaption <code>Boolean</code> mDisabledCaptionColor <code>ColorGroup</code> mDisabledDotColor <code>ColorGroup</code> mDotBorderColor <code>ColorGroup</code> mDotColor <code>ColorGroup</code> mDotDiameter <code>Double</code> mDotHasBorder <code>Boolean</code> mDotPadding <code>Integer</code> mFontName <code>String</code> mFontSize <code>Integer</code>"},{"location":"XUI/XUIDotLabel/#methods","title":"Methods","text":"Name Parameters Returns Constructor DotRadius <code>Double</code> DrawCaption g As <code>Graphics</code>, x As <code>Double</code> DrawDot g As <code>Graphics</code>, x As <code>Double</code> <code>Double</code>"},{"location":"XUI/XUIDotLabel/#constants","title":"Constants","text":"Name Type DISABLED_COLOR_CAPTION_DARK <code>Color</code> DISABLED_COLOR_CAPTION_LIGHT <code>Color</code> DISABLED_COLOR_DOT_DARK <code>Color</code> DISABLED_COLOR_DOT_LIGHT <code>Color</code> MIN_CAPTION_FONT_SIZE <code>Double</code> MIN_DOT_DIAMETER <code>Double</code> <p>DISABLED_COLOR_CAPTION_DARK As Color The dark mode colour to use for the caption when the control is disabled.</p> <p>DISABLED_COLOR_CAPTION_LIGHT As Color The light mode colour to use for the caption when the control is disabled.</p> <p>DISABLED_COLOR_DOT_DARK As Color The dark mode colour to use for the dot when the control is disabled.</p> <p>DISABLED_COLOR_DOT_LIGHT As Color The light mode colour to use for the dot when the control is disabled.</p> <p>MIN_CAPTION_FONT_SIZE As Double The minimum permitted font size for the caption.</p> <p>MIN_DOT_DIAMETER As Double The minimum permitted diameter of the dot.</p>"},{"location":"XUI/XUIDotLabel/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>Optional caption to display beside the dot.</p> <p>CaptionColor As ColorGroup</p> <p>The colour to use for the optional caption.</p> <p>CondenseCaption As Boolean</p> <p>If True then the caption will be condensed with an ellipsis if it is too long to fit in the available space.</p> <p>DotBorderColor As ColorGroup</p> <p>The colour of the dot's border (if enabled).</p> <p>DotColor As ColorGroup</p> <p>The colour of the dot.</p> <p>DotDiameter As Double</p> <p>The diameter of the dot in pixels.</p> <p>DotHasBorder As Boolean</p> <p>True if the dot has a border.</p> <p>DotPadding As Integer</p> <p>The number of pixels between the dot and optional caption.</p> <p>FontName As String</p> <p>The font to use for the caption.</p> <p>FontSize As Integer</p> <p>The font size to use for the caption.</p> <p>mCaption As String</p> <p>Optional caption to display beside the dot.</p> <p>mCaptionColor As ColorGroup</p> <p>The colour to use for the optional caption.</p> <p>mCondenseCaption As Boolean</p> <p>If True then the caption will be condensed with an ellipsis if it is too long to fit in the available space.</p> <p>mDisabledCaptionColor As ColorGroup</p> <p>The colour to use for the caption when the control is disabled.</p> <p>mDisabledDotColor As ColorGroup</p> <p>The colour to use for the dot when the control is disabled.</p> <p>mDotBorderColor As ColorGroup</p> <p>The colour of the dot's border (if enabled).</p> <p>mDotColor As ColorGroup</p> <p>The colour of the dot.</p> <p>mDotDiameter As Double</p> <p>The diameter of the dot in pixels.</p> <p>mDotHasBorder As Boolean</p> <p>True if the dot has a border.</p> <p>mDotPadding As Integer</p> <p>The number of pixels between the dot and optional caption.</p> <p>mFontName As String</p> <p>The font to use for the caption.</p> <p>mFontSize As Integer</p> <p>The font size to use for the caption.</p>"},{"location":"XUI/XUIDotLabel/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>The default constructor.</p> <p>DotRadius() As Double</p> <p>Returns the current dot radius.</p> <p>DrawCaption(g As Graphics, x As Double)</p> <p>Draws the caption to <code>g</code> starting at <code>x</code>.</p> <p>DrawDot(g As Graphics, x As Double) As Double</p> <p>Draws the dot to <code>g</code> starting at <code>x</code>. Returns the X coordinate after the dot, including padding.</p>"},{"location":"XUI/XUIImageButton/","title":"XUIImageButton","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUIImageButton/#description","title":"Description","text":"<p>A simple canvas-based button. You must ensure that the images selected for this button are the same size as the button as no scaling of the image is performed.</p>"},{"location":"XUI/XUIImageButton/#properties","title":"Properties","text":"Name Type Read-Only BorderColor <code>ColorGroup</code> DefaultImage <code>Picture</code> DisabledImage <code>Picture</code> HasBottomBorder <code>Boolean</code> HasLeftBorder <code>Boolean</code> HasRightBorder <code>Boolean</code> HasTopBorder <code>Boolean</code> HoverImage <code>Picture</code> IsPressed <code>Boolean</code> mBorderColor <code>ColorGroup</code> mDefaultImage <code>Picture</code> mDisabledImage <code>Picture</code> mHasBottomBorder <code>Boolean</code> mHasLeftBorder <code>Boolean</code> mHasRightBorder <code>Boolean</code> mHasTopBorder <code>Boolean</code> mHoverImage <code>Picture</code> mIsPressed <code>Boolean</code> mMouseOverButton <code>Boolean</code> mPressedImage <code>Picture</code> mType <code>XUIImageButton.Types</code> PressedImage <code>Picture</code> Type <code>XUIImageButton.Types</code>"},{"location":"XUI/XUIImageButton/#methods","title":"Methods","text":"Name Parameters Returns GetCorrectPicture <code>Picture</code>"},{"location":"XUI/XUIImageButton/#events","title":"Events","text":"Name Parameters Returns Pressed"},{"location":"XUI/XUIImageButton/#enumerations","title":"Enumerations","text":"<p>Types</p> <p>The supported types of button.</p> Name PushButton ToggleButton"},{"location":"XUI/XUIImageButton/#property-descriptions","title":"Property Descriptions","text":"<p>BorderColor As ColorGroup</p> <p>If the button has a border, this is its colour.</p> <p>DefaultImage As Picture</p> <p>The image to use for the button when in its default state.</p> <p>DisabledImage As Picture</p> <p>The image to use for the button when disabled. If not specified, the default image is used.</p> <p>HasBottomBorder As Boolean</p> <p>If True then a border is drawn along the bottom edge of the button.</p> <p>HasLeftBorder As Boolean</p> <p>If True then a border is drawn along the left edge of the button.</p> <p>HasRightBorder As Boolean</p> <p>If True then a border is drawn along the right edge of the button.</p> <p>HasTopBorder As Boolean</p> <p>If True then a border is drawn along the top edge of the button.</p> <p>HoverImage As Picture</p> <p>The image to use for the button when the mouse is hovering over it. If not specified, the default image is used.</p> <p>IsPressed As Boolean</p> <p>True if the button is currently pressed or toggled.</p> <p>mBorderColor As ColorGroup</p> <p>If the button has a border, this is its colour.</p> <p>mDefaultImage As Picture</p> <p>The image to use for the button when in its default state.</p> <p>mDisabledImage As Picture</p> <p>The image to use for the button when disabled. If not specified, the default image is used.</p> <p>mHasBottomBorder As Boolean</p> <p>If True then a border is drawn along the bottom edge of the button.</p> <p>mHasLeftBorder As Boolean</p> <p>If True then a border is drawn along the left edge of the button.</p> <p>mHasRightBorder As Boolean</p> <p>If True then a border is drawn along the right edge of the button.</p> <p>mHasTopBorder As Boolean</p> <p>If True then a border is drawn along the top edge of the button.</p> <p>mHoverImage As Picture</p> <p>The image to use for the button when the mouse is hovering over it. If not specified, the default image is used.</p> <p>mIsPressed As Boolean</p> <p>True if the button is currently being pressed.</p> <p>mMouseOverButton As Boolean</p> <p>True if the mouse is over the button.</p> <p>mPressedImage As Picture</p> <p>The image to use for the button when in its pressed state. If not specified, the default image is used.</p> <p>mType As XUIImageButton.Types</p> <p>The type of button (push or toggle).</p> <p>PressedImage As Picture</p> <p>The image to use for the button when in its pressed state. If not specified, the default image is used.</p> <p>Type As XUIImageButton.Types</p> <p>The type of button (push or toggle).</p>"},{"location":"XUI/XUIImageButton/#method-descriptions","title":"Method Descriptions","text":"<p>GetCorrectPicture() As Picture</p> <p>Returns the correct picture to use for the button's current state.</p>"},{"location":"XUI/XUIImageButton/#event-descriptions","title":"Event Descriptions","text":"<p>Pressed() The button has been pressed.</p>"},{"location":"XUI/XUITextButton/","title":"XUITextButton","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUITextButton/#description","title":"Description","text":"<p><code>XUITextButton</code> is a simple, customisable and modern-looking text button.</p>"},{"location":"XUI/XUITextButton/#properties","title":"Properties","text":"Name Type Read-Only BackgroundColor <code>ColorGroup</code> FontName <code>String</code> FontSize <code>Integer</code> HasBackgroundColor <code>Boolean</code> IsPressed <code>Boolean</code> mBackgroundColor <code>ColorGroup</code> mFontName <code>String</code> mFontSize <code>Integer</code> mHasBackgroundColor <code>Boolean</code> mIsPressed <code>Boolean</code> mMouseOverButton <code>Boolean</code> mPressedColor <code>ColorGroup</code> mPressedTextColor <code>ColorGroup</code> mTextColor <code>ColorGroup</code> mTitle <code>String</code> mType <code>XUITextButton.Types</code> PressedColor <code>ColorGroup</code> PressedTextColor <code>ColorGroup</code> TextColor <code>ColorGroup</code> Title <code>String</code> Type <code>XUITextButton.Types</code>"},{"location":"XUI/XUITextButton/#events","title":"Events","text":"Name Parameters Returns Pressed"},{"location":"XUI/XUITextButton/#enumerations","title":"Enumerations","text":"<p>Types</p> <p>The supported types of button.</p> Name PushButton ToggleButton"},{"location":"XUI/XUITextButton/#property-descriptions","title":"Property Descriptions","text":"<p>BackgroundColor As ColorGroup</p> <p>The colour of the background (if enabled).</p> <p>FontName As String</p> <p>The font family to use.</p> <p>FontSize As Integer</p> <p>The font size to use.</p> <p>HasBackgroundColor As Boolean</p> <p>True if the button has a background colour.</p> <p>IsPressed As Boolean</p> <p>True if the button is currently pressed or toggled.</p> <p>mBackgroundColor As ColorGroup</p> <p>The colour of the background (if enabled).</p> <p>mFontName As String</p> <p>The font family to use.</p> <p>mFontSize As Integer</p> <p>The font size to use.</p> <p>mHasBackgroundColor As Boolean</p> <p>True if the button has a background colour.</p> <p>mIsPressed As Boolean</p> <p>True if the button is currently pressed or toggled.</p> <p>mMouseOverButton As Boolean</p> <p>True if the mouse is over the button.</p> <p>mPressedColor As ColorGroup</p> <p>The colour of the selection lozenge when the button is pressed.</p> <p>mPressedTextColor As ColorGroup</p> <p>The colour of the text when the button is pressed.</p> <p>mTextColor As ColorGroup</p> <p>The text colour.</p> <p>mTitle As String</p> <p>The button's title.</p> <p>mType As XUITextButton.Types</p> <p>The type of button (push or toggle).</p> <p>PressedColor As ColorGroup</p> <p>The colour of the selection lozenge when the button is pressed.</p> <p>PressedTextColor As ColorGroup</p> <p>The colour of the text when the button is pressed.</p> <p>TextColor As ColorGroup</p> <p>The text colour.</p> <p>Title As String</p> <p>The button's title.</p> <p>Type As XUITextButton.Types</p> <p>The type of button (push or toggle).</p>"},{"location":"XUI/XUITextButton/#event-descriptions","title":"Event Descriptions","text":"<p>Pressed() The button has been pressed.</p>"},{"location":"XUI/Required/NSScrollViewCanvas/","title":"NSScrollViewCanvas","text":"<p>Inherits <code>DesktopTextInputCanvas</code></p>"},{"location":"XUI/Required/NSScrollViewCanvas/#description","title":"Description","text":"<p>A subclass of the <code>DesktopTextInputCanvas</code> that provides native scrollbars on macOS.</p>"},{"location":"XUI/Required/NSScrollViewCanvas/#properties","title":"Properties","text":"Name Type Read-Only HasHorizontalScrollbar <code>Boolean</code> HasVerticalScrollbar <code>Boolean</code> LookupTable <code>Dictionary</code> NSDocumentView <code>Ptr</code> NSNotificationCenter <code>Ptr</code> NSScrollerStyle <code>NSScrollerStyles</code> \u2714 NSScrollView <code>Ptr</code> NSScrollViewCustom <code>Ptr</code> ScrollX_ <code>Integer</code> ScrollY_ <code>Integer</code>"},{"location":"XUI/Required/NSScrollViewCanvas/#methods","title":"Methods","text":"Name Parameters Returns NSScrollerStyleChanged obj As <code>Ptr</code>, sel As <code>Ptr</code>, notification As <code>Ptr</code> NSScrollViewMagnifyWithEvent obj As <code>Ptr</code>, sel As <code>Ptr</code>, evt As <code>Ptr</code> NSViewBoundsDidChange obj As <code>Ptr</code>, sel As <code>Ptr</code>, notification As <code>Ptr</code> NSViewIsFlipped obj As <code>Ptr</code>, sel As <code>Ptr</code> <code>Boolean</code> PerformBoundsChanged PerformScaling scaleOffset As <code>Double</code> PerformScrollerStyleChanged ScrollToPoint x As <code>Double</code>, y As <code>Double</code> SetDocumentSize width As <code>CGFloat</code>, height As <code>CGFloat</code>"},{"location":"XUI/Required/NSScrollViewCanvas/#events","title":"Events","text":"Name Parameters Returns Closing NSScrollerStyleChanged style As <code>NSScrollerStyles</code> NSScrollViewBoundsChanged bounds As <code>CGRect</code> NSScrollViewMagnify scaleOffset As <code>Double</code> Opening"},{"location":"XUI/Required/NSScrollViewCanvas/#constants","title":"Constants","text":"Name Type kAppKit <code>String</code> kFoundation <code>String</code> kObjC <code>String</code> SCROLLBAR_DEPTH <code>Double</code> <p>kAppKit As String The AppKit library name for declares.</p> <p>kFoundation As String The Foundation library name for declares.</p> <p>kObjC As String The objective-C dynamic library name for declares.</p> <p>SCROLLBAR_DEPTH As Double The depth of the legacy scrollbar.</p>"},{"location":"XUI/Required/NSScrollViewCanvas/#enumerations","title":"Enumerations","text":"<p>NSScrollerStyles</p> <p>Constants to specify the scroller style.</p> <p><code>Legacy</code>: Specifies legacy-style scrollers as prior to macOS 10.7.</p> <p><code>Overlay</code>: Specifies overlay-style scrollers in macOS 10.7 and later.</p> Name Legacy Overlay"},{"location":"XUI/Required/NSScrollViewCanvas/#property-descriptions","title":"Property Descriptions","text":"<p>HasHorizontalScrollbar As Boolean</p> <p>True if the canvas should have a horizontal scrollbar.</p> <p>HasVerticalScrollbar As Boolean</p> <p>True if the canvas should have a horizontal scrollbar.</p> <p>LookupTable As Dictionary</p> <p>This property is shared.</p> <p>A dictionary mapping Xojo objects with Objective-C classes. Key = object <code>Ptr</code>, Value = <code>WeakRef</code>.</p> <p>NSDocumentView As Ptr</p> <p>The reference to the <code>DocumentView</code> subclass.</p> <p>NSNotificationCenter As Ptr</p> <p>A pointer to <code>NSNotificationCenter</code>.</p> <p>NSScrollerStyle As NSScrollerStyles</p> <p>This property is shared.</p> <p>The preferred scroller style.</p> <p>NSScrollView As Ptr</p> <p>This is the reference to the NSScrollView subclass instance.</p> <p>NSScrollViewCustom As Ptr</p> <p>Internal use. A pointer to our custom <code>NSScrollView</code>.</p> <p>ScrollX_ As Integer</p> <p>The most recent X scroll position.</p> <p>ScrollY_ As Integer</p> <p>The most recent Y scroll position.</p>"},{"location":"XUI/Required/NSScrollViewCanvas/#method-descriptions","title":"Method Descriptions","text":"<p>NSScrollerStyleChanged(obj As Ptr, sel As Ptr, notification As Ptr) This method is shared.</p> <p>Internal use. The scroller style changed.</p> <p>NSScrollViewMagnifyWithEvent(obj As Ptr, sel As Ptr, evt As Ptr) This method is shared.</p> <p>Internal use. This is where we handle the magnify gesture.</p> <p>NSViewBoundsDidChange(obj As Ptr, sel As Ptr, notification As Ptr) This method is shared.</p> <p>Internal use. The view bounds has changed.</p> <p>NSViewIsFlipped(obj As Ptr, sel As Ptr) As Boolean This method is shared.</p> <p>Internal override method. Always returns True.</p> <p>PerformBoundsChanged()</p> <p>Internal use. called from the shared bounds changed method, after looking up the instance in <code>LookupTable</code>.</p> <p>PerformScaling(scaleOffset As Double)</p> <p>Internal use. called from the shared magnify method, after looking up the instance in <code>LookupTable</code>.</p> <p>PerformScrollerStyleChanged()</p> <p>Internal use. called from the shared scroller style changed method, after looking up the instance in <code>LookupTable</code>.</p> <p>ScrollToPoint(x As Double, y As Double)</p> <p>Scrolls the canvas to a point (<code>x, y</code>).</p> <p>SetDocumentSize(width As CGFloat, height As CGFloat)</p> <p>Sets the document size to <code>width</code> x <code>height</code>.</p>"},{"location":"XUI/Required/NSScrollViewCanvas/#event-descriptions","title":"Event Descriptions","text":"<p>Closing() The canvas is closing.</p> <p>NSScrollerStyleChanged(style As NSScrollerStyles) The scroller style has changed.</p> <p>NSScrollViewBoundsChanged(bounds As CGRect) The scroll view bounds has changed.</p> <p>NSScrollViewMagnify(scaleOffset As Double) The amount by which the content is currently scaled.</p> <p>Opening() The canvas is opening.</p>"},{"location":"XUI/Required/NSScrollViewCanvas/#acknowledgements","title":"Acknowledgements","text":"<p>This class is a minimally modified version of a class provided by  Martin Trippensee. He can be found on the Xojo forums.</p>"},{"location":"XUI/Required/XUIApp/","title":"XUIApp","text":"<p>Inherits <code>DesktopApplication</code></p> <p>Implements <code>XUINotificationListener</code></p>"},{"location":"XUI/Required/XUIApp/#description","title":"Description","text":"<p>This is a drop in replacement for the standard <code>DesktopApplication</code> object in your project. For maximum utility you should change the subclass of your <code>App</code> object in the Xojo navigator to <code>XUIApp</code>. The class adds  a number of convenience features such as in-app notifications when the OS appearance changes.</p>"},{"location":"XUI/Required/XUIApp/#properties","title":"Properties","text":"Name Type Read-Only mSemanticVersion <code>XUISemanticVersion</code> SemanticVersion <code>XUISemanticVersion</code> \u2714"},{"location":"XUI/Required/XUIApp/#methods","title":"Methods","text":"Name Parameters Returns NotificationReceived n As <code>XUINotification</code>"},{"location":"XUI/Required/XUIApp/#events","title":"Events","text":"Name Parameters Returns AppearanceChanged NotificationReceived n As <code>XUINotification</code> Opening"},{"location":"XUI/Required/XUIApp/#constants","title":"Constants","text":"Name Type NOTIFICATION_APPEARANCE_CHANGED <code>String</code> <p>NOTIFICATION_APPEARANCE_CHANGED As String The OS has switched between light and dark mode or the accent colour has changed.</p>"},{"location":"XUI/Required/XUIApp/#property-descriptions","title":"Property Descriptions","text":"<p>mSemanticVersion As XUISemanticVersion</p> <p>Backing field for <code>SemanticVersion</code>.</p> <p>SemanticVersion As XUISemanticVersion</p> <p>The application's version.</p>"},{"location":"XUI/Required/XUIApp/#method-descriptions","title":"Method Descriptions","text":"<p>NotificationReceived(n As XUINotification)</p> <p>Part of the XUINotificationListener interface.</p>"},{"location":"XUI/Required/XUIApp/#event-descriptions","title":"Event Descriptions","text":"<p>AppearanceChanged() Called when a user switches between light and dark mode or when the accent color changes.</p> <p>NotificationReceived(n As XUINotification) The app has received a notification.</p> <p>Opening() The app is opening.  The <code>Opening</code> event is the first event called when your app starts. The <code>Activated</code> event is called after the <code>Opening</code> event.</p>"},{"location":"XUI/Required/XUISelectedColumns/","title":"XUISelectedColumns","text":""},{"location":"XUI/Required/XUISelectedColumns/#description","title":"Description","text":"<p>Represents the start and end columns contained by a text selection.</p>"},{"location":"XUI/Required/XUISelectedColumns/#properties","title":"Properties","text":"Name Type Read-Only Finish <code>Integer</code> SelectionBeginsBeforeLine <code>Boolean</code> SelectionEndsAfterLine <code>Boolean</code> Start <code>Integer</code>"},{"location":"XUI/Required/XUISelectedColumns/#methods","title":"Methods","text":"Name Parameters Returns Constructor selectionBeginsBeforeLine As <code>Boolean</code>, start As <code>Integer</code>, selectionEndsAfterLine As <code>Boolean</code>, finish As <code>Integer</code>"},{"location":"XUI/Required/XUISelectedColumns/#property-descriptions","title":"Property Descriptions","text":"<p>Finish As Integer</p> <p>The last (0-based) column that is selected on the line. Will be <code>-1</code> if the selection ends beyond the line.</p> <p>SelectionBeginsBeforeLine As Boolean</p> <p>True if the selection enveloping this line begins before this line.</p> <p>SelectionEndsAfterLine As Boolean</p> <p>True if the selection enveloping this line ends after this line.</p> <p>Start As Integer</p> <p>The first (0-based) column that is selected on the line.</p>"},{"location":"XUI/Required/XUISelectedColumns/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(selectionBeginsBeforeLine As Boolean, start As Integer, selectionEndsAfterLine As Boolean, finish As Integer)</p> <p>Default constructor.</p> <ul> <li><code>selectionBeginsBeforeLine</code> is <code>True</code> if the text selection begins above the line. </li> <li><code>start</code> is the 0-based column that is selected on the line. </li> <li><code>selectionEndsAfterLine</code> is <code>True</code> if the selection ends after this line. </li> <li><code>finish</code> is the last (0-based) column that is selected on the line. Will be <code>-1</code> if the selection ends beyond the line. </li> </ul>"},{"location":"XUI/Required/XUISemanticVersion/","title":"XUISemanticVersion","text":""},{"location":"XUI/Required/XUISemanticVersion/#description","title":"Description","text":"<p>A class for representing and manipulating a semantic version.</p>"},{"location":"XUI/Required/XUISemanticVersion/#properties","title":"Properties","text":"Name Type Read-Only Major <code>Integer</code> Minor <code>Integer</code> mMajor <code>Integer</code> mMinor <code>Integer</code> mPatch <code>Integer</code> Patch <code>Integer</code>"},{"location":"XUI/Required/XUISemanticVersion/#methods","title":"Methods","text":"Name Parameters Returns Constructor major As <code>Integer</code>, minor As <code>Integer</code>, patch As <code>Integer</code> Constructor version As <code>String</code> Operator_Compare s As <code>String</code> <code>Integer</code> Operator_Compare other As <code>XUISemanticVersion</code> <code>Integer</code> Operator_Convert s As <code>String</code> ToJSON <code>String</code> ToString <code>String</code>"},{"location":"XUI/Required/XUISemanticVersion/#property-descriptions","title":"Property Descriptions","text":"<p>Major As Integer</p> <p>The major version number.</p> <p>Minor As Integer</p> <p>The minor version number.</p> <p>mMajor As Integer</p> <p>Backing field for the <code>Major</code> computed property.</p> <p>mMinor As Integer</p> <p>Backing field for the <code>Minor</code> computed property.</p> <p>mPatch As Integer</p> <p>Backing field for the <code>Patch</code> computed property.</p> <p>Patch As Integer</p> <p>The patch version.</p>"},{"location":"XUI/Required/XUISemanticVersion/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(major As Integer, minor As Integer, patch As Integer)</p> <p>Default constructor</p> <p>Defaults to <code>1.0.0</code>.</p> <p>Constructor(version As String)</p> <p>Constructs a semantic version class from a string in the form: \"MAJOR.MINOR.PATCH\".</p> <p>Operator_Compare(s As String) As Integer</p> <p>Compares this semantic version to a version number string in the form: <code>\"MAJOR.MINOR.PATCH\"</code>.</p> <p>Returns:</p> <pre><code>0 : Self = other\n-1: Self &lt; other\n1 : Self &gt; other\n</code></pre> <p>Raises an <code>InvalidArgumentException</code> if <code>s</code> is not in the correct format.</p> <p>Operator_Compare(other As XUISemanticVersion) As Integer</p> <p>Compares this semantic version to <code>other</code>.</p> <p>Returns:</p> <pre><code>0 : Self = other\n-1: Self &lt; other\n1 : Self &gt; other\n</code></pre> <p>Operator_Convert(s As String)</p> <p>Sets the value of this version to <code>s</code>.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>s</code> is not a valid version string of the format: <code>\"MAJOR.MINOR.PATCH\"</code>.</p> <p>ToJSON() As String</p> <p>Returns a JSON representation of this semantic version.</p> <p>ToString() As String</p> <p>Returns this semantic version as a string in the form: <code>\"MAJOR.MINOR.PATCH\"</code></p>"},{"location":"XUI/Required/XUITextLine/","title":"XUITextLine","text":""},{"location":"XUI/Required/XUITextLine/#description","title":"Description","text":"<p>Represents a line of text.  Required by <code>MarkdownKit</code> and <code>XUICodeEditor</code>.</p>"},{"location":"XUI/Required/XUITextLine/#properties","title":"Properties","text":"Name Type Read-Only Characters() <code>String</code> Finish <code>Integer</code> \u2714 IsBlank <code>Boolean</code> \u2714 IsDirty <code>Boolean</code> IsEmpty <code>Boolean</code> \u2714 Length <code>Integer</code> \u2714 mContents <code>String</code> Number <code>Integer</code> Start <code>Integer</code> Value <code>String</code>"},{"location":"XUI/Required/XUITextLine/#methods","title":"Methods","text":"Name Parameters Returns Constructor Constructor lineNumber As <code>Integer</code>, start As <code>Integer</code>, contents As <code>String</code>"},{"location":"XUI/Required/XUITextLine/#property-descriptions","title":"Property Descriptions","text":"<p>Characters() As String</p> <p>The individual characters on this line. Does not include newline characters. Should be considered read-only.</p> <p>Finish As Integer</p> <p>The 0-based index in the initial text of the end of this line.</p> <p>IsBlank As Boolean</p> <p>True if this line is considered blank (empty or contains only spaces or horizontal tabs).</p> <p>IsDirty As Boolean</p> <p>True if the line should be considered dirty and needs redrawing.</p> <p>IsEmpty As Boolean</p> <p>True if this is an empty line.</p> <p>Length As Integer</p> <p>The number of characters on this line.</p> <p>mContents As String</p> <p>Backing field which is a string concatenation of the <code>Characters</code> array.</p> <p>Number As Integer</p> <p>The 1-based line number.</p> <p>Start As Integer</p> <p>The 0-based index within the initial text of the first character on this line.</p> <p>Value As String</p> <p>The line's contents as a string.</p>"},{"location":"XUI/Required/XUITextLine/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>The default constructor.</p> <p>Constructor(lineNumber As Integer, start As Integer, contents As String)</p> <p>A constructor that takes a 1-based <code>lineNumber</code>, a 0-based <code>start</code> position in the original text and some string <code>contents</code>.</p>"},{"location":"XUI/Required/XUITextSelection/","title":"XUITextSelection","text":""},{"location":"XUI/Required/XUITextSelection/#description","title":"Description","text":"<p>Represents a selection of text within the code editor.</p>"},{"location":"XUI/Required/XUITextSelection/#properties","title":"Properties","text":"Name Type Read-Only Anchor <code>Integer</code> EndLocation <code>Integer</code> Length <code>Integer</code> \u2714 StartLocation <code>Integer</code>"},{"location":"XUI/Required/XUITextSelection/#methods","title":"Methods","text":"Name Parameters Returns Clone <code>XUITextSelection</code> Constructor anchor As <code>Integer</code>, startPos As <code>Integer</code>, endPos As <code>Integer</code> ContainsColumn column As <code>Integer</code> <code>Boolean</code> ContainsLine line As <code>XUICELine</code> <code>Boolean</code> InRange value As <code>Integer</code>, lower As <code>Integer</code>, upper As <code>Integer</code> <code>Boolean</code> IntersectsLine line As <code>XUICELine</code> <code>Boolean</code> SelectedColumnsInLine line As <code>XUICELine</code> <code>XUISelectedColumns</code>"},{"location":"XUI/Required/XUITextSelection/#property-descriptions","title":"Property Descriptions","text":"<p>Anchor As Integer</p> <p>0-based position of this selection's anchor (original caret starting position).</p> <p>EndLocation As Integer</p> <p>0-based end position of this text selection.</p> <p>Length As Integer</p> <p>The length of this selection.</p> <p>StartLocation As Integer</p> <p>0-based start position of this selection.</p>"},{"location":"XUI/Required/XUITextSelection/#method-descriptions","title":"Method Descriptions","text":"<p>Clone() As XUITextSelection</p> <p>Returns a deep clone of this object.</p> <p>Constructor(anchor As Integer, startPos As Integer, endPos As Integer)</p> <p>Default constructor.</p> <ul> <li><code>anchor</code> is the 0-based location of the anchor. </li> <li><code>startPos</code> is the 0-based start position of this selection. </li> <li><code>endPos</code> is the 0-based end position of this selection. </li> </ul> <p>The anchor marks the position that the selection began. Typically this will be the caret position when the selection begins but it's not necessarily the same as the start position. The anchor is typically set to <code>-1</code> when it is not required.</p> <p>ContainsColumn(column As Integer) As Boolean</p> <p>True if <code>column</code> is within this selection.</p> <p>ContainsLine(line As XUICELine) As Boolean</p> <p>Returns True if this selection entirely contains <code>line</code>.</p> <p>A line is considered to be contained by a selection if both its start and end locations are within this selection.</p> <p>InRange(value As Integer, lower As Integer, upper As Integer) As Boolean</p> <p>Returns True if <code>value</code> is within the passed bounds.</p> <p>IntersectsLine(line As XUICELine) As Boolean</p> <p>Returns True if any of this selection intersects <code>line</code>.</p> <p>A line is intersected by a selection if any character of the line is within it.</p> <p>SelectedColumnsInLine(line As XUICELine) As XUISelectedColumns</p> <p>If <code>line</code> is wholly or partly contained within this selection then returns the columns selected or Nil.</p> <p>Returns an object representing the start and end columns contained by this selection or Nil if this selection does not intersect <code>line</code>. If this selection extends beyond the length of this line then the returned <code>TextSelection</code> will have its <code>EndLocation</code> set to <code>-1</code>. If this selection begins before this line then the returned <code>TextSelection</code> will have its <code>Anchor</code> set to <code>-1</code>. Otherwise it's set to <code>0</code>.</p>"},{"location":"XUI/Required/AppKit/AppKit/","title":"AppKit","text":""},{"location":"XUI/Required/AppKit/AppKit/#description","title":"Description","text":"<p>Exposes macOS-specific structures required internally by certain XUI classes.</p>"},{"location":"XUI/Required/Extensions/XUIColorExtensions/XUIColorExtensions/","title":"XUIColorExtensions","text":""},{"location":"XUI/Required/Extensions/XUIColorExtensions/XUIColorExtensions/#description","title":"Description","text":"<p>A module containing extension methods for the native Xojo <code>Color</code> type.</p>"},{"location":"XUI/Required/Extensions/XUIColorExtensions/XUIColorExtensions/#methods","title":"Methods","text":"Name Parameters Returns Complementary c As <code>Color</code> <code>Color</code> ToRGBString c As <code>Color</code> <code>String</code>"},{"location":"XUI/Required/Extensions/XUIColorExtensions/XUIColorExtensions/#method-descriptions","title":"Method Descriptions","text":"<p>Complementary(c As Color) As Color</p> <p>Returns the complementary (opposite) color to <code>c</code>.</p> <p>ToRGBString(c As Color) As String</p> <p>Returns <code>c</code> as a six digit RGB hex string in the format <code>RRGGBB</code>.</p>"},{"location":"XUI/Required/Extensions/XUIColorGroupExtensions/XUIColorGroupExtensions/","title":"XUIColorGroupExtensions","text":""},{"location":"XUI/Required/Extensions/XUIColorGroupExtensions/XUIColorGroupExtensions/#description","title":"Description","text":"<p>This module contains helper methods for dealing with <code>ColorGroup</code>s.</p>"},{"location":"XUI/Required/Extensions/XUIColorGroupExtensions/XUIColorGroupExtensions/#methods","title":"Methods","text":"Name Parameters Returns Dark cg As <code>ColorGroup</code> <code>Color</code> FromString s As <code>String</code> <code>ColorGroup</code> Light cg As <code>ColorGroup</code> <code>Color</code> ToString cg As <code>ColorGroup</code> <code>String</code> ToTOML cg As <code>ColorGroup</code> <code>String</code>"},{"location":"XUI/Required/Extensions/XUIColorGroupExtensions/XUIColorGroupExtensions/#method-descriptions","title":"Method Descriptions","text":"<p>Dark(cg As ColorGroup) As Color</p> <p>If <code>cg</code> has a dark colour defined it is returned otherwise the light colour is returned.</p> <p>FromString(s As String) As ColorGroup</p> <p>Returns a new ColorGroup from <code>s</code>. Raises an <code>InvalidArgumentException</code> if <code>s</code> is incorrectly formatted.</p> <p><code>s</code> may be in one of two formats:</p> <p><code>\"&amp;hAARRGGBB\"</code> for a single colour. <code>\"&amp;hAARRGGBB, &amp;hAARRGGBB\"</code> for light colour, dark colour.</p> <p>Optional spaces are permitted after the comma and flanking <code>s</code>.</p> <p>Light(cg As ColorGroup) As Color</p> <p>Returns the light colour component of <code>cg</code>.</p> <p>ToString(cg As ColorGroup) As String</p> <p>Returns a string representation of this color group in the format: <code>&amp;hAARRGGBB : &amp;hAARRGGBB</code> Where the left value is the light value and the right value is the dark value.</p> <p>ToTOML(cg As ColorGroup) As String</p> <p>Converts <code>cg</code> to a TOML value.</p> <p>The resultant string will be in the format:</p> <p><code>\"&amp;hAARRGGBB, &amp;hAARRGGBB\"</code> representing light colour, dark colour.</p> <p>This is the case even if only a single colour is specified (the light colour will be duplicated).</p>"},{"location":"XUI/Required/Extensions/XUIDesktopDisplayExtensions/XUIDesktopDisplayExtensions/","title":"XUIDesktopDisplayExtensions","text":""},{"location":"XUI/Required/Extensions/XUIDesktopDisplayExtensions/XUIDesktopDisplayExtensions/#description","title":"Description","text":"<p>A module containing extension methods for the Xojo <code>DesktopDisplay</code> class.</p>"},{"location":"XUI/Required/Extensions/XUIDesktopDisplayExtensions/XUIDesktopDisplayExtensions/#methods","title":"Methods","text":"Name Parameters Returns Bounds d As <code>DesktopDisplay</code> <code>Rect</code>"},{"location":"XUI/Required/Extensions/XUIDesktopDisplayExtensions/XUIDesktopDisplayExtensions/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds(d As DesktopDisplay) As Rect</p> <p>Returns the bounds of <code>d</code> as a Rect.</p>"},{"location":"XUI/Required/Extensions/XUIDesktopWindowExtensions/XUIDesktopWindowExtensions/","title":"XUIDesktopWindowExtensions","text":""},{"location":"XUI/Required/Extensions/XUIDesktopWindowExtensions/XUIDesktopWindowExtensions/#description","title":"Description","text":"<p>A module containing extension methods for the Xojo <code>DesktopWindow</code> class.</p>"},{"location":"XUI/Required/Extensions/XUIDesktopWindowExtensions/XUIDesktopWindowExtensions/#methods","title":"Methods","text":"Name Parameters Returns Center w As <code>DesktopWindow</code> ChromeHeight w As <code>DesktopWindow</code> <code>Double</code> Display w As <code>DesktopWindow</code> <code>DesktopDisplay</code> DisplayIndex w As <code>DesktopWindow</code> <code>Integer</code>"},{"location":"XUI/Required/Extensions/XUIDesktopWindowExtensions/XUIDesktopWindowExtensions/#method-descriptions","title":"Method Descriptions","text":"<p>Center(w As DesktopWindow)</p> <p>Centers this window on its current display by adjusting the window's <code>Left</code> and <code>Top</code> properties.</p> <p>ChromeHeight(w As DesktopWindow) As Double</p> <p>Returns the height of the passed window's chrome. On Windows this is the title bar and menu. On macOS it's the title bar.</p> <p>Display(w As DesktopWindow) As DesktopDisplay</p> <p>Returns the display that contains the greatest proportion of <code>w</code> or Nil if no display contains it.</p> <p>DisplayIndex(w As DesktopWindow) As Integer</p> <p>Returns the index of the first display <code>w</code> is found on or <code>-1</code> if not found.</p>"},{"location":"XUI/Required/Extensions/XUIPictureExtensions/XUIPictureExtensions/","title":"XUIPictureExtensions","text":""},{"location":"XUI/Required/Extensions/XUIPictureExtensions/XUIPictureExtensions/#description","title":"Description","text":"<p>A module containing extension methods for the Xojo <code>Picture</code> class.</p>"},{"location":"XUI/Required/Extensions/XUIPictureExtensions/XUIPictureExtensions/#methods","title":"Methods","text":"Name Parameters Returns ResizeToFit p As <code>Picture</code>, maxWidth As <code>Integer</code>, maxHeight As <code>Integer</code>, scaleMode As <code>XUIPictureScaleModes</code>, onlyShrink As <code>Boolean</code> <code>Picture</code>"},{"location":"XUI/Required/Extensions/XUIPictureExtensions/XUIPictureExtensions/#enumerations","title":"Enumerations","text":"<p>XUIPictureScaleModes</p> <p>The supported ways to scale a picture.</p> Name ToFill ToFit StretchToFill"},{"location":"XUI/Required/Extensions/XUIPictureExtensions/XUIPictureExtensions/#method-descriptions","title":"Method Descriptions","text":"<p>ResizeToFit(p As Picture, maxWidth As Integer, maxHeight As Integer, scaleMode As XUIPictureScaleModes, onlyShrink As Boolean) As Picture</p> <p>Returns a new picture that is a resized version of <code>p</code>. If <code>onlyShrink</code> is True then we will never enlarge <code>p</code>.</p> <p>Based on code by Sam Rowlands.</p>"},{"location":"XUI/Required/Extensions/XUIRectExtensions/XUIRectExtensions/","title":"XUIRectExtensions","text":""},{"location":"XUI/Required/Extensions/XUIRectExtensions/XUIRectExtensions/#description","title":"Description","text":"<p>A module containing extension methods for the Xojo <code>Rect</code> class.</p>"},{"location":"XUI/Required/Extensions/XUIRectExtensions/XUIRectExtensions/#methods","title":"Methods","text":"Name Parameters Returns Area r As <code>Rect</code> <code>Double</code> Overlap A As <code>Rect</code>, B As <code>Rect</code> <code>Double</code>"},{"location":"XUI/Required/Extensions/XUIRectExtensions/XUIRectExtensions/#method-descriptions","title":"Method Descriptions","text":"<p>Area(r As Rect) As Double</p> <p>Returns the area of Rect <code>r</code>.</p> <p>Overlap(A As Rect, B As Rect) As Double</p> <p>Returns the percentage of overlap between Rects <code>A</code> and <code>B</code>. 1.0 is perfect overlap, 0.0 is no overlap.</p> <p>StackOverflow post.</p>"},{"location":"XUI/Required/FileKit/FileKit/","title":"FileKit","text":""},{"location":"XUI/Required/FileKit/FileKit/#description","title":"Description","text":"<p>FileKit is a Xojo module for robustly handling <code>FolderItem</code> copying, deletion and moving. </p> <p>I created it because the native <code>FolderItem</code> <code>Copy()</code>, <code>Move()</code> and <code>Remove()</code> methods are buggy.  This is particularly true on Windows (especially Windows 10). </p> <p>This module uses the <code>cp</code> and <code>mv</code> shell commands on Unix systems (macOS and Linux) and the <code>move</code> and  <code>xcopy</code> commands on Windows.</p>"},{"location":"XUI/Required/FileKit/FileKit/#properties","title":"Properties","text":"Name Type Read-Only ProtectedFolderItems <code>Dictionary</code> \u2714 SafeMode <code>Boolean</code>"},{"location":"XUI/Required/FileKit/FileKit/#methods","title":"Methods","text":"Name Parameters Returns CopyTo source As <code>FolderItem</code>, destination As <code>FolderItem</code>, overwrite As <code>Boolean</code> <code>FileKit.Errors</code> CopyTo source As <code>FolderItem</code>, destination As <code>FolderItem</code>, overwrite As <code>Boolean</code> <code>FileKit.Errors</code> MoveTo source As <code>FolderItem</code>, destination As <code>FolderItem</code>, overwrite As <code>Boolean</code> <code>FileKit.Errors</code> MoveTo source As <code>FolderItem</code>, destination As <code>FolderItem</code>, overwrite As <code>Boolean</code> <code>FileKit.Errors</code> ReallyDelete what As <code>FolderItem</code>, safeMode As <code>Boolean</code> <code>Boolean</code> ReallyDelete what As <code>FolderItem</code>, safeMode As <code>Boolean</code> <code>Boolean</code> SetupProtectedFiles <code>Dictionary</code> ToString e As <code>FileKit.Errors</code> <code>String</code> UnixCopyFile file As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code> UnixCopyFolder folder As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code> UnixMoveFile file As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code> UnixMoveFolder folder As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code> WindowsCopyFile file As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code> WindowsCopyFolder folder As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code> WindowsMoveFile file As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code> WindowsMoveFolder folder As <code>FolderItem</code>, destination As <code>FolderItem</code> <code>FileKit.Errors</code>"},{"location":"XUI/Required/FileKit/FileKit/#constants","title":"Constants","text":"Name Type QUOTE <code>String</code> <p>QUOTE As String The double quote character.</p>"},{"location":"XUI/Required/FileKit/FileKit/#enumerations","title":"Enumerations","text":"<p>Errors</p> <p>The various errors that can occur during file manipulation.</p> Name Aborted AttemptToDeleteProtectedFolderItem CpError DestinationDoesNotExist DestinationIsNil MoveError None SourceDoesNotExist SourceIsNil UnableToCreateDestinationFolder UnableToDeleteFile UnableToDeleteFolder Unknown XcopyDiskWriteError"},{"location":"XUI/Required/FileKit/FileKit/#property-descriptions","title":"Property Descriptions","text":"<p>ProtectedFolderItems As Dictionary</p> <p>A dictionary containing paths that are protected. Key = Native path, Value = Boolean.</p> <p>SafeMode As Boolean</p> <p>True if FileKit should run in safe mode which prevents certain paths from being deleted.</p>"},{"location":"XUI/Required/FileKit/FileKit/#method-descriptions","title":"Method Descriptions","text":"<p>CopyTo(source As FolderItem, destination As FolderItem, overwrite As Boolean) As FileKit.Errors</p> <p>Copies <code>source</code> to <code>destination</code>.</p> <p><code>source</code> is the file or folder to copy. <code>destination</code> must be a folder and must exist.</p> <p>CopyTo(source As FolderItem, destination As FolderItem, overwrite As Boolean) As FileKit.Errors</p> <p>Copies <code>source</code> to <code>destination</code>.</p> <p><code>source</code> is the file or folder to copy. <code>destination</code> must be a folder and must exist.</p> <p>MoveTo(source As FolderItem, destination As FolderItem, overwrite As Boolean) As FileKit.Errors</p> <p>Mmoves <code>source</code> to <code>destination</code>.</p> <p><code>source</code> is the file or folder to move. <code>destination</code> must be a folder.</p> <p>MoveTo(source As FolderItem, destination As FolderItem, overwrite As Boolean) As FileKit.Errors</p> <p>Mmoves <code>source</code> to <code>destination</code>.</p> <p><code>source</code> is the file or folder to move. <code>destination</code> must be a folder.</p> <p>ReallyDelete(what As FolderItem, safeMode As Boolean) As Boolean</p> <p>Completely deletes <code>what</code> even if it is a folder with contents. Returns True if successful.</p> <p>ReallyDelete(what As FolderItem, safeMode As Boolean) As Boolean</p> <p>Completely deletes <code>what</code> even if it is a folder with contents. Returns True if successful.</p> <p>SetupProtectedFiles() As Dictionary</p> <p>Returns the Dictionary that stores the FolderItems that must never be deleted by <code>ReallyDelete()</code></p> <p>Which locations are protected depends upon the platform that the app is currently running on.</p> <p>The following locations are protected on:</p> <p>Windows:</p> <p><code>ApplicationData</code>, <code>Applications</code>, <code>Desktop</code>, <code>Documents</code>, <code>Extensions</code>, <code>Favourites</code>, <code>Fonts</code>, <code>Movies</code>, <code>Music</code>, <code>Pictures</code>, <code>Printers</code>, <code>SharedApplicationData</code>, <code>SharedDocuments</code>, <code>System</code>, <code>UserHome</code>, <code>Windows</code></p> <p>macOS:</p> <p><code>ApplicationData</code>, <code>Applications</code>, <code>Bin</code>, <code>Desktop</code>, <code>Documents</code>, <code>Etc</code>, <code>Favourites</code>, <code>Fonts</code>, <code>Home</code>, <code>Library</code>, <code>Mount</code>, <code>Movies</code>, <code>Music</code>, <code>Pictures</code>, <code>Preferences</code>, <code>Printers</code>, <code>SBin</code>, <code>SharedApplicationData</code>, <code>SharedDocuments</code>, <code>SharedPreferences</code>, <code>System</code>, <code>UserBin</code>, <code>UserHome</code>, <code>UserLibrary</code>, <code>UsersBin</code></p> <p>Linux:</p> <p><code>ApplicationData</code>, <code>Bin</code>, <code>Desktop</code>, <code>Documents</code>, <code>Etc</code>, <code>Home</code>, <code>Library</code>, <code>Mount</code>, <code>Movies</code>, <code>Music</code>, <code>Pictures</code>, <code>SBin</code>, <code>UserBin</code>, <code>UserHome</code>, <code>UserLibrary</code>, <code>UsersBin</code></p> <p>ToString(e As FileKit.Errors) As String</p> <p>Returns a string representation of error <code>e</code>.</p> <p>UnixCopyFile(file As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Copies <code>source</code> to <code>destination</code> using the shell and the <code>cp</code> command.</p> <p><code>source</code> is the file to copy. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> does NOT contain an identically named file as <code>source</code>. macOS and Linux only.</p> <p>UnixCopyFolder(folder As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Copies <code>source</code> to <code>destination</code> using the shell and the <code>cp</code> command.</p> <p><code>source</code> is the folder to copy. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> is a folder and <code>destination</code> does NOT contain an identically named folder as <code>source</code>. macOS and Linux only.</p> <p>UnixMoveFile(file As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Moves <code>source</code> file to <code>destination</code> using the shell and the <code>mv</code> command.</p> <p><code>source</code> is the file to move. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> does NOT contain an identically named file as <code>source</code>. macOS and Linux only.</p> <p>UnixMoveFolder(folder As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Moves <code>source</code> folder to <code>destination</code> using the shell and the <code>mv</code> command.</p> <p><code>source</code> is the folder to move. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> is a folder and <code>destination</code> does NOT contain an identically named folder as <code>source</code>. macOS and Linux only.</p> <p>WindowsCopyFile(file As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Copies <code>source</code> to <code>destination</code> using the shell and the <code>xcopy</code> command.</p> <p><code>source</code> is the file to copy. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> does NOT contain an identically named file as <code>source</code>. Windows-only.</p> <p>WindowsCopyFolder(folder As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Copies <code>source</code> to <code>destination</code> using the shell and the <code>xcopy</code> command.</p> <p><code>source</code> is the folder to copy. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> is a folder and <code>destination</code> does NOT contain an identically named folder as <code>source</code>. Windows-only.</p> <p>WindowsMoveFile(file As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Moves <code>source</code> to <code>destination</code> using the shell and the <code>move</code> command.</p> <p><code>source</code> is the file to move. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> does NOT contain an identically named file as <code>source</code>. Windows-only.</p> <p>WindowsMoveFolder(folder As FolderItem, destination As FolderItem) As FileKit.Errors</p> <p>Moves <code>source</code> to <code>destination</code> using the shell and the <code>move</code> command.</p> <p><code>source</code> is the folder to move. <code>destination</code> specifies the folder that will become the parent of <code>source</code>.</p> <p>The method assumes that checks have already been made for the following conditions: <code>source</code> &lt;&gt; Nil and <code>source</code> exists <code>destination</code> &lt;&gt; Nil and <code>destination</code> exists and <code>destination</code> is a folder and <code>destination</code> does NOT contain an identically named folder as <code>source</code>. Windows-only.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotification/","title":"XUINotification","text":""},{"location":"XUI/Required/NotificationCenter/XUINotification/#description","title":"Description","text":"<p>Represents an in-app notification (i.e. a notification that can be passed between objects within your app.</p> <p>Comprises a string key and optional arbitrary data. The sending of notifications is done through  the <code>NotificationCenter</code>.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotification/#properties","title":"Properties","text":"Name Type Read-Only Data <code>Variant</code> Key <code>String</code> Sender <code>Variant</code>"},{"location":"XUI/Required/NotificationCenter/XUINotification/#methods","title":"Methods","text":"Name Parameters Returns Constructor sender As <code>Variant</code>, key As <code>String</code>, data As <code>Variant</code>"},{"location":"XUI/Required/NotificationCenter/XUINotification/#property-descriptions","title":"Property Descriptions","text":"<p>Data As Variant</p> <p>Optional data carried by this notification.</p> <p>Key As String</p> <p>A string key identifying this notification.</p> <p>Sender As Variant</p> <p>The object that sent this notification.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotification/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(sender As Variant, key As String, data As Variant)</p> <p>The default constructor.</p> <p><code>sender</code> is the object that sent this notification. <code>key</code> is the string key. <code>data</code> is optional arbitrary data.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotificationListener/","title":"XUINotificationListener","text":""},{"location":"XUI/Required/NotificationCenter/XUINotificationListener/#description","title":"Description","text":"<p>Objects that implement this interface are able to listen for and receive in-app notifications.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotificationListener/#methods","title":"Methods","text":"Name Parameters Returns NotificationReceived n As <code>XUINotification</code>"},{"location":"XUI/Required/NotificationCenter/XUINotificationListener/#method-descriptions","title":"Method Descriptions","text":"<p>NotificationReceived(n As XUINotification) The listener has received a notification.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/","title":"XUINotificationCenter","text":""},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/#description","title":"Description","text":"<p>This module provides a global mechanism for sending in-app notifications (essentially messages  between objects in your app) in the form of a <code>XUINotification</code>.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/#properties","title":"Properties","text":"Name Type Read-Only mDispatchQueue() <code>XUINotification</code> mDispatchTimer <code>Timer</code> mKeyListenerDictionary <code>Dictionary</code> mUnregistering <code>Boolean</code>"},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/#methods","title":"Methods","text":"Name Parameters Returns DispatchTimerAction sender As <code>Timer</code> ListenForKey listener As <code>XUINotificationListener</code>, key As <code>String</code> ListenForKeys listener As <code>XUINotificationListener</code>, keys() As <code>String</code> NormaliseKey key As <code>String</code> <code>String</code> Register key As <code>String</code>, listener As <code>XUINotificationListener</code> RemoveDeadReferences references() As <code>WeakRef</code> Send sender As <code>Variant</code>, key As <code>String</code>, data As <code>Variant</code> StopListening listener As <code>XUINotificationListener</code> StopListeningForKey listener As <code>XUINotificationListener</code>, key As <code>String</code> Unregister listener As <code>XUINotificationListener</code> UnregisterForKey listener As <code>XUINotificationListener</code>, key As <code>String</code> UnregisterForKeys listener As <code>XUINotificationListener</code>, keys() As <code>String</code>"},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/#constants","title":"Constants","text":"Name Type DISPATCH_INTERVAL_MILLISECONDS <code>Double</code> <p>DISPATCH_INTERVAL_MILLISECONDS As Double The number of milliseconds between checks for new messages to send.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/#property-descriptions","title":"Property Descriptions","text":"<p>mDispatchQueue() As XUINotification</p> <p>The queue of notifications that require sending.</p> <p>mDispatchTimer As Timer</p> <p>The timer used to dispatch notifications.</p> <p>mKeyListenerDictionary As Dictionary</p> <p>Key = Notification Key (String), Value = NKListener (WeakRef).</p> <p>mUnregistering As Boolean</p> <p>True if NotificationKit is in the middle of unregistering a listener.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/#method-descriptions","title":"Method Descriptions","text":"<p>DispatchTimerAction(sender As Timer)</p> <p>Delegate method, called by the internal timer, that actually dispatches the notifications.</p> <p><code>sender</code> is the timer whose <code>Action</code> event fired.</p> <p>ListenForKey(listener As XUINotificationListener, key As String)</p> <p>Registers the <code>listener</code> to listen for notifications with the <code>key</code>.</p> <p>ListenForKeys(listener As XUINotificationListener, keys() As String)</p> <p>Registers the <code>listener</code> to listen for notifications with the specified <code>keys</code>.</p> <p>NormaliseKey(key As String) As String</p> <p>Normalises <code>key</code> so it doesn't break subsequent regex queries.</p> <p>Keys can be hierarchical with children separated by a <code>.</code></p> <p>Wildcard matching is permitted with <code>*</code></p> <p>Examples:</p> <p><code>Prefs</code> Matches the key <code>Prefs</code> only. <code>Prefs.Editor</code> matches <code>Prefs.Editor</code> only. <code>Prefs.*</code> matches <code>Prefs.Editor</code>, <code>Prefs.Compiler</code>, etc. <code>Prefs.Editor.*</code> matches <code>Prefs.Editor.Colours</code>, <code>Prefs.Editor.Fonts</code>, etc.</p> <p>Register(key As String, listener As XUINotificationListener)</p> <p>Registers <code>listener</code> to be notified whenever a notification with <code>key</code> occurs.</p> <p>RemoveDeadReferences(references() As WeakRef)</p> <p>Removes any dead references from the array of weak references.</p> <p>Send(sender As Variant, key As String, data As Variant)</p> <p>Creates and queues the passed notification for sending.</p> <p>StopListening(listener As XUINotificationListener)</p> <p>Stops <code>listener</code> from listening to all notifications.</p> <p>StopListeningForKey(listener As XUINotificationListener, key As String)</p> <p>Stops <code>listener</code> from listening to notifications with <code>key</code>.</p> <p>Unregister(listener As XUINotificationListener)</p> <p>Unregisters <code>listener</code> from all notifications.</p> <p>UnregisterForKey(listener As XUINotificationListener, key As String)</p> <p>Unregisters <code>listener</code> from notifications with <code>key</code>.</p> <p>UnregisterForKeys(listener As XUINotificationListener, keys() As String)</p> <p>Unregisters <code>listener</code> from notifications with the specified <code>keys</code>.</p>"},{"location":"XUI/Required/NotificationCenter/XUINotificationCenter/XUINotificationCenter/#examples","title":"Examples","text":"<p>Let's suppose you have an instance of a class (<code>sender</code>) that periodically sends out a notification. This could be accomplished like so:</p> <pre><code>NotificationCenter.Send(\"MyKey\", someValue)\n</code></pre> <p>Will will also imagine that we have an instance of a class (<code>listener</code>) that wants to listen for these notifications.  This is easily achieved:</p> <pre><code>listener.Register(\"MyKey\")\n</code></pre> <p>Now whenever <code>sender</code> calls <code>NotificationCenter.Send()</code> with <code>\"MyKey\"</code> as the key, <code>listener</code>'s  <code>NotificationReceived()</code> method is invoked by the notification center.</p>"},{"location":"XUI/Required/XUI/XUI/","title":"XUI","text":""},{"location":"XUI/Required/XUI/XUI/#description","title":"Description","text":"<p>A required module that includes utility methods and enumerations used within the framework.</p>"},{"location":"XUI/Required/XUI/XUI/#methods","title":"Methods","text":"Name Parameters Returns GetDoubleClickTimeTicks <code>Integer</code>"},{"location":"XUI/Required/XUI/XUI/#enumerations","title":"Enumerations","text":"<p>ClickTypes</p> <p>Represents the various types of mouse clicks.</p> Name ContextualClick DoubleClick TripleClick SingleClick"},{"location":"XUI/Required/XUI/XUI/#method-descriptions","title":"Method Descriptions","text":"<p>GetDoubleClickTimeTicks() As Integer</p> <p>Returns the number of ticks that two clicks must occur within to be considered a double click.</p>"},{"location":"XUI/Required/XUIColors/XUIColors/","title":"XUIColors","text":""},{"location":"XUI/Required/XUIColors/XUIColors/#description","title":"Description","text":"<p>This module contains helper methods for dealing with the Xojo <code>Color</code> class.</p>"},{"location":"XUI/Required/XUIColors/XUIColors/#methods","title":"Methods","text":"Name Parameters Returns FromRGBAString s As <code>String</code> <code>Color</code>"},{"location":"XUI/Required/XUIColors/XUIColors/#method-descriptions","title":"Method Descriptions","text":"<p>FromRGBAString(s As String) As Color</p> <p>Returns a Xojo Color created from an RGBA hex string <code>s</code>. Raises an <code>InvalidArgumentException</code> if <code>s</code> is not valid.</p> <p>Valid string formats are: <code>\"RGB\"</code>, <code>\"RGBA\"</code>, <code>\"RRGGBB\"</code> and <code>\"RRGGBBAA\"</code></p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionary/","title":"XUIDictionary","text":"<p>Inherits <code>Dictionary</code></p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionary/#description","title":"Description","text":"<p>A case-sensitive dictionary subclass that gracefully handles mixtures of <code>String</code> and <code>Text</code> objects.</p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionary/#properties","title":"Properties","text":"Name Type Read-Only CaseSensitive <code>Boolean</code> \u2714 mCaseSensitive <code>Boolean</code>"},{"location":"XUI/Required/XUIDictionary/XUIDictionary/#methods","title":"Methods","text":"Name Parameters Returns AsText s As <code>String</code> <code>Text</code> Clone <code>XUIDictionary</code> Constructor Constructor caseSensitive As <code>Boolean</code>, ParamArray entries() As <code>Pair</code> Constructor ParamArray entries() As <code>Pair</code> DecodeKey key As <code>Variant</code> <code>Variant</code> EncodeKey key As <code>Variant</code> <code>Variant</code> EquivalentTo other As <code>XUIDictionary</code> <code>Boolean</code> HasKey key As <code>Variant</code> <code>Boolean</code> Iterator <code>Iterator</code> Key index As <code>Integer</code> <code>Variant</code> Keys <code>Variant()</code> Lookup key As <code>Variant</code>, defaultValue As <code>Variant</code> <code>Variant</code> TextValue key As <code>Variant</code> <code>Text</code> Value key As <code>Variant</code> <code>Variant</code> Value key As <code>Variant</code>, Assigns v As <code>Variant</code>"},{"location":"XUI/Required/XUIDictionary/XUIDictionary/#property-descriptions","title":"Property Descriptions","text":"<p>CaseSensitive As Boolean</p> <p>True if this dictionary's keys are case-sensitive.</p> <p>mCaseSensitive As Boolean</p> <p>Backing field for the computed <code>CaseSensitive</code> computed property.</p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionary/#method-descriptions","title":"Method Descriptions","text":"<p>AsText(s As String) As Text</p> <p>Returns <code>s</code> as a <code>Text</code> object.</p> <p>Clone() As XUIDictionary</p> <p>Returns a shallow clone of this dictionary</p> <p>Results in a new <code>XUIDictionary</code> that can be manipulated independently. A shallow clone means that if a value or key refers to a class instance, its contents are not cloned.</p> <p>Constructor()</p> <p>This is private to force users of the class to specify case sensitivity.</p> <p>Constructor(caseSensitive As Boolean, ParamArray entries() As Pair)</p> <p><code>caseSensitive</code> determines if case is considered when comparing keys. Takes an optional number of <code>Key:Value</code> <code>Pair</code> instances.</p> <p>Constructor(ParamArray entries() As Pair)</p> <p>This is private to force users of the class to specify case sensitivity.</p> <p>DecodeKey(key As Variant) As Variant</p> <p>Decodes <code>key</code>.</p> <p>EncodeKey(key As Variant) As Variant</p> <p>Encodes <code>key</code> if required.</p> <p>If we're case-sensitive, we encode all \"textual\" (<code>String</code> or <code>Text</code>) keys as hex strings. Other key types are left as-is. If we're not case-sensitive then we store all textual keys as <code>Text</code>. We do this so that we can compare the keys that may be <code>Text</code> with IDE string literals.</p> <p>EquivalentTo(other As XUIDictionary) As Boolean</p> <p>True if this dictionary's keys and values are equivalent to <code>other</code>.</p> <p>HasKey(key As Variant) As Boolean</p> <p>True if <code>key</code> is in the dictionary.</p> <p>Iterator() As Iterator</p> <p>Returns the dictionary iterator.</p> <p>Part of the Xojo <code>Iterable</code> interface.</p> <p>Key(index As Integer) As Variant</p> <p>Returns the value of <code>key</code> for the <code>index</code>th sequential item in this Dictionary.</p> <p>The first item is numbered zero. If there is no <code>index</code>th item in the dictionary, an <code>OutOfBoundsException</code> is raised.</p> <p>Keys() As Variant()</p> <p>Returns all the keys in this dictionary as an array of Variants.</p> <p>Lookup(key As Variant, defaultValue As Variant) As Variant</p> <p>Looks up the passed value of <code>key</code>.</p> <p>TextValue(key As Variant) As Text</p> <p>Retrieves the value associated with <code>key</code> converted to <code>Text</code>.</p> <p>Will fail if the value associated with <code>key</code> cannot be converted to <code>Text</code>.</p> <p>Value(key As Variant) As Variant</p> <p>Retrieves the value associated with <code>key</code>.</p> <p>Value(key As Variant, Assigns v As Variant)</p> <p>Assigns a value to the <code>key</code> item in the dictionary.</p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionaryIterator/","title":"XUIDictionaryIterator","text":"<p>Implements <code>Iterator</code></p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionaryIterator/#description","title":"Description","text":"<p>This class is used internally by <code>XUIDictionary</code> to provide <code>For...Each</code> loop iteration.</p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionaryIterator/#properties","title":"Properties","text":"Name Type Read-Only mCurrent <code>Integer</code> mKeys() <code>Variant</code> mKeysLastIndex <code>Integer</code> mOwner <code>Dictionary</code>"},{"location":"XUI/Required/XUIDictionary/XUIDictionaryIterator/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUIDictionary</code> MoveNext <code>Boolean</code> Value <code>Variant</code>"},{"location":"XUI/Required/XUIDictionary/XUIDictionaryIterator/#property-descriptions","title":"Property Descriptions","text":"<p>mCurrent As Integer</p> <p>Pointer to the next entry to retrieve.</p> <p>mKeys() As Variant</p> <p>The owning dictionary's keys.</p> <p>mKeysLastIndex As Integer</p> <p>Cached last index of <code>Keys()</code>.</p> <p>mOwner As Dictionary</p> <p>The dictionary that this iterator is operating upon.</p>"},{"location":"XUI/Required/XUIDictionary/XUIDictionaryIterator/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUIDictionary)</p> <p>Default constructor. Requires a reference to the <code>Dictionary</code> it will operate upon.</p> <p>MoveNext() As Boolean</p> <p>Part of the Iterator interface.</p> <p>Value() As Variant</p> <p>Part of the Iterator interface.</p>"},{"location":"XUI/Required/XUIFonts/XUIFonts/","title":"XUIFonts","text":""},{"location":"XUI/Required/XUIFonts/XUIFonts/#description","title":"Description","text":"<p>A module providing helper methods for working with fonts.</p>"},{"location":"XUI/Required/XUIFonts/XUIFonts/#methods","title":"Methods","text":"Name Parameters Returns All <code>String()</code> AllMonospace <code>String()</code> AllMonospace_ <code>String()</code> All_ <code>String()</code> FontAvailable fontName As <code>String</code> <code>Boolean</code> IsMonospaceFont fontName As <code>String</code> <code>Boolean</code>"},{"location":"XUI/Required/XUIFonts/XUIFonts/#method-descriptions","title":"Method Descriptions","text":"<p>All() As String()</p> <p>Returns an array of the names of all fonts available on this system.</p> <p>AllMonospace() As String()</p> <p>Returns an array of the names of all monospace fonts available on this system.</p> <p>AllMonospace_() As String()</p> <p>Internal use. Returns an array of the names of all monospace fonts available on this system.</p> <p>This is called internally by <code>AllMonospace()</code> when returning the list of fonts.</p> <p>All_() As String()</p> <p>Internal use. Returns an array of the names of all fonts available on this system.</p> <p>This is called internally by <code>All()</code> when returning the list of fonts.</p> <p>FontAvailable(fontName As String) As Boolean</p> <p>Returns <code>True</code> if there is a font named <code>fontName</code> available for use on the system.</p> <p>IsMonospaceFont(fontName As String) As Boolean</p> <p>Returns <code>True</code> if a font named <code>fontName</code> exists on the system and is monospace.</p>"},{"location":"XUI/Required/XUIMaths/XUIMaths/","title":"XUIMaths","text":""},{"location":"XUI/Required/XUIMaths/XUIMaths/#description","title":"Description","text":"<p>This module exposes a wide range of mathematical methods.</p>"},{"location":"XUI/Required/XUIMaths/XUIMaths/#properties","title":"Properties","text":"Name Type Read-Only DOUBLE_EXP_BIAS <code>Int32</code> \u2714 DOUBLE_EXP_BIT_MASK <code>Int64</code> \u2714 DOUBLE_MAX_EXPONENT <code>Int32</code> \u2714 DOUBLE_MIN_EXPONENT <code>Int32</code> \u2714 DOUBLE_MIN_SUB_EXPONENT <code>Int32</code> \u2714 DOUBLE_SIGNIFICAND_WIDTH <code>Int32</code> \u2714 DOUBLE_SIGNIF_BIT_MASK <code>Int64</code> \u2714 DOUBLE_SIGN_BIT_MASK <code>Int64</code> \u2714 Epsilon <code>Double</code> \u2714 NAN <code>Double</code> \u2714 NEGATIVE_INFINITY <code>Double</code> \u2714 POSITIVE_INFINITY <code>Double</code> \u2714 TWO_PI <code>Double</code> \u2714 TWO_TO_THE_DOUBLE_SCALE_DOWN <code>Double</code> \u2714 TWO_TO_THE_DOUBLE_SCALE_UP <code>Double</code> \u2714"},{"location":"XUI/Required/XUIMaths/XUIMaths/#methods","title":"Methods","text":"Name Parameters Returns Assert condition As <code>Boolean</code>, message As <code>String</code> BitsToDouble bits As <code>Int64</code> <code>Double</code> Clamp value As <code>Double</code>, minimum As <code>Double</code>, maximum As <code>Double</code> <code>Double</code> CoinToss trueBias As <code>Double</code> <code>Boolean</code> Compare d1 As <code>Double</code>, d2 As <code>Double</code> <code>Integer</code> ComputeEpsilon <code>Double</code> CopySign magnitude As <code>Double</code>, sign As <code>Double</code> <code>Double</code> CubeRoot d As <code>Double</code> <code>Double</code> DoubleToBits d As <code>Double</code> <code>Int64</code> DoubleToRawBits d As <code>Double</code> <code>Int64</code> GetExponent d As <code>Double</code> <code>Int32</code> HalfPlaneSign p1 As <code>Point</code>, p2 As <code>Point</code>, p3 As <code>Point</code> <code>Double</code> Hypotenuse x As <code>Double</code>, y As <code>Double</code> <code>Double</code> IsCloseTo d1 As <code>Double</code>, d2 As <code>Double</code>, decimalPoints As <code>Integer</code> <code>Boolean</code> IsEven i As <code>Integer</code> <code>Boolean</code> IsInteger d As <code>Double</code> <code>Boolean</code> IsOdd i As <code>Integer</code> <code>Boolean</code> IsZero d As <code>Double</code> <code>Boolean</code> Lerp a As <code>Double</code>, b As <code>Double</code>, f As <code>Double</code> <code>Double</code> LShift32 v As <code>Int32</code>, s As <code>Integer</code> <code>Int32</code> LShift64 v As <code>Int64</code>, s As <code>Integer</code> <code>Int64</code> Modulo a As <code>Integer</code>, b As <code>Integer</code> <code>Integer</code> NextDown d As <code>Double</code> <code>Double</code> NextUp d As <code>Double</code> <code>Double</code> NumberOfLeadingZeros i As <code>Int64</code> <code>Int32</code> NumberOfTrailingZeros i As <code>Int64</code> <code>Int32</code> PointInTriangle p As <code>Point</code>, v1 As <code>Point</code>, v2 As <code>Point</code>, v3 As <code>Point</code> <code>Boolean</code> PowerOfTwoD n As <code>Int32</code> <code>Double</code> Random low As <code>Double</code>, high As <code>Double</code> <code>Double</code> RShift v As <code>Int64</code>, s As <code>Integer</code> <code>Int64</code> RShiftU32 v As <code>Int32</code>, s As <code>Integer</code> <code>Int32</code> RShiftU64 v As <code>Int64</code>, shift As <code>Integer</code> <code>Int64</code> Scalb d As <code>Double</code>, scaleFactor As <code>Integer</code> <code>Double</code> Signum d As <code>Double</code> <code>Double</code> ToBinaryString currencyValue As <code>Currency</code> <code>String</code> ToBinaryString doubleValue As <code>Double</code> <code>String</code> ToBinaryString i16 As <code>Int16</code> <code>String</code> ToBinaryString i32 As <code>Int32</code> <code>String</code> ToBinaryString i64 As <code>Int64</code> <code>String</code> ToBinaryString i8 As <code>Int8</code> <code>String</code> ToBinaryString singleValue As <code>Single</code> <code>String</code> ToBinaryString i16 As <code>UInt16</code> <code>String</code> ToBinaryString i32 As <code>UInt32</code> <code>String</code> ToBinaryString i64 As <code>UInt64</code> <code>String</code> ToBinaryString i8 As <code>UInt8</code> <code>String</code> ToDegrees radians As <code>Double</code> <code>Double</code> ToRadians degrees As <code>Double</code> <code>Double</code> WrapInteger i As <code>Integer</code>, maxValue As <code>Integer</code> <code>Integer</code>"},{"location":"XUI/Required/XUIMaths/XUIMaths/#constants","title":"Constants","text":"Name Type DOUBLE_MAX_VALUE <code>Double</code> DOUBLE_MIN_NORMAL <code>Double</code> DOUBLE_MIN_VALUE <code>Double</code> INT32_MAX_VALUE <code>Double</code> INT32_MIN_VALUE <code>Double</code> INT64_MAX_VALUE <code>Double</code> PI <code>Double</code> <p>DOUBLE_MAX_VALUE As Double The largest positive finite value of type Double.</p> <p>DOUBLE_MIN_NORMAL As Double The smallest positive normal Double value, <code>2^-1022</code>.  It's equal to <code>MathsKit.BitsToDouble(&amp;h0010000000000000)</code>.</p> <p>DOUBLE_MIN_VALUE As Double The smallest positive non-zero value of type Double:  2^-1074.</p> <p>INT32_MAX_VALUE As Double The maximum value of an <code>Int32</code>.</p> <p>INT32_MIN_VALUE As Double The minimum value of an <code>Int32</code>.</p> <p>INT64_MAX_VALUE As Double The maximum value of an <code>Int64</code>.</p> <p>PI As Double The value of <code>\u03c0</code> to 11 decimal places.</p>"},{"location":"XUI/Required/XUIMaths/XUIMaths/#property-descriptions","title":"Property Descriptions","text":"<p>DOUBLE_EXP_BIAS As Int32</p> <p>Bias used in representing a Double exponent.</p> <p>DOUBLE_EXP_BIT_MASK As Int64</p> <p>Bit mask to isolate the exponent field of a Double.</p> <p>DOUBLE_MAX_EXPONENT As Int32</p> <p>Maximum exponent a finite Double variable may have. It is equal to the value returned by <code>MathsKit.GetExponent(DOUBLE_MAX_VALUE)</code>.</p> <p>DOUBLE_MIN_EXPONENT As Int32</p> <p>Minimum exponent a normalised Double variable may have.  It is equal to the value returned by <code>MathsKit.GetExponent(DOUBLE_MIN_NORMAL)</code>.</p> <p>DOUBLE_MIN_SUB_EXPONENT As Int32</p> <p>The exponent the smallest positive Double subnormal value would have if it could be normalised.</p> <p>DOUBLE_SIGNIFICAND_WIDTH As Int32</p> <p>The width (in bits) of the significand of a double.</p> <p>DOUBLE_SIGNIF_BIT_MASK As Int64</p> <p>Bit mask to isolate the significand field of a Double.</p> <p>DOUBLE_SIGN_BIT_MASK As Int64</p> <p>Bit mask to isolate the sign bit of a Double.</p> <p>Epsilon As Double</p> <p>An approximation of machine epsilon.</p> <p>NAN As Double</p> <p>Returns <code>NaN</code> (not a number).</p> <p>NEGATIVE_INFINITY As Double</p> <p>The value of negative infinity.</p> <p>POSITIVE_INFINITY As Double</p> <p>The value of positive infinity.</p> <p>TWO_PI As Double</p> <p>A precomputed value of <code>2 * \u03c0</code>.</p> <p>TWO_TO_THE_DOUBLE_SCALE_DOWN As Double</p> <p>A constant used in <code>Scalb()</code>.</p> <p>TWO_TO_THE_DOUBLE_SCALE_UP As Double</p> <p>A constant used in <code>Scalb()</code>.</p>"},{"location":"XUI/Required/XUIMaths/XUIMaths/#method-descriptions","title":"Method Descriptions","text":"<p>Assert(condition As Boolean, message As String)</p> <p>Asserts that <code>condition</code> is True, otherwise raises an exception.</p> <p>BitsToDouble(bits As Int64) As Double</p> <p>Returns the double value corresponding to a given bit representation.</p> <p>The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point \"double format\" bit layout.</p> <p>If the argument is <code>&amp;h7ff0000000000000L</code>, the result is positive infinity. If the argument is <code>&amp;hfff0000000000000</code>, the result is negative infinity. If the argument is any value in the range <code>&amp;h7ff0000000000001</code> through <code>&amp;h7fffffffffffffff</code> or in the range <code>&amp;hfff0000000000001</code> through <code>&amp;hffffffffffffffff</code>, the result is a <code>NaN</code>.</p> <p>No IEEE 754 floating-point operation can distinguish between two NaN values of the same type with different bit patterns.  Distinct values of NaN are only distinguishable by use of the <code>DoubleToRaw</code> method.</p> <p>In all other cases, let <code>s</code>, <code>e</code>, and <code>m</code> be three * values that can be computed from the argument:</p> <pre><code> int s = ((bits &gt;&gt; 63) = 0) ? 1 : -1\n int e = (int)((bits &gt;&gt; 52) &amp; 0x7ffL)\n long m = (e = 0) ?\n                (bits &amp; 0xfffffffffffffL) &lt;&lt; 1 :\n                (bits &amp; 0xfffffffffffffL) | 0x10000000000000L\n</code></pre> <p>Then the floating-point result equals the value of the mathematical expression <code>s\u00b7m\u00b72^e-1075</code></p> <p>Note that this method may not be able to return double <code>NaN</code> with exactly the same bit pattern as the argument. IEEE 754 distinguishes between two kinds of <code>NaN</code>s, quiet <code>NaN</code>s and signaling NaNs. The differences between the two kinds of <code>NaN</code> are generally not visible. Arithmetic operations on signaling <code>NaN</code>s turn them into quiet NaNs with a different, but often similar, bit pattern. However, on some processors merely copying a signaling <code>NaN</code> also performs that conversion. In particular, copying a signaling <code>NaN</code> to return it to the calling method may perform this conversion. So <code>BitsToDouble</code> may not be able to return a double with a signaling NaN bit pattern.  Consequently, for some <code>UInt64</code> values, <code>DoubleToRawBits(BitsToDouble(start))</code> may not equal <code>start</code>. Moreover, which particular bit patterns represent signaling NaNs is platform dependent although all <code>NaN</code> bit patterns, quiet or signaling, must be in the <code>NaN</code> range identified above.</p> <p>Clamp(value As Double, minimum As Double, maximum As Double) As Double</p> <p>Returns the passed value clamped between <code>minimum</code> and <code>maximum</code>.</p> <p>CoinToss(trueBias As Double) As Boolean</p> <p>Returns True or False.</p> <p>Simulates a coin toss by returning a random boolean. The optional <code>trueBias</code> determines the chance of True being returned. This value should be between <code>0</code> and <code>1</code>. If <code>0</code> then there is a 0% chance that True will be returned, if <code>1</code> then the chance is 100%.</p> <p>Compare(d1 As Double, d2 As Double) As Integer</p> <p>Compares the two specified double values.</p> <p>The value <code>0</code> if <code>d1</code> is numerically equal to <code>d2</code>, a value less than <code>0</code> if <code>d1</code> is numerically less than <code>d2</code> and a value greater than <code>0</code> if <code>d1</code> is numerically greater than <code>d2</code>.</p> <p>ComputeEpsilon() As Double</p> <p>Computes an approximation of machine epsilon.</p> <p>CopySign(magnitude As Double, sign As Double) As Double</p> <p>Returns <code>magnitude</code> with the sign of <code>sign</code>.</p> <p>CubeRoot(d As Double) As Double</p> <p>Returns the cube root of <code>d</code>.</p> <p>If the argument is <code>NaN</code>, then the result Is <code>NaN</code>. If the argument is infinite, Then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument. For positive finite <code>x</code>, <code>Cbrt(-x) = -cbrt(x)</code> That is, the cube root of a negative value is the negative of the cube root of that value's magnitude.</p> <p>DoubleToBits(d As Double) As Int64</p> <p>Returns a representation of <code>d</code> according to the IEEE 754 floating-point \"double format\" bit layout.</p> <p>Bit 63 (the bit that is selected by the mask <code>0x8000000000000000</code>) represents the sign of the double number. Bits 62-52 (the bits that are selected by the mask <code>0x7ff0000000000000</code>) represent the exponent. Bits 51-0 (the bits that are selected by the mask <code>0x000fffffffffffff</code>) represent the significand (sometimes called the mantissa) of the floating-point number.</p> <p>If the argument is positive infinity, the result is <code>&amp;h7ff0000000000000</code>. If the argument is negative infinity, the result is <code>&amp;hfff0000000000000</code>. If the argument is <code>NaN</code>, the result is <code>&amp;h7ff8000000000000</code>.</p> <p>In all cases, the result is an <code>Int64</code> integer that, when given to the <code>BitsToDouble(UInt64)</code> method, will produce a <code>Double</code> the same as the</p> <p>DoubleToRawBits(d As Double) As Int64</p> <p>Returns a representation of <code>d</code> according to the IEEE 754 floating-point \"double format\" bit layout, preserving <code>NaN</code> values.</p> <p>Bit 63 (the bit that is selected by the mask <code>&amp;h8000000000000000</code>) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask <code>&amp;h7ff0000000000000</code>) represent the exponent. Bits 51-0 (the bits that are selected by the mask <code>&amp;h000fffffffffffff</code>) represent the significand (sometimes called the mantissa) of the floating-point number.</p> <p>If the argument is positive infinity, the result is <code>&amp;h7ff0000000000000</code>. If the argument is negative infinity, the result is <code>&amp;hfff0000000000000</code>. If the argument is <code>NaN</code>, the result is the <code>Int64</code> integer representing the actual <code>NaN</code> value. Unlike the <code>DoubleToBits</code> method, this method does not collapse all the bit patterns encoding a NaN to a single \"canonical\" <code>NaN</code> value.</p> <p>In all cases, the result is a <code>UInt64</code> integer that, when given to the <code>BitsToDouble(Int64)</code> method, will produce a floating-point value the same as <code>d</code>.</p> <p>GetExponent(d As Double) As Int32</p> <p>Returns the unbiased exponent used in the representation of <code>d</code>.</p> <ul> <li>If the argument is NaN or infinite, then the result is <code>MAX_EXPONENT</code> + 1. </li> <li>If the argument is zero or subnormal, then the result is <code>MIN_EXPONENT</code> - 1. </li> </ul> <p>HalfPlaneSign(p1 As Point, p2 As Point, p3 As Point) As Double</p> <p>Part of the <code>PointInTriangle</code> algorithm.</p> <p>See here.</p> <p>Hypotenuse(x As Double, y As Double) As Double</p> <p>Returns the hypotenuse (sqrt(x2 +y2)) without intermediate overflow or underflow.</p> <p>Adapted from: here.</p> <p>Special cases:</p> <ol> <li>If either argument is infinite, then the result is positive infinity. </li> <li>If either argument is NaN and neither argument is infinite, then the result is <code>NaN</code>. </li> </ol> <p>The computed result must be within 1 ulp of the exact result. If one parameter is held constant, the results must be semi-monotonic in the other parameter.</p> <p>IsCloseTo(d1 As Double, d2 As Double, decimalPoints As Integer) As Boolean</p> <p>Returns True if the arguments are \"close enough\" to be considered equal.</p> <p>Thanks to Graham Busch.</p> <p><code>decimalPoints</code> is the number of decimal points of accuracy.</p> <p>IsEven(i As Integer) As Boolean</p> <p>Returns True if <code>i</code> is even.</p> <p>IsInteger(d As Double) As Boolean</p> <p>Returns True if <code>d</code> is a whole number.</p> <p>IsOdd(i As Integer) As Boolean</p> <p>Returns True if <code>i</code> is odd.</p> <p>IsZero(d As Double) As Boolean</p> <p>Returns True if <code>d</code> is considered to be zero.</p> <p>Exists as a workaround to the buggy Xojo <code>Double.Equals</code> method.</p> <p>Returns True if <code>d</code> is within <code>Tolerance</code> of 0.0.</p> <p>Based on code by Graham Busch.</p> <p>Modified from the code in <code>IsCloseTo</code>.</p> <p>Lerp(a As Double, b As Double, f As Double) As Double</p> <p>Linearly interpolates between <code>a</code> and <code>b</code> by the fraction <code>f</code>.</p> <p>Assumes <code>f</code> is clamped between 0 and 1.</p> <p>LShift32(v As Int32, s As Integer) As Int32</p> <p>Shifts left the 32-bit bit pattern of <code>v</code> by <code>s</code> bits.</p> <p>Equivalent to Java's <code>int &lt;&lt; x</code> operator.</p> <p>LShift64(v As Int64, s As Integer) As Int64</p> <p>Shifts left the 64-bit bit pattern of <code>v</code> by <code>s</code> bits.</p> <p>Equivalent to Java's <code>int &lt;&lt; x</code> operator.</p> <p>Modulo(a As Integer, b As Integer) As Integer</p> <p>Returns the remainder of <code>a/b</code> yielding a result with the same sign as <code>b</code>.</p> <p>Credit here.</p> <p>Functions like Python's <code>%</code> operator.</p> <p>NextDown(d As Double) As Double</p> <p>Returns the floating-point value adjacent to <code>d</code> in the direction of negative infinity.</p> <p>If the argument is <code>NaN</code>, the result is <code>NaN</code>. If the argument is negative infinity, the result is negative infinity. If the argument is zero, the result is <code>-DOUBLE_MIN_VALUE</code>.</p> <p>NextUp(d As Double) As Double</p> <p>Returns the floating-point value adjacent to <code>d</code> in the direction of positive infinity.</p> <p>If the argument is <code>NaN</code>, the result is <code>NaN</code>. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is <code>DOUBLE_MIN_VALUE</code></p> <p>NumberOfLeadingZeros(i As Int64) As Int32</p> <p>Returns the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two's complement binary representation of <code>i</code>.</p> <p>Returns <code>64</code> if <code>i</code> has no one-bits in its two's complement representation, in other words if it is equal to zero. This method is closely related to the logarithm base 2.</p> <p>For all positive Int64 values x:</p> <pre><code>Floor(log\u2082(x)) = `63 - NumberOfLeadingZeros(x)`\nCeil(\u2082(x)) = `64 - NumberOfLeadingZeros(x - 1)`\n</code></pre> <p>NumberOfTrailingZeros(i As Int64) As Int32</p> <p>Returns the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two's complement binary representation of <code>i</code>.</p> <p>Returns <code>64</code> if <code>i</code> has no one-bits in its two's complement representation, in other words if it is equal to zero.</p> <p>PointInTriangle(p As Point, v1 As Point, v2 As Point, v3 As Point) As Boolean</p> <p>Returns True if <code>p</code> is inside the triangle formed by the passed vertices.</p> <p>Adapted from this StackOverflow answer.</p> <p>PowerOfTwoD(n As Int32) As Double</p> <p>Returns a floating-point power of two in the normal range.</p> <p>Random(low As Double, high As Double) As Double</p> <p>Returns a psuedo random number between <code>low</code> and <code>high</code>.</p> <p>RShift(v As Int64, s As Integer) As Int64</p> <p>Shifts <code>v</code> <code>s</code> places to the right, preserving the sign bit.</p> <p>Equivalent to Java's <code>&gt;&gt;</code> operator.</p> <p>Thanks to code from the Xojo forum by Rick Araujo.</p> <p>RShiftU32(v As Int32, s As Integer) As Int32</p> <p>Shifts <code>v</code> <code>s</code> bits to the right. Shifts a zero into the left-most position.</p> <p>Equivalent to Java's <code>int &gt;&gt;&gt; x</code> operation.</p> <p>RShiftU64(v As Int64, shift As Integer) As Int64</p> <p>Shifts <code>v</code> <code>s</code> bits to the right. Shifts a zero into the left-most position.</p> <p>Equivalent to Java's <code>long &gt;&gt;&gt; x</code> operation.</p> <p>Scalb(d As Double, scaleFactor As Integer) As Double</p> <p>Returns <code>d \u00d7 2^scaleFactor</code> rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set.</p> <p>If the exponent of the result is between <code>MIN_EXPONENT</code> and <code>MAX_EXPONENT</code>, the answer is calculated exactly. If the exponent of the result would be larger than <code>MAX_EXPONENT</code> then infinity is returned. If the result is subnormal, precision may be lost. That is, when <code>Scalb(x, n)</code> is subnormal, <code>Scalb(scalb(x, n), -n)</code> may not equal <code>x</code>. When the result is non-<code>NaN</code>, the result has the same sign as <code>d</code>.</p> <p>Special cases:</p> <ul> <li>If the first argument is <code>NaN</code>, <code>NaN</code> is returned. </li> <li>If the first argument is infinite, then an infinity of the same sign is returned. </li> <li>If the first argument is zero, then a zero of the same sign is returned. </li> </ul> <p>When scaling up, it does not matter what order the multiply-store operations are done, the result will be finite or overflow regardless of the operation ordering. However, to get the correct result when scaling down, a particular ordering must be used.</p> <p>When scaling down, the multiply-store operations are sequenced so that it is not possible for two consecutive multiply-stores to return subnormal results.  If one multiply-store result is subnormal, the next multiply will round it away to zero.  This is done by first multiplying by 2 ^ (scaleFactor % n) and then multiplying several times by by 2^n as needed where n is the exponent of number that is a covenient power of two.  In this way, at most one real rounding error occurs.  If the double value set is being used exclusively, the rounding will occur on a multiply.  If the double-extended-exponent value set is being used, the products will (perhaps) be exact but the stores to d are guaranteed to round to the double value set.</p> <p>It is not a valid implementation to first multiply <code>d</code> by <code>2^MIN_EXPONENT</code> and then by <code>2 ^ (scaleFactor % MIN_EXPONENT)</code> since eduble ounding on underflow could occur e.g. if the <code>scaleFactor</code> argument was <code>MIN_EXPONENT - n</code> and the exponent of <code>d</code> was a little less than <code>-(MIN_EXPONENT - n)</code>, meaning the final result would be subnormal.</p> <p>Since exact reproducibility of this method can be achieved without any undue performance burden, there is no compelling reason to allow double rounding on underflow in <code>scalb</code>.</p> <p>Signum(d As Double) As Double</p> <p>Returns the sign of <code>d</code>.</p> <p>Returns:</p> <ul> <li>Zero if the argument is zero </li> <li><code>1.0</code> if the argument is greater than zero </li> <li><code>-1.0</code> if the argument is less than zero. </li> <li>If the argument is NaN, then the result is NaN. </li> </ul> <p>ToBinaryString(currencyValue As Currency) As String</p> <p>Returns a binary string representation of a currency value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(doubleValue As Double) As String</p> <p>Returns a binary string representation of a double value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i16 As Int16) As String</p> <p>Returns a binary string representation of a signed 16-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i32 As Int32) As String</p> <p>Returns a binary string representation of a signed 32-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i64 As Int64) As String</p> <p>Returns a binary string representation of a signed 64-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i8 As Int8) As String</p> <p>Returns a binary string representation of a signed 8-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(singleValue As Single) As String</p> <p>Returns a binary string representation of a Xojo <code>Single</code> value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i16 As UInt16) As String</p> <p>Returns a binary string representation of an unsigned 16-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i32 As UInt32) As String</p> <p>Returns a binary string representation of an unsigned 32-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i64 As UInt64) As String</p> <p>Returns a binary string representation of an unsigned 64-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToBinaryString(i8 As UInt8) As String</p> <p>Returns a binary string representation of an unsigned 8-bit integer value.</p> <p>Credit to Norman Palardy.</p> <p>ToDegrees(radians As Double) As Double</p> <p>Returns <code>radians</code> in degrees.</p> <p>ToRadians(degrees As Double) As Double</p> <p>Returns <code>degrees</code> in radians.</p> <p>WrapInteger(i As Integer, maxValue As Integer) As Integer</p> <p>Wraps <code>i</code> between zero and <code>maxValue</code>.</p>"},{"location":"XUI/Required/XUIStrings/XUIStrings/","title":"XUIStrings","text":""},{"location":"XUI/Required/XUIStrings/XUIStrings/#description","title":"Description","text":"<p>A module containing many extensions methods and regular methods for manipulating strings.</p> <p>Includes comprehensive support for unicode characters such as emoji.</p>"},{"location":"XUI/Required/XUIStrings/XUIStrings/#properties","title":"Properties","text":"Name Type Read-Only CodePointCategoryDictionary <code>Dictionary</code> \u2714"},{"location":"XUI/Required/XUIStrings/XUIStrings/#methods","title":"Methods","text":"Name Parameters Returns CategoryForLatin1 codePoint As <code>Integer</code> <code>XUIStrings.UnicodeCategories</code> CharacterArray s As <code>String</code> <code>String()</code> CharacterCount s As <code>String</code> <code>Integer</code> CheckLetter uc As <code>XUIStrings.UnicodeCategories</code> <code>Boolean</code> CheckLetterOrDigit uc As <code>XUIStrings.UnicodeCategories</code> <code>Boolean</code> Chop s As <code>String</code>, numChars As <code>Integer</code> <code>String</code> Clone s() As <code>String</code> <code>String()</code> CompareCase s As <code>String</code>, other As <code>String</code> <code>Boolean</code> Contains s As <code>String</code>, what As <code>String</code>, caseSensitive As <code>Boolean</code> <code>Boolean</code> FromArray chars() As <code>String</code>, start As <code>Integer</code>, length As <code>Integer</code> <code>String</code> GetLatin1UnicodeCharacter character As <code>String</code> <code>XUIStrings.UnicodeCategories</code> GetUnicodeCategory s As <code>String</code> <code>XUIStrings.UnicodeCategories</code> InitialiseCodepointCategoryDictionary <code>Dictionary</code> IsASCII character As <code>String</code> <code>Boolean</code> IsASCIILetter letter As <code>String</code> <code>Boolean</code> IsASCIILetterOrDigit letter As <code>String</code> <code>Boolean</code> IsASCIILetterOrDigitOrHyphen letter As <code>String</code> <code>Boolean</code> IsASCIILetterOrDigitOrUnderscore letter As <code>String</code> <code>Boolean</code> IsASCIILetterOrUnderscore letter As <code>String</code> <code>Boolean</code> IsBinaryDigit s As <code>String</code> <code>Boolean</code> IsDigit s As <code>String</code> <code>Boolean</code> IsDigitOrUnderscore s As <code>String</code> <code>Boolean</code> IsExactly char As <code>String</code>, ParamArray characters() As <code>String</code> <code>Boolean</code> IsHexDigit s As <code>String</code> <code>Boolean</code> IsLatin1 character As <code>String</code> <code>Boolean</code> IsLetter s As <code>String</code> <code>Boolean</code> IsLetterDigitOrUnderscore s As <code>String</code> <code>Boolean</code> IsLetterOrDigit s As <code>String</code> <code>Boolean</code> IsLowercaseCharacter character As <code>String</code> <code>Boolean</code> IsOctalDigit s As <code>String</code> <code>Boolean</code> IsRGBA s As <code>String</code> <code>Boolean</code> IsSpaceOrTab character As <code>String</code> <code>Boolean</code> IsSpaceOrTabOrNewline character As <code>String</code> <code>Boolean</code> IsUppercaseASCIICharacter s As <code>String</code> <code>Boolean</code> IsUppercaseASCIILetter s As <code>String</code> <code>Boolean</code> IsWhiteSpace s As <code>String</code> <code>Boolean</code> JustifyLeft s As <code>String</code>, width As <code>Integer</code>, char As <code>String</code> <code>String</code> JustifyLeft s As <code>String</code>, width As <code>Integer</code>, char As <code>String</code> <code>String</code> JustifyRight s As <code>String</code>, width As <code>Integer</code>, char As <code>String</code> <code>String</code> JustifyRight s As <code>String</code>, width As <code>Integer</code>, char As <code>String</code> <code>String</code> LeftCharacters s As <code>String</code>, count As <code>Integer</code> <code>String</code> Longest s() As <code>String</code> <code>String</code> MiddleCharacters s As <code>String</code>, start As <code>Integer</code> <code>String</code> MiddleCharacters s As <code>String</code>, start As <code>Integer</code>, count As <code>Integer</code> <code>String</code> ReplaceInvisibleCharacters s As <code>String</code> <code>String</code> RightCharacters s As <code>String</code>, count As <code>Integer</code> <code>String</code>"},{"location":"XUI/Required/XUIStrings/XUIStrings/#constants","title":"Constants","text":"Name Type TAB <code>String</code> UNICODE_CODEPOINT_CATEGORY_PAIRS <code>String</code> <p>TAB As String The horiztonal tab character.</p> <p>UNICODE_CODEPOINT_CATEGORY_PAIRS As String Contains parsed data from the Unicode standard where each line represents a codepoint/category pairing.</p> <p>Each line is in the format: <code>codepoint:category</code> where <code>codepoint</code> is a hex value codepoint and <code>category</code> is a two character category.</p>"},{"location":"XUI/Required/XUIStrings/XUIStrings/#enumerations","title":"Enumerations","text":"<p>UnicodeCategories</p> <p>The different Unicode categories.</p> Name ClosePunctuation ConnectorPunctuation Control CurrencySymbol DashPunctuation DecimalDigitNumber EnclosingMark FinalQuotePunctuation Format InitialQuotePunctuation LetterNumber LineSeparator LowercaseLetter MathSymbol ModifierLetter ModifierSymbol NonSpacingMark OpenPunctuation OtherLetter OtherNotAssigned OtherNumber OtherPunctuation OtherSymbol ParagraphSeparator PrivateUse SpaceSeparator SpaceCombiningMark Surrogate TitlecaseLetter UppercaseLetter None"},{"location":"XUI/Required/XUIStrings/XUIStrings/#property-descriptions","title":"Property Descriptions","text":"<p>CodePointCategoryDictionary As Dictionary</p> <p>Maps a Unicode codepoint to its category. Key = Unicode codepoint, Value = Unicode category.</p>"},{"location":"XUI/Required/XUIStrings/XUIStrings/#method-descriptions","title":"Method Descriptions","text":"<p>CategoryForLatin1(codePoint As Integer) As XUIStrings.UnicodeCategories</p> <p>Returns the Unicode category for a latin1 character.</p> <p>Assumes that <code>codePoint</code> is within the range &amp;u0000 and &amp;u00FF.</p> <p>CharacterArray(s As String) As String()</p> <p>Returns the individual characters in <code>s</code> as an array.</p> <p>It's at least 4x faster to use <code>Text</code> to split into characters and then iterate over that array than to use the native <code>String.Characters()</code> method that returns an <code>Iterable</code>.</p> <p>CharacterCount(s As String) As Integer</p> <p>Returns the number of characters in the passed string (including multibyte characters).</p> <p>CheckLetter(uc As XUIStrings.UnicodeCategories) As Boolean</p> <p>Checks if <code>uc</code> belongs to the letter category.</p> <p>CheckLetterOrDigit(uc As XUIStrings.UnicodeCategories) As Boolean</p> <p>Checks if <code>uc</code> belongs to the letter or digit categories.</p> <p>Chop(s As String, numChars As Integer) As String</p> <p>Removes <code>numChars</code> characters from <code>s</code>.</p> <p>If <code>numChars</code> is greater than the length of <code>s</code>, \"\" is returned.</p> <p>Clone(s() As String) As String()</p> <p>Returns a copy of the passed string array.</p> <p>CompareCase(s As String, other As String) As Boolean</p> <p>Performs a case sensitive string comparison. Returns True if s = other.</p> <p>Contains(s As String, what As String, caseSensitive As Boolean) As Boolean</p> <p>True if <code>s</code> contains <code>what</code>.</p> <p>FromArray(chars() As String, start As Integer, length As Integer) As String</p> <p>Returns a string from <code>chars</code> beginning at index <code>start</code> for <code>length</code> characters. Assumes <code>chars</code> is an array of individual characters.</p> <p>If <code>start + length</code> &gt; the number of remaining characters then all characters from <code>start</code> to the end of <code>chars</code> are returned. If <code>length</code> = <code>-1</code> then all characters from <code>start</code> to the end of <code>chars</code> are returned.</p> <p>GetLatin1UnicodeCharacter(character As String) As XUIStrings.UnicodeCategories</p> <p>Returns the Unicode category for Unicode characters &lt;= &amp;h00ff.</p> <p>Assumes that <code>character</code> is one character long.</p> <p>GetUnicodeCategory(s As String) As XUIStrings.UnicodeCategories</p> <p>Returns the Unicode category that <code>s</code> belongs to.</p> <p>If <code>s</code> is empty or is more than one character in length then we return a special <code>None</code> category.</p> <p>InitialiseCodepointCategoryDictionary() As Dictionary</p> <p>Returns a dictionary mapping unicode codepoints to unicode categories.</p> <p><code>UNICODE_CODEPOINT_CATEGORY_PAIRS</code> contains parsed data from the Unicode standard where each line represents a codepoint/category pairing. Each line is in the format: <code>codepoint:category</code> where <code>codepoint</code> is a hex value codepoint and <code>category</code> is a two character category.</p> <p>IsASCII(character As String) As Boolean</p> <p>True if <code>character</code> is in the ASCII range.</p> <p>Assumes that <code>character</code> is one character in length.</p> <p>IsASCIILetter(letter As String) As Boolean</p> <p>Returns True if the <code>letter</code> is A-Z or a-z.</p> <p>IsASCIILetterOrDigit(letter As String) As Boolean</p> <p>Returns True if the <code>letter</code> is A-Z, a-z or 0-9</p> <p>IsASCIILetterOrDigitOrHyphen(letter As String) As Boolean</p> <p>Returns True if the <code>letter</code> is A-Z, a-z, 0-9 or \"-\"</p> <p>IsASCIILetterOrDigitOrUnderscore(letter As String) As Boolean</p> <p>Returns True if the <code>letter</code> is A-Z, a-z, 0-9 or the underscore.</p> <p>IsASCIILetterOrUnderscore(letter As String) As Boolean</p> <p>Returns True if the <code>letter</code> is A-Z, a-z or the underscore.</p> <p>IsBinaryDigit(s As String) As Boolean</p> <p>True if <code>s</code> is <code>0</code> or <code>1</code>.</p> <p>IsDigit(s As String) As Boolean</p> <p>True if <code>s</code> is a single digit in the range 0-9.</p> <p>We could use <code>GetUnicodeCategory</code> but a <code>Select...Case</code> is faster.</p> <p>IsDigitOrUnderscore(s As String) As Boolean</p> <p>True if <code>s</code> is a single digit in the range 0-9 or the underscore character (<code>_</code>).</p> <p>We could use <code>GetUnicodeCategory</code> but a <code>Select...Case</code> is faster.</p> <p>IsExactly(char As String, ParamArray characters() As String) As Boolean</p> <p>True if <code>char</code> exactly matches (case-sensitive) any of the passed <code>characters</code>.</p> <p>Assumes that <code>char</code> is a single character in length.</p> <p>IsHexDigit(s As String) As Boolean</p> <p>True if <code>s</code> is a valid hexadecimal digit (0-9, a-f, A-F).</p> <p>IsLatin1(character As String) As Boolean</p> <p>Returns True for if <code>character</code> is in the ASCII or Latin-1 supplement range.</p> <p>Assumes that <code>character</code> is one character in length.</p> <p>IsLetter(s As String) As Boolean</p> <p>True if <code>s</code> is a letter.</p> <p>Based on code from .NET core:</p> <p>IsLetterDigitOrUnderscore(s As String) As Boolean</p> <p>Determines whether <code>s</code> is a letter, a digit or an underscore.</p> <p>Based on code from .NET core:</p> <p>IsLetterOrDigit(s As String) As Boolean</p> <p>Determines whether <code>s</code> is a letter or a digit.</p> <p>Based on code from .NET core:</p> <p>IsLowercaseCharacter(character As String) As Boolean</p> <p>True if <code>character</code> is lowercase.</p> <p>Assumes that <code>character</code> is one character long.</p> <p>IsOctalDigit(s As String) As Boolean</p> <p>True if <code>s</code> is a valid octal digit (0-7).</p> <p>IsRGBA(s As String) As Boolean</p> <p>Returns True if <code>s</code> is a valid RGBA hex string.</p> <p>Valid formats are:</p> <p>IsSpaceOrTab(character As String) As Boolean</p> <p>True if <code>character</code> is a space or horizontal tab.</p> <p>IsSpaceOrTabOrNewline(character As String) As Boolean</p> <p>True if <code>character</code> is a space, horizontal tab or UNIX newline (&amp;u0A).</p> <p>IsUppercaseASCIICharacter(s As String) As Boolean</p> <p>True if <code>s</code> is an uppercase ASCII character.</p> <p>IsUppercaseASCIILetter(s As String) As Boolean</p> <p>True if <code>s</code> is an uppercase ASCII letter.</p> <p>IsWhiteSpace(s As String) As Boolean</p> <p>True if <code>s</code> is Unicode whitespace.</p> <p>Assumes <code>s</code> is a single character. <code>String.Asc</code> returns the codepoint for the first character in <code>s</code> so if this method is passed a string comprising more than one character, it'll break.</p> <pre><code>&amp;u0009 = &lt;control&gt; HORIZONTAL TAB\n&amp;u000a = &lt;control&gt; LINE FEED\n&amp;u000b = &lt;control&gt; VERTICAL TAB\n&amp;u000c = &lt;contorl&gt; FORM FEED\n&amp;u000d = &lt;control&gt; CARRIAGE RETURN\n&amp;u0085 = &lt;control&gt; NEXT LINE\n&amp;u00a0 = NO-BREAK SPACE\n</code></pre> <p>JustifyLeft(s As String, width As Integer, char As String) As String</p> <p>Left justifies <code>s</code> to <code>width</code> characters using <code>char</code> to pad the right edge if required.</p> <pre><code>\"Hello\".JustifyLeft(10) // Becomes \"Hello     \"\n</code></pre> <p>JustifyLeft(s As String, width As Integer, char As String) As String</p> <p>Left justifies <code>s</code> to <code>width</code> characters using <code>char</code> to pad the right edge if required.</p> <pre><code>\"Hello\".JustifyLeft(10) // Becomes \"Hello     \"\n</code></pre> <p>JustifyRight(s As String, width As Integer, char As String) As String</p> <p>Right justifies <code>s</code> to <code>width</code> characters using <code>char</code> to pad the left edge if required.</p> <pre><code>\"Hello\".JustifyRight(10) // Becomes \"     Hello\"\n</code></pre> <p>JustifyRight(s As String, width As Integer, char As String) As String</p> <p>Right justifies <code>s</code> to <code>width</code> characters using <code>char</code> to pad the left edge if required.</p> <pre><code>\"Hello\".JustifyRight(10) // Becomes \"     Hello\"\n</code></pre> <p>LeftCharacters(s As String, count As Integer) As String</p> <p>Returns <code>count</code> left-most characters from <code>s</code>.</p> <p>Longest(s() As String) As String</p> <p>Returns the longest string in <code>s</code>.</p> <p>MiddleCharacters(s As String, start As Integer) As String</p> <p>Returns all of the characters from <code>start</code> to the end of <code>s</code>. The start position is a zero-based.</p> <p>MiddleCharacters(s As String, start As Integer, count As Integer) As String</p> <p>Returns <code>count</code> characters from <code>s</code>. Handles multibyte characters like emoji.</p> <p>ReplaceInvisibleCharacters(s As String) As String</p> <p>Replaces certain invisible characters with a visible representation.</p> <p>RightCharacters(s As String, count As Integer) As String</p> <p>Returns <code>count</code> right-most characters from <code>s</code>.</p>"},{"location":"XUI/XUI%20Utilities/XUIPreferences/","title":"XUIPreferences","text":""},{"location":"XUI/XUI%20Utilities/XUIPreferences/#description","title":"Description","text":"<p>Used to save and load preferences to/from disk. Data is saved in TOML format. The lookup operator has been overridden to allow preferences to be looked up with the \"dot\" operator.</p>"},{"location":"XUI/XUI%20Utilities/XUIPreferences/#properties","title":"Properties","text":"Name Type Read-Only AutoSave <code>Boolean</code> mPreferences <code>Dictionary</code> mPreferencesFile <code>FolderItem</code>"},{"location":"XUI/XUI%20Utilities/XUIPreferences/#methods","title":"Methods","text":"Name Parameters Returns Constructor shouldAutoSave As <code>Boolean</code> Dump <code>String</code> Get name As <code>String</code> <code>Variant</code> HasKey key As <code>String</code> <code>Boolean</code> Load prefsFile As <code>FolderItem</code> Lookup name As <code>String</code>, default As <code>Variant</code> <code>Variant</code> Operator_Lookup name As <code>String</code> <code>Variant</code> Operator_Lookup name As <code>String</code>, Assigns value As <code>Variant</code> Save <code>Boolean</code> Set key As <code>String</code>, Assigns value As <code>Variant</code>"},{"location":"XUI/XUI%20Utilities/XUIPreferences/#property-descriptions","title":"Property Descriptions","text":"<p>AutoSave As Boolean</p> <p>If True then any changes made to the preferences will be automatically written to disk.</p> <p>mPreferences As Dictionary</p> <p>The backing dictionary storing the preferences.</p> <p>mPreferencesFile As FolderItem</p> <p>The file that the preferences will be written to (as TOML).</p>"},{"location":"XUI/XUI%20Utilities/XUIPreferences/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(shouldAutoSave As Boolean)</p> <p>Dump() As String</p> <p>Returns the preferences as TOML.</p> <p>Get(name As String) As Variant</p> <p>Returns the value of the preference named [name].</p> <p>Raises a KeyNotFoundException if there is no preference named [name]. Allows the look up of preferences using this syntax:</p> <pre><code> Var top As Integer = Preferences.Get(\"MainWindowTop\")\n</code></pre> <p>HasKey(key As String) As Boolean</p> <p>Returns True if there is a preference with name [key] or False if not.</p> <p>Load(prefsFile As FolderItem)</p> <p>Loads a TOML preferences file.</p> <p>Raises the following exceptions:</p> <ul> <li>NilObjectException if the passed preferences file is Nil. </li> <li>IOException if we can't create or read the preferences file. </li> <li>TKException if the passed preference file contains invalid TOML. </li> </ul> <p>If [prefsFile] doesn't exist then a new empty file is created.</p> <p>Lookup(name As String, default As Variant) As Variant</p> <p>Returns the value of the preference named [name] or returns the default value specified.</p> <p>[default] is the value to return if there is no preference with the specified name.</p> <p>Operator_Lookup(name As String) As Variant</p> <p>Allows the retrieval of a preference named [name] using the dot operator.</p> <p>Raises a KeyNotFoundException if there is no preference named [name].</p> <p>Allows the look up of a preference using this syntax:</p> <pre><code>Var top As Integer = Preferences.MainWindowTop\n</code></pre> <p>Operator_Lookup(name As String, Assigns value As Variant)</p> <p>Allows the setting of a preference's value using the assignment operator.</p> <p>[name] is the name of the preference whose value should be set. Will be created if required.</p> <p>Sets a preference using this syntax:</p> <pre><code>Preferences.MainWindowTop = 345\n</code></pre> <p>Save() As Boolean</p> <p>Saves the preferences to disk as TOML. Returns True if the save was successful or False if not.</p> <p>Set(key As String, Assigns value As Variant)</p> <p>Assigns [value] to the specified [key]. If the key does not exist it is created.</p> <p>Sets a preference using the syntax:</p> <pre><code>Preferences.Set(\"MainWindowTop\") = 345\n</code></pre> <p>If [AutoSave] is True then the preferences file on disk will also be updated immediately.</p>"},{"location":"XUI/XUI%20Utilities/XUIStopWatch/","title":"XUIStopWatch","text":""},{"location":"XUI/XUI%20Utilities/XUIStopWatch/#description","title":"Description","text":"<p>A class for measuring elapsed time.</p>"},{"location":"XUI/XUI%20Utilities/XUIStopWatch/#properties","title":"Properties","text":"Name Type Read-Only IsRunning <code>Boolean</code> \u2714 mEnd <code>DateTime</code> mIsRunning <code>Boolean</code> mStart <code>DateTime</code>"},{"location":"XUI/XUI%20Utilities/XUIStopWatch/#methods","title":"Methods","text":"Name Parameters Returns Constructor startImmediately As <code>Boolean</code> Elapsed <code>DateInterval</code> ElapsedAsString <code>String</code> ElapsedMilliseconds <code>Integer</code> ElapsedSeconds <code>Integer</code> ElapsedTicks <code>Integer</code> Reset Start Stop"},{"location":"XUI/XUI%20Utilities/XUIStopWatch/#constants","title":"Constants","text":"Name Type MS_IN_DAY <code>Double</code> MS_IN_HOUR <code>Double</code> MS_IN_MIN <code>Double</code> MS_IN_SEC <code>Double</code> MS_IN_WEEK <code>Double</code> NS_IN_MS <code>Double</code> NS_IN_TICK <code>Double</code> SECS_IN_DAY <code>Double</code> SECS_IN_HOUR <code>Double</code> TICKS_IN_DAY <code>Double</code> TICKS_IN_HOUR <code>Double</code> TICKS_IN_MIN <code>Double</code> TICKS_IN_SEC <code>Double</code> <p>MS_IN_DAY As Double The number of milliseconds in a day.</p> <p>MS_IN_HOUR As Double The number of milliseconds in an hour.</p> <p>MS_IN_MIN As Double The number of milliseconds in a minute.</p> <p>MS_IN_SEC As Double The number of milliseconds in a second.</p> <p>MS_IN_WEEK As Double The number of milliseconds in a week.</p> <p>NS_IN_MS As Double The number of nanoseconds in a millisecond.</p> <p>NS_IN_TICK As Double The number of nanoseconds in a tick.</p> <p>SECS_IN_DAY As Double The number of seconds in a day.</p> <p>SECS_IN_HOUR As Double The number of seconds in an hour.</p> <p>TICKS_IN_DAY As Double The number of ticks in a day.</p> <p>TICKS_IN_HOUR As Double The number of ticks in an hour.</p> <p>TICKS_IN_MIN As Double The number of ticks in a minute.</p> <p>TICKS_IN_SEC As Double The number of ticks in a second.</p>"},{"location":"XUI/XUI%20Utilities/XUIStopWatch/#property-descriptions","title":"Property Descriptions","text":"<p>IsRunning As Boolean</p> <p>True if the stopwatch is currently running.</p> <p>mEnd As DateTime</p> <p>The exact moment the stopwatch ended.</p> <p>mIsRunning As Boolean</p> <p>Backing field for the <code>IsRunning</code> computed property.</p> <p>mStart As DateTime</p> <p>The exact moment the stopwatch started running.</p>"},{"location":"XUI/XUI%20Utilities/XUIStopWatch/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(startImmediately As Boolean)</p> <p>If <code>startImmediately</code> is True then the stopwatch will start upon instantiation.</p> <p>Elapsed() As DateInterval</p> <p>A read-only DateInterval representing the total elapsed time measured by the current instance.</p> <p>ElapsedAsString() As String</p> <p>Returns a string representation of the elapsed interval.</p> <p>ElapsedMilliseconds() As Integer</p> <p>The total elapsed time measured by the current instance, in milliseconds.</p> <p>If the stopwatch has been running for &gt; 28 days then an <code>UnsupportedOperationException</code> is raised.</p> <p>ElapsedSeconds() As Integer</p> <p>The total elapsed time measured by the current instance, in seconds.</p> <p>If the stopwatch has been running for &gt; 28 days then an <code>UnsupportedOperationException</code> is raised.</p> <p>ElapsedTicks() As Integer</p> <p>The total elapsed time measured by the current instance, in ticks.</p> <p>If the stopwatch has been running for &gt; 28 days then an <code>UnsupportedOperationException</code> is raised.</p> <p>Reset()</p> <p>Resets all internal properties.</p> <p>Start()</p> <p>Begins timing.</p> <p>Stop()</p> <p>Stops timing.</p>"},{"location":"XUI/XUI%20Utilities/XUIStopWatch/#example","title":"Example","text":"<pre><code>Var watch As New StopWatch\nwatch.Start\n// Do something that you want to time...\nwatch.Stop\n\n// Easy access to watch properties:\nVar ms As Double = watch.ElapsedMilliseconds\nVar t As Double = watch.ElapsedTicks\nVar di As DateInterval = watch.Elapsed\n\n// StopWatch will even format the interval into a string:\nVar s As String = watch.ElapsedAsString // E.g \"4 minutes, 3 seconds, 89 ms\"\n\n// Query if the stopwatch is running:\nIf watch.IsRunning Then\n// Do something\nEnd If\n\n// You can call `ElapsedTicks`, etc whilst the stopwatch is running too.\n</code></pre>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKATXHeadingBlock/","title":"MKATXHeadingBlock","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKATXHeadingBlock/#description","title":"Description","text":"<p>Represents an ATX block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKATXHeadingBlock/#properties","title":"Properties","text":"Name Type Read-Only ClosingSequenceAbsoluteStart <code>Integer</code> ClosingSequenceCount <code>Integer</code> ClosingSequenceLocalStart <code>Integer</code> HasClosingSequence <code>Boolean</code> \u2714 Level <code>Integer</code> OpeningSequenceAbsoluteStart <code>Integer</code> OpeningSequenceLength <code>Integer</code> OpeningSequenceLocalStart <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKATXHeadingBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKATXHeadingBlock/#property-descriptions","title":"Property Descriptions","text":"<p>ClosingSequenceAbsoluteStart As Integer</p> <p>The 0-based index in the original source of the first character of the optional closing sequence of <code>#</code> characters or <code>-1</code> if there is no closing sequence.</p> <p>ClosingSequenceCount As Integer</p> <p>The number of <code>#</code> characters in the optional closing sequence. May be <code>0</code>.</p> <p>ClosingSequenceLocalStart As Integer</p> <p>The local 0-based index on the line of the first character of the optional closing sequence of <code>#</code> characters or <code>-1</code> if there is no closing sequence.</p> <p>HasClosingSequence As Boolean</p> <p>True if this ATX header had optional closing <code>#</code> characters.</p> <p>Level As Integer</p> <p>This ATX header's level.</p> <p>OpeningSequenceAbsoluteStart As Integer</p> <p>0-based absolute position in the original source that the ATX opening sequence starts at.</p> <p>OpeningSequenceLength As Integer</p> <p>The number of characters comprising the opening sequence (includes whitespace after the <code>#</code> characters).</p> <p>OpeningSequenceLocalStart As Integer</p> <p>0-based local position on the line that the ATX opening sequence starts at.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKATXHeadingBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractEmphasis/","title":"MKAbstractEmphasis","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractEmphasis/#description","title":"Description","text":"<p>The abstract base class for <code>MKEmphasis</code> and <code>MKStrongEmphasis</code> blocks.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractEmphasis/#properties","title":"Properties","text":"Name Type Read-Only ClosingDelimiterAbsoluteStart <code>Integer</code> ClosingDelimiterLineNumber <code>Integer</code> ClosingDelimiterLocalStart <code>Integer</code> Delimiter <code>String</code> DelimiterLength <code>Integer</code> OpeningDelimiterAbsoluteStart <code>Integer</code> OpeningDelimiterLineNumber <code>Integer</code> OpeningDelimiterLocalStart <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractEmphasis/#property-descriptions","title":"Property Descriptions","text":"<p>ClosingDelimiterAbsoluteStart As Integer</p> <p>0-based aboslute position of the first character of the closing delimiter in the original source.</p> <p>ClosingDelimiterLineNumber As Integer</p> <p>The line number that the closing delimiter occurs on.</p> <p>ClosingDelimiterLocalStart As Integer</p> <p>0-based local position of the first character of the closing delimiter.</p> <p>Delimiter As String</p> <p>The delimiter.</p> <p>DelimiterLength As Integer</p> <p>The length of the delimiter.</p> <p>OpeningDelimiterAbsoluteStart As Integer</p> <p>0-based aboslute position of the first character of the opening delimiter in the original source.</p> <p>OpeningDelimiterLineNumber As Integer</p> <p>The line number that the opening delimiter occurs on.</p> <p>OpeningDelimiterLocalStart As Integer</p> <p>0-based local position of the first character of the opening delimiter.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractList/","title":"MKAbstractList","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractList/#description","title":"Description","text":"<p>The abstract base class for <code>MKListBlock</code> and <code>MKListItemBlock</code>.  Exists as these two blocks have common properties.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractList/#properties","title":"Properties","text":"Name Type Read-Only ListData <code>MarkdownKit.MKListData</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKAbstractList/#property-descriptions","title":"Property Descriptions","text":"<p>ListData As MarkdownKit.MKListData</p> <p>List-specific data.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlock/","title":"MKBlock","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlock/#description","title":"Description","text":"<p>The base class for all Markdown document blocks.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlock/#properties","title":"Properties","text":"Name Type Read-Only Characters() <code>MarkdownKit.MKCharacter</code> Children() <code>MarkdownKit.MKBlock</code> Document <code>MarkdownKit.MKDocument</code> \u2714 EndPosition <code>Integer</code> FirstChild <code>MarkdownKit.MKBlock</code> \u2714 IsChildOfListItem <code>Boolean</code> IsChildOfTightList <code>Boolean</code> IsFirstChild <code>Boolean</code> \u2714 IsLastChild <code>Boolean</code> \u2714 IsLastLineBlank <code>Boolean</code> IsOpen <code>Boolean</code> LastChild <code>MarkdownKit.MKBlock</code> \u2714 LineNumber <code>Integer</code> mDocument <code>WeakRef</code> mParent <code>WeakRef</code> Parent <code>MarkdownKit.MKBlock</code> Start <code>Integer</code> Type <code>MarkdownKit.MKBlockTypes</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlock/#methods","title":"Methods","text":"Name Parameters Returns Accept visitor As <code>MKRenderer</code> <code>Variant</code> AddLine line As <code>XUITextLine</code>, startPos As <code>Integer</code>, phantomSpaces As <code>Integer</code> AdvanceToNextLineStart pos As <code>Integer</code> Constructor type As <code>MKBlockTypes</code>, parent As <code>MKBlock</code>, blockStart As <code>Integer</code> EndsWithBlankLine <code>Boolean</code> Finalise line As <code>XUITextLine</code> IsInlineContainer <code>Boolean</code> MatchWhitespaceCharactersInArray chars() As <code>MKCharacter</code>, pos As <code>Integer</code> <code>Integer</code> NextSibling <code>MKBlock</code> ParseLinkReferenceDefinitions PreviousSibling <code>MKBlock</code> RemoveChild child As <code>MKBlock</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlock/#property-descriptions","title":"Property Descriptions","text":"<p>Characters() As MarkdownKit.MKCharacter</p> <p>The characters of this block. Only valid for inline containers (other block types use MKTextBlocks).</p> <p>Children() As MarkdownKit.MKBlock</p> <p>This block's children.</p> <p>Document As MarkdownKit.MKDocument</p> <p>The document that owns this block.</p> <p>EndPosition As Integer</p> <p>0-based position in the original source of the end of this block. Only valid for inline blocks and inline container blocks.</p> <p>FirstChild As MarkdownKit.MKBlock</p> <p>The first child of this block or Nil if there are no children.</p> <p>IsChildOfListItem As Boolean</p> <p>True if this block is a child of a list item.</p> <p>IsChildOfTightList As Boolean</p> <p>True if this block is a child of a tight list.</p> <p>IsFirstChild As Boolean</p> <p>True if this block is the first child of its parent.</p> <p>IsLastChild As Boolean</p> <p>True if this block is the last child of its parent.</p> <p>IsLastLineBlank As Boolean</p> <p>True if the last line of this container is blank.</p> <p>IsOpen As Boolean</p> <p>True if this block is open.</p> <p>LastChild As MarkdownKit.MKBlock</p> <p>The last child of this block or Nil if this block has no children.</p> <p>LineNumber As Integer</p> <p>The 1-based line number in the Markdown down that this block occurs on.</p> <p>mDocument As WeakRef</p> <p>A weak reference to the document that owns this block.</p> <p>mParent As WeakRef</p> <p>A weak reference to this block's parent. Will be Nil if this is a document block.</p> <p>Parent As MarkdownKit.MKBlock</p> <p>This block's parent or Nil if it unowned or is a document block.</p> <p>Start As Integer</p> <p>The 0-based position in the original Markdown source that this block begins at.</p> <p>Type As MarkdownKit.MKBlockTypes</p> <p>The type of block.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Accept(visitor As MKRenderer) As Variant</p> <p>Accepts an AST renderer and redirects to the correct method.</p> <p>AddLine(line As XUITextLine, startPos As Integer, phantomSpaces As Integer)</p> <p>Adds text from <code>line</code> beginning at <code>startPos</code> to the end of the line.</p> <p>AdvanceToNextLineStart(pos As Integer)</p> <p>Starting at <code>pos</code>, advances through <code>Characters</code> to the start of the next line. If this is the last line then <code>pos</code> is set to <code>Characters.LastIndex + 1</code>.</p> <p>Constructor(type As MKBlockTypes, parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>type</code> is this block's type. </li> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul> <p>EndsWithBlankLine() As Boolean</p> <p>Returns True if this block ends with a blank line, descending if needed into lists and sublists.</p> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p> <p>Subclasses can override this method if they have more complicated needs upon block closure. <code>line</code> is the line that triggered the <code>Finalise</code> invocation.</p> <p>IsInlineContainer() As Boolean</p> <p>True if this block can contain inline blocks.</p> <p>MatchWhitespaceCharactersInArray(chars() As MKCharacter, pos As Integer) As Integer</p> <p>Matches whitespace in <code>chars</code> beginning at <code>pos</code> and returns how many characters were matched.</p> <p>NextSibling() As MKBlock</p> <p>Returns this block's next sibling or Nil if there isn't one.</p> <p>ParseLinkReferenceDefinitions()</p> <p>Parses any link reference definitions in this block, excises them, adds them to the document and adjust's this block's characters.</p> <p>Assumes that this method is called during block parsing. Assumes this is only ever called by paragraph and STX blocks. At this point in the paragraph's life cycle, it consists of contiguous characters. That is: Characters(n + 1).Position = Characters(n).Position + 1`.</p> <p>A link reference definition consists of a \"link label\", preceded by up to 3 spaces of indentation, followed by a colon (<code>:</code>), optional spaces or tabs (including up to one line ending), a \"link destination\", optional spaces or tabs (including up to one line ending) and an optional \"link title\" which, if present, must be separated from the \"link destination\" by spaces or tabs. No further character may occur.</p> <p>A \"link label\" begins with a left bracket (<code>[</code>) and ends with the first right bracket (<code>]</code>) that is not backslash-escaped. Between these brackets there must be at least one character that is not a space, tab, or line ending. Unescaped square bracket characters are not allowed inside the opening and closing square brackets of link labels. A link label can have at most 999 characters inside the square brackets.</p> <p>A \"link destination\" consists of either:</p> <ol> <li> <p>= 0 characters between an opening <code>&lt;</code> and a closing <code>&gt;</code> that contains no line endings or unescaped <code>&lt;</code> or <code>&gt;</code> characters, or</p> </li> <li> <p>0 characters that does not start with <code>&lt;</code>, does not include ASCII control characters or space character, and includes parentheses only if: (a) they are backslash-escaped (b) they are part of a balanced pair of unescaped parentheses. At least 3 levels must be supported.</p> </li> </ol> <p>A \"link title\" consists of either:</p> <ol> <li> <p>= 0 characters between <code>\"</code> characters, including a <code>\"</code> character only if it is backslash-escaped.</p> </li> <li> <p>= 0 characters between <code>'</code> characters, including a <code>'</code> character only if it is backslash-escaped</p> </li> <li> <p>= 0 characters between matching parentheses, including a <code>(</code> or <code>)</code> only if it's backslash-escaped.</p> </li> </ol> <p>PreviousSibling() As MKBlock</p> <p>Returns this block's next sibling or Nil if there isn't one.</p> <p>RemoveChild(child As MKBlock)</p> <p>If <code>child</code> is a top-level child of this block it is removed.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlockQuote/","title":"MKBlockQuote","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlockQuote/#description","title":"Description","text":"<p>Represents a blockquote block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlockQuote/#properties","title":"Properties","text":"Name Type Read-Only AbsoluteOpenerStart <code>Integer</code> LocalOpenerStart <code>Integer</code> OpeningDelimiters() <code>MKCharacter</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlockQuote/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlockQuote/#property-descriptions","title":"Property Descriptions","text":"<p>AbsoluteOpenerStart As Integer</p> <p>0-based offset in the original source that the <code>&gt;</code> character appears.</p> <p>LocalOpenerStart As Integer</p> <p>0-based local offset on the line that the <code>&gt;</code> character appears.</p> <p>OpeningDelimiters() As MKCharacter</p> <p>All opening delimiters (<code>&gt;</code>) for this block quote in appearance order.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKBlockQuote/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCharacter/","title":"MKCharacter","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCharacter/#description","title":"Description","text":"<p>Stores an individual character and its absolute 0-based position in the original Markdown source.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCharacter/#properties","title":"Properties","text":"Name Type Read-Only AbsolutePosition <code>Integer</code> \u2714 IsLineEnding <code>Boolean</code> \u2714 Line <code>XUITextLine</code> LocalPosition <code>Integer</code> Value <code>String</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCharacter/#methods","title":"Methods","text":"Name Parameters Returns Constructor value As <code>String</code>, line As <code>XUITextLine</code>, localPosition As <code>Integer</code> CreateLineEnding line As <code>XUITextLine</code> <code>MKCharacter</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCharacter/#property-descriptions","title":"Property Descriptions","text":"<p>AbsolutePosition As Integer</p> <p>The 0-based position of this character in the original source. Set to <code>-1</code> if this is a special line ending character.</p> <p>IsLineEnding As Boolean</p> <p>True if this is a special line ending character (position will be set to <code>-1</code>).</p> <p>Line As XUITextLine</p> <p>The text line this character is on.</p> <p>LocalPosition As Integer</p> <p>The 0-based local position of this character on its line.</p> <p>Value As String</p> <p>The character.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCharacter/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(value As String, line As XUITextLine, localPosition As Integer)</p> <p>Default constructor.</p> <ul> <li><code>value</code> is the character. </li> <li><code>line</code> is the line the character is on. </li> <li><code>localPosition</code> is the 0-based position of the character on the line. </li> </ul> <p>CreateLineEnding(line As XUITextLine) As MKCharacter This method is shared.</p> <p>Returns a special line ending character.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCodeSpan/","title":"MKCodeSpan","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCodeSpan/#description","title":"Description","text":"<p>Represents a codespan within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCodeSpan/#properties","title":"Properties","text":"Name Type Read-Only BacktickStringLength <code>Integer</code> FirstClosingBacktickChar <code>MarkdownKit.MKCharacter</code> LocalStart <code>Integer</code> OpeningBacktickChar <code>MarkdownKit.MKCharacter</code> ParentClosingBacktickStringStart <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCodeSpan/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStartPos As <code>Integer</code>, localStartPos As <code>Integer</code>, lineNumber As <code>Integer</code>, backtickStringLength As <code>Integer</code>, parentClosingBacktickStringStart As <code>Integer</code>, openingBacktickChar As <code>MarkdownKit.MKCharacter</code>, firstClosingBacktickChar As <code>MarkdownKit.MKCharacter</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCodeSpan/#property-descriptions","title":"Property Descriptions","text":"<p>BacktickStringLength As Integer</p> <p>The length of the flanking backtick delimiters around this code span.</p> <p>FirstClosingBacktickChar As MarkdownKit.MKCharacter</p> <p>The (first) closing backtick character.</p> <p>LocalStart As Integer</p> <p>0-based index in <code>Parent.Characters</code> that the opening backtick character of this code span begins.</p> <p>OpeningBacktickChar As MarkdownKit.MKCharacter</p> <p>The opening backtick character.</p> <p>ParentClosingBacktickStringStart As Integer</p> <p>0-based index in this code span's parent paragraph's <code>Characters</code> array of the first character of the closing backtick string.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKCodeSpan/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStartPos As Integer, localStartPos As Integer, lineNumber As Integer, backtickStringLength As Integer, parentClosingBacktickStringStart As Integer, openingBacktickChar As MarkdownKit.MKCharacter, firstClosingBacktickChar As MarkdownKit.MKCharacter)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is this block's parent. </li> <li><code>absoluteStartPos</code> is the 0-based position in the original source code that this block begins at. </li> <li><code>localStartPos</code> is the 0-based index in <code>parent.Characters</code> that the opening backtick character of this code span begins. </li> <li><code>lineNumber</code> is the 1-based line number of the line this block occurs on. </li> <li><code>backtickStringLength</code> is the length of the flanking backtick delimiters around this code span. </li> <li><code>parentClosingBacktickStringLength</code> is the 0-based index in this code span's parent paragraph's <code>Characters</code> array of the first character of the closing backtick string. </li> <li>openingBacktickChar` is the opening backtick character. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDelimiterStackNode/","title":"MKDelimiterStackNode","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDelimiterStackNode/#description","title":"Description","text":"<p>An internal class used during inline parsing to track emphasis delimiters.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDelimiterStackNode/#properties","title":"Properties","text":"Name Type Read-Only Active <code>Boolean</code> CanClose <code>Boolean</code> CanOpen <code>Boolean</code> CanOpenLinkOrImage <code>Boolean</code> \u2714 Delimiter <code>String</code> Ignore <code>Boolean</code> mTextNodeRef <code>WeakRef</code> OriginalLength <code>Integer</code> PoppedCharacters <code>Integer</code> TextNode <code>MKInlineText</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDelimiterStackNode/#methods","title":"Methods","text":"Name Parameters Returns Constructor textNode As <code>MKInlineText</code>, delimiter As <code>String</code> CurrentLength <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDelimiterStackNode/#property-descriptions","title":"Property Descriptions","text":"<p>Active As Boolean</p> <p>True if this node is currently active.</p> <p>CanClose As Boolean</p> <p>True if this node can close an emphasis run.</p> <p>CanOpen As Boolean</p> <p>True if this node can open an emphasis run.</p> <p>CanOpenLinkOrImage As Boolean</p> <p>True if this delimiter can open an inline link or image.</p> <p>Delimiter As String</p> <p>The delimiter character used by this node.</p> <p>Ignore As Boolean</p> <p>Internal use. Set to True when this node is to be ignored during processing.</p> <p>mTextNodeRef As WeakRef</p> <p>A wesk reference to this delimiter node's inline text node.</p> <p>OriginalLength As Integer</p> <p>The original length of the delimiter.</p> <p>PoppedCharacters As Integer</p> <p>The number of characters popped during processing. Used to offset the closing delimiter local start.</p> <p>TextNode As MKInlineText</p> <p>A weak reference to this delimiter's inline text node.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDelimiterStackNode/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(textNode As MKInlineText, delimiter As String)</p> <p>Default constructor.</p> <ul> <li><code>textNode</code> is the text block containing the delimiter. </li> <li><code>delimiter</code> is the delimiter character. </li> </ul> <p>CurrentLength() As Integer</p> <p>The current length of this node's text node.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDocument/","title":"MKDocument","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDocument/#description","title":"Description","text":"<p>Represents a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDocument/#properties","title":"Properties","text":"Name Type Read-Only Document <code>MKDocument</code> References <code>Dictionary</code> TestNumber <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDocument/#methods","title":"Methods","text":"Name Parameters Returns Constructor"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDocument/#property-descriptions","title":"Property Descriptions","text":"<p>Document As MKDocument</p> <p>The document that owns this block.</p> <p>References As Dictionary</p> <p>This document's link reference definitions. Key = link label, Value = MKReferenceLinkDefinition.</p> <p>TestNumber As Integer</p> <p>For debugging only.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKDocument/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Default constructor.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKEdgeCase/","title":"MKEdgeCase","text":"<p>Inherits <code>RuntimeException</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKEdgeCase/#description","title":"Description","text":"<p>A <code>RuntimeException</code> subclass used internally by the Markdown parser.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKEmphasis/","title":"MKEmphasis","text":"<p>Inherits <code>MKAbstractEmphasis</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKEmphasis/#description","title":"Description","text":"<p>Represents emphasis within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKEmphasis/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStart As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKEmphasis/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is this block's parent block. </li> <li><code>absoluteStart</code> is the 0-based position in the original source code of the start of this block. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKException/","title":"MKException","text":"<p>Inherits <code>RuntimeException</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKException/#description","title":"Description","text":"<p>A <code>RuntimeException</code> subclass used for Markdown parsing exceptions.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKFencedCodeBlock/","title":"MKFencedCodeBlock","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKFencedCodeBlock/#description","title":"Description","text":"<p>Represents a fenced code block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKFencedCodeBlock/#properties","title":"Properties","text":"Name Type Read-Only ClosingFenceLineNumber <code>Integer</code> ClosingFenceLocalStart <code>Integer</code> ClosingFenceStart <code>Integer</code> FenceChar <code>String</code> FenceLength <code>Integer</code> FenceOffset <code>Integer</code> HasInfoString <code>Boolean</code> \u2714 InfoString <code>String</code> InfoStringLength <code>Integer</code> InfoStringLocalStart <code>Integer</code> InfoStringStart <code>Integer</code> OpeningFenceLocalStart <code>Integer</code> ShouldClose <code>Boolean</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKFencedCodeBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStartOffset As <code>Integer</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKFencedCodeBlock/#property-descriptions","title":"Property Descriptions","text":"<p>ClosingFenceLineNumber As Integer</p> <p>The number of the line that the closing fence is on. <code>-1</code> if there isn't one.</p> <p>ClosingFenceLocalStart As Integer</p> <p>The 0-based local position on the line that the closing fence character starts at.</p> <p>ClosingFenceStart As Integer</p> <p>0-based position in the source of the start of this fenced code block's closing fence.</p> <p>FenceChar As String</p> <p>The fence character.</p> <p>FenceLength As Integer</p> <p>The number of fence characters making up the opening fence.</p> <p>FenceOffset As Integer</p> <p>The 0-based offset of the start of the fence marker.</p> <p>HasInfoString As Boolean</p> <p>True if this fenced code block has an info string.</p> <p>InfoString As String</p> <p>The (optional) info string.</p> <p>InfoStringLength As Integer</p> <p>The length of the info string.</p> <p>InfoStringLocalStart As Integer</p> <p>The 0-based local start position on the line of the start of the info string (or <code>-1</code> if there isn't one).</p> <p>InfoStringStart As Integer</p> <p>The 0-based absolute start position in the original source of the start of the info string (or <code>-1</code> if there isn't one).</p> <p>OpeningFenceLocalStart As Integer</p> <p>The 0-based local position on the line that the opening fence character starts at.</p> <p>ShouldClose As Boolean</p> <p>Set to True in <code>ProcessRemainderOfLine</code> if this fenced code block needs closing.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKFencedCodeBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStartOffset As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStartOffset</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlock/","title":"MKHTMLBlock","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlock/#description","title":"Description","text":"<p>Represents an HTML block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlock/#properties","title":"Properties","text":"Name Type Read-Only HTMLBlockType <code>MKHTMLBlockTypes</code> IsType6Or7 <code>Boolean</code> \u2714"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlock/#property-descriptions","title":"Property Descriptions","text":"<p>HTMLBlockType As MKHTMLBlockTypes</p> <p>The type of HTML block this is.</p> <p>IsType6Or7 As Boolean</p> <p>True if this HTML block is type 6 or 7.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlockScanner/","title":"MKHTMLBlockScanner","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlockScanner/#description","title":"Description","text":"<p>An internal class used during parsing to scan HTML blocks.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlockScanner/#methods","title":"Methods","text":"Name Parameters Returns Constructor FindClosingTag line As <code>XUITextLine</code>, pos As <code>integer</code>, tagName As <code>String</code> <code>Integer</code> FindOpenTag line As <code>XUITextLine</code>, pos As <code>Integer</code>, tagName As <code>String</code>, type7Only As <code>Boolean</code> <code>Integer</code> GetHtmlTagName chars() As <code>String</code>, pos As <code>Integer</code> <code>String</code> IsHtmlBlockType1End line As <code>XUITextLine</code>, pos As <code>Integer</code> <code>Boolean</code> IsHtmlBlockType2End line As <code>XUITextLine</code>, pos As <code>Integer</code> <code>Boolean</code> IsHtmlBlockType3End line As <code>XUITextLine</code>, pos As <code>Integer</code> <code>Boolean</code> IsHtmlBlockType4End line As <code>XUITextLine</code>, pos As <code>Integer</code> <code>Boolean</code> IsHtmlBlockType5End line As <code>XUITextLine</code>, pos As <code>Integer</code> <code>Boolean</code> MatchAnythingExcept line As <code>XUITextLine</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, invalidChar As <code>String</code> <code>Boolean</code> MatchAnythingExceptInvalidAndWhitespace line As <code>XUITextLine</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, ParamArray invalidChars() As <code>String</code> <code>Boolean</code> MatchASCIILetterOrDigit line As <code>XUITextLine</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, ParamArray validChars() As <code>String</code> <code>Boolean</code> MatchASCIILetterOrValidCharacter line As <code>XUITextLine</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, ParamArray validChars() As <code>String</code> <code>Boolean</code> SkipWhitespace chars() As <code>String</code>, pos As <code>Integer</code>, currentChar As <code>String</code> <code>Boolean</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLBlockScanner/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Private to prevent instantiation.</p> <p>FindClosingTag(line As XUITextLine, pos As integer, tagName As String) As Integer This method is shared.</p> <p>Finds the 0-based index in <code>line</code> of a valid HTML closingTag beginning at <code>pos</code>. Returns <code>0</code> if no valid closingTag is found.</p> <p>Assumes that <code>pos</code> points to the character immediately following <code>&lt;/</code></p> <pre><code>closingTag: &lt;/, tagName, optional whitespace, &gt;\ntagName: ASCII letter, &gt;= 0 ASCII letter|digit|-\n</code></pre> <p>Also sets the ByRef <code>tagName</code> parameter to the detected tagName (if present) or \"\" if no valid tagName is found.</p> <p>FindOpenTag(line As XUITextLine, pos As Integer, tagName As String, type7Only As Boolean) As Integer This method is shared.</p> <p>Returns the 0-based index in <code>line</code> of the end of a valid HTML opening tag, beginning at <code>pos</code> or <code>0</code> if not found. <code>tagName</code> is set to the tag found or \"\".</p> <p>Assumes that <code>pos</code> points to the character immediately following <code>&lt;</code> Sets the ByRef parameter <code>tagName</code> to the detected tag name (if present) or \"\" if none is found.</p> <pre><code>openTag: `&lt;`, a tagname, &gt;= 0 attributes, optional whitespace, optional `/`, and a `&gt;`.\ntagName: ASCII letter, &gt;= 0 ASCII letter|digit|-\nattribute: whitespace, attributeName, optional attributeValueSpec\nattributeName: ASCII letter|-|:, &gt;=0 ASCII letter|digit|_|.|:|-\nattributeValueSpec: optional whitespace, =, optional whitespace, attributeValue\nattributeValue: unQuotedAttValue | singleQuotedAttValue | doubleQuotedAttValue\nunQuotedAttValue: &gt; 0 characters NOT including whitespace, \", ', =, &lt;, &gt;, or `.\nsingleQuotedAttValue: ', &gt;= 0 characters NOT including ', then a final '\ndoubleQuotedAttValue: \", &gt;= 0 characters NOT including \", then a final \"\n</code></pre> <p>GetHtmlTagName(chars() As String, pos As Integer) As String This method is shared.</p> <p>Starting at <code>pos</code>, reads a HTML tag name from <code>chars</code> and returns it. Adjusts <code>pos</code> to point to the character immediately after the tag name. May return \"\".</p> <p>Note: <code>pos</code> is passed ByRef. tagName: ASCII letter, &gt;= 0 ASCII letter|digit|- Returns \"\" If no valid tagName is found.</p> <p>IsHtmlBlockType1End(line As XUITextLine, pos As Integer) As Boolean This method is shared.</p> <p>Returns True if, starting at <code>pos</code>, we find a valid HTML type 1 block end on <code>line</code>.</p> <p>End condition:   line contains an end tag , , or  (case-insensitive; it need not match the start tag).</p> <p>IsHtmlBlockType2End(line As XUITextLine, pos As Integer) As Boolean This method is shared.</p> <p>Returns True if, starting at <code>pos</code>, <code>line</code> contains a valid HTML type 2 block end.</p> <p>End condition: line contains the string \"--&gt;\"</p> <p>IsHtmlBlockType3End(line As XUITextLine, pos As Integer) As Boolean This method is shared.</p> <p>True if, starting at <code>pos</code>, <code>line</code> contains a valid HTML type 3 block end.</p> <p>End condition: line contains the string \"?&gt;\"</p> <p>IsHtmlBlockType4End(line As XUITextLine, pos As Integer) As Boolean This method is shared.</p> <p>True if, starting at <code>pos</code>, <code>line</code> contains a valid HTML type 4 block end.</p> <p>End condition: line contains the character \"&gt;\".</p> <p>IsHtmlBlockType5End(line As XUITextLine, pos As Integer) As Boolean This method is shared.</p> <p>True if, starting at <code>pos</code>, <code>line</code> contains a valid HTML type 5 block end.</p> <p>End condition: line contains the string \"]]&gt;\".</p> <p>MatchAnythingExcept(line As XUITextLine, pos As Integer, currentChar As String, invalidChar As String) As Boolean This method is shared.</p> <p>Advances past the characters in <code>line</code> starting at <code>pos</code> until <code>invalidChar</code>. Returns True if we advanced. <code>pos</code> and <code>currentChar</code> are mutated.</p> <p>MatchAnythingExceptInvalidAndWhitespace(line As XUITextLine, pos As Integer, currentChar As String, ParamArray invalidChars() As String) As Boolean This method is shared.</p> <p>Advances past the characters in <code>line</code> starting at <code>pos</code> until whitespace or an invalid character is found. Returns True if we advanced. <code>pos</code> and <code>currentChar</code> are mutated.</p> <p>MatchASCIILetterOrDigit(line As XUITextLine, pos As Integer, currentChar As String, ParamArray validChars() As String) As Boolean This method is shared.</p> <p>Advances along <code>line</code> starting at <code>pos</code> as long as the character is an ASCII letter, digit or <code>validChars</code>. Mutates <code>pos</code> and <code>currentChar</code>. True if <code>pos</code> changed.</p> <p>MatchASCIILetterOrValidCharacter(line As XUITextLine, pos As Integer, currentChar As String, ParamArray validChars() As String) As Boolean This method is shared.</p> <p>Advances along <code>line</code> starting at <code>pos</code> as long as the character is an ASCII letter or <code>validChars</code>. Mutates <code>pos</code> and <code>currentChar</code>. True if <code>pos</code> changed.</p> <p>SkipWhitespace(chars() As String, pos As Integer, currentChar As String) As Boolean This method is shared.</p> <p>Skips over whitespace in <code>chars</code> beginning at <code>pos</code> updating <code>pos</code> and <code>currentChar</code>. Returns True if any whitespace was skipped.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLRenderer/","title":"MKHTMLRenderer","text":"<p>Implements <code>MKRenderer</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLRenderer/#description","title":"Description","text":"<p>A class for rendering a MArkdown abstract syntax tree into HTML.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLRenderer/#properties","title":"Properties","text":"Name Type Read-Only mOutput() <code>String</code> ShouldTrimLeadingWhitespace <code>Boolean</code> ShouldTrimTrailingWhitespace <code>Boolean</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLRenderer/#methods","title":"Methods","text":"Name Parameters Returns EncodePredefinedEntities s As <code>String</code> <code>String</code> SpacesString count As <code>Integer</code> <code>String</code> URLEncode s As <code>String</code> <code>String</code> VisitATXHeading atx As <code>MKATXHeadingBlock</code> <code>Variant</code> VisitBlock b As <code>MKBlock</code> <code>Variant</code> VisitBlockQuote bq As <code>MKBlockQuote</code> <code>Variant</code> VisitCodeSpan cs As <code>MKCodeSpan</code> <code>Variant</code> VisitDocument doc As <code>MKDocument</code> <code>Variant</code> VisitEmphasis e As <code>MKEmphasis</code> <code>Variant</code> VisitFencedCode fc As <code>MKFencedCodeBlock</code> <code>Variant</code> VisitHTMLBlock html As <code>MKHTMLBlock</code> <code>Variant</code> VisitIndentedCode ic As <code>MKIndentedCodeBlock</code> <code>Variant</code> VisitInlineHTML html As <code>MKInlineHTML</code> <code>Variant</code> VisitInlineImage image As <code>MarkdownKit.MKInlineImage</code> <code>Variant</code> VisitInlineLink link As <code>MarkdownKit.MKInlineLink</code> <code>Variant</code> VisitInlineText it As <code>MKInlineText</code> <code>Variant</code> VisitList list As <code>MKListBlock</code> <code>Variant</code> VisitListItem item As <code>MKListItemBlock</code> <code>Variant</code> VisitParagraph p As <code>MKParagraphBlock</code> <code>Variant</code> VisitSetextHeading stx As <code>MKSetextHeadingBlock</code> <code>Variant</code> VisitSoftBreak sb As <code>MKSoftBreak</code> <code>Variant</code> VisitStrongEmphasis se As <code>MKStrongEmphasis</code> <code>Variant</code> VisitTextBlock tb As <code>MKTextBlock</code> <code>Variant</code> VisitThematicBreak tb As <code>MKThematicBreak</code> <code>Variant</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLRenderer/#property-descriptions","title":"Property Descriptions","text":"<p>mOutput() As String</p> <p>The under-construction output of the renderer.</p> <p>ShouldTrimLeadingWhitespace As Boolean</p> <p>True if the renderer should trim leading whitespace from inline text before rendering it.</p> <p>ShouldTrimTrailingWhitespace As Boolean</p> <p>True if the renderer should trim trailing whitespace from inline text before rendering it.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKHTMLRenderer/#method-descriptions","title":"Method Descriptions","text":"<p>EncodePredefinedEntities(s As String) As String</p> <p>Encodes the 4 predefined entities to make them XML-safe.</p> <p>https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML</p> <p>SpacesString(count As Integer) As String</p> <p>Returns a string consisting of <code>count</code> spaces.</p> <p>URLEncode(s As String) As String</p> <p>URL encodes common characters.</p> <p>NB: URL encoding is much more complex than this but this covers most use cases.</p> <p>VisitATXHeading(atx As MKATXHeadingBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitBlock(b As MKBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>Should not be called when rendering HTML.</p> <p>VisitBlockQuote(bq As MKBlockQuote) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitCodeSpan(cs As MKCodeSpan) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitDocument(doc As MKDocument) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitEmphasis(e As MKEmphasis) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitFencedCode(fc As MKFencedCodeBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitHTMLBlock(html As MKHTMLBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitIndentedCode(ic As MKIndentedCodeBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitInlineHTML(html As MKInlineHTML) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitInlineImage(image As MarkdownKit.MKInlineImage) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitInlineLink(link As MarkdownKit.MKInlineLink) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitInlineText(it As MKInlineText) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitList(list As MKListBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitListItem(item As MKListItemBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitParagraph(p As MKParagraphBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitSetextHeading(stx As MKSetextHeadingBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitSoftBreak(sb As MKSoftBreak) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitStrongEmphasis(se As MKStrongEmphasis) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitTextBlock(tb As MKTextBlock) As Variant</p> <p>Part of the MKRenderer interface.</p> <p>VisitThematicBreak(tb As MKThematicBreak) As Variant</p> <p>Part of the MKRenderer interface.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKIndentedCodeBlock/","title":"MKIndentedCodeBlock","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKIndentedCodeBlock/#description","title":"Description","text":"<p>Represents an indented code block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKIndentedCodeBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStartOffset As <code>Integer</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKIndentedCodeBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStartOffset As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStartOffset</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTML/","title":"MKInlineHTML","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTML/#description","title":"Description","text":"<p>Represents an inline HTML block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTML/#properties","title":"Properties","text":"Name Type Read-Only Destination <code>String</code> EndCharacter <code>MarkdownKit.MKCharacter</code> IsAutoLink <code>Boolean</code> Label <code>String</code> LocalRightAnglePos <code>Integer</code> LocalStart <code>Integer</code> ParentLocalStart <code>Integer</code> Title <code>String</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTML/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStartPos As <code>Integer</code>, parentLocalStart As <code>Integer</code>, localStartPos As <code>Integer</code>, absoluteRightAngleChar As <code>MKCharacter</code>, parentLocalRightAnglePos As <code>Integer</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTML/#property-descriptions","title":"Property Descriptions","text":"<p>Destination As String</p> <p>If this inline HTML has a link, this is the destination.</p> <p>EndCharacter As MarkdownKit.MKCharacter</p> <p>The ending <code>&gt;</code> character.</p> <p>IsAutoLink As Boolean</p> <p>True if this inline HTML is an autolink.</p> <p>Label As String</p> <p>This inline HTML's optional link label.</p> <p>LocalRightAnglePos As Integer</p> <p>The 0-based position in <code>Parent.Characters</code> of the closing right angle bracket.</p> <p>LocalStart As Integer</p> <p>The 0-based index on the line of the opening left angle bracket of this inline HTML.</p> <p>ParentLocalStart As Integer</p> <p>The 0-based index in <code>Parent.Characters</code> of the opening left angle bracket of this inline HTML.</p> <p>Title As String</p> <p>This inline HTML's title (if any).</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTML/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStartPos As Integer, parentLocalStart As Integer, localStartPos As Integer, absoluteRightAngleChar As MKCharacter, parentLocalRightAnglePos As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is this block's parent block. </li> <li><code>absoluteStartPos</code> is the 0-based position in the original source of the start of this block. </li> <li><code>parentLocalStart</code> is the 0-based index in <code>parent.Characters</code> of the opening left angle bracket of this inline HTML. </li> <li><code>localStartPos</code> is the 0-based index on the line of the opening left angle bracket of this inline HTML. </li> <li><code>absoluteRightAngleChar</code> is a reference to the actual ending <code>&gt;</code> character. </li> <li><code>parentLocalRightAnglePos</code> is the 0-based position in <code>parent.Characters</code> of the closing right angle bracket. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTMLScanner/","title":"MKInlineHTMLScanner","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTMLScanner/#description","title":"Description","text":"<p>Used internally by the parser to scan inline HTML blocks.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTMLScanner/#properties","title":"Properties","text":"Name Type Read-Only EmailPartOneCharacters <code>Dictionary</code> \u2714"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTMLScanner/#methods","title":"Methods","text":"Name Parameters Returns FindClosingTag chars() As <code>MKCharacter</code>, pos As <code>integer</code>, tagName As <code>String</code> <code>Integer</code> FindOpenTag chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, tagName As <code>String</code> <code>Integer</code> GetHtmlTagName chars() As <code>MKCharacter</code>, pos As <code>Integer</code> <code>String</code> MatchAnythingExcept chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, invalidChar As <code>String</code> <code>Boolean</code> MatchAnythingExceptInvalidAndWhitespace chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, ParamArray invalidChars() As <code>String</code> <code>Boolean</code> MatchASCIILetterOrDigit chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, ParamArray validChars() As <code>String</code> <code>Boolean</code> MatchASCIILetterOrDigitOrHyphen chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, maxCount As <code>Integer</code> <code>Integer</code> MatchASCIILetterOrValidCharacter chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, currentChar As <code>String</code>, ParamArray validChars() As <code>String</code> <code>Boolean</code> ScanAutoLink chars() As <code>MKCharacter</code>, startPos As <code>Integer</code>, uri As <code>String</code> <code>Integer</code> ScanDeclarationCommentOrCData chars() As <code>MKCharacter</code>, startPos As <code>Integer</code> <code>Integer</code> ScanEmailLink chars() As <code>MKCharacter</code>, startPos As <code>Integer</code>, uri As <code>String</code> <code>Integer</code> ScanLinkScheme chars() As <code>MKCharacter</code>, pos As <code>Integer</code> <code>Integer</code> ScanProcessingInstruction chars() As <code>MKCharacter</code>, startPos As <code>Integer</code> <code>Integer</code> SkipWhitespace chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, currentChar As <code>String</code> <code>Boolean</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTMLScanner/#property-descriptions","title":"Property Descriptions","text":"<p>EmailPartOneCharacters As Dictionary</p> <p>This property is shared.</p> <p>Stores the characters that are valid for the first part of an email autolink: <code>a-zA-Z0-9.!#$%&amp;'*+\\/=?^_</code>{|}~-`</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineHTMLScanner/#method-descriptions","title":"Method Descriptions","text":"<p>FindClosingTag(chars() As MKCharacter, pos As integer, tagName As String) As Integer This method is shared.</p> <p>Finds the 0-based index in <code>chars</code> of a valid HTML closingTag beginning at <code>pos</code>. Returns <code>0</code> if no valid closingTag is found.</p> <p>Assumes that <code>pos</code> points to the character immediately following \"&lt;/\"</p> <pre><code>closingTag: &lt;/, tagName, optional whitespace, &gt;\ntagName: ASCII letter, &gt;= 0 ASCII letter|digit|-\n</code></pre> <p>Also sets the ByRef <code>tagName</code> parameter to the detected tagName (if present) or \"\" if no valid tagName is found.</p> <p>The return value is the 0-based index immediately after the closing <code>&gt;</code>.</p> <p>FindOpenTag(chars() As MKCharacter, pos As Integer, tagName As String) As Integer This method is shared.</p> <p>Returns the 0-based index in <code>line</code> of the end of a valid HTML opening tag, beginning at <code>pos</code> or <code>0</code> if not found. <code>tagName</code> is set to the tag found or \"\".</p> <p>Assumes that <code>pos</code> points to the character immediately following \"&lt;\" Sets the ByRef parameter <code>tagName</code> to the detected tag name (if present) or \"\" if none is found.</p> <pre><code>openTag: \"&lt;\", a tagname, &gt;= 0 attributes, optional whitespace, optional \"/\", and a \"&gt;\".\ntagName: ASCII letter, &gt;= 0 ASCII letter|digit|-\nattribute: whitespace, attributeName, optional attributeValueSpec\nattributeName: ASCII letter|-|:, &gt;=0 ASCII letter|digit|_|.|:|-\nattributeValueSpec: optional whitespace, =, optional whitespace, attributeValue\nattributeValue: unQuotedAttValue | singleQuotedAttValue | doubleQuotedAttValue\nunQuotedAttValue: &gt; 0 characters NOT including whitespace, \", ', =, &lt;, &gt;, or `.\nsingleQuotedAttValue: ', &gt;= 0 characters NOT including ', then a final '\ndoubleQuotedAttValue: \", &gt;= 0 characters NOT including \", then a final \"\n</code></pre> <p>GetHtmlTagName(chars() As MKCharacter, pos As Integer) As String This method is shared.</p> <p>Starting at <code>pos</code>, reads a HTML tag name from <code>chars</code> and returns it. Adjusts <code>pos</code> to point to the character immediately after the tag name. May return \"\".</p> <p>Note: <code>pos</code> is passed ByRef. tagName: ASCII letter, &gt;= 0 ASCII letter|digit|- Returns \"\" If no valid tagName is found.</p> <p>MatchAnythingExcept(chars() As MKCharacter, pos As Integer, currentChar As String, invalidChar As String) As Boolean This method is shared.</p> <p>Advances past the characters in <code>chars</code> starting at <code>pos</code> until <code>invalidChar</code>. Returns True if we advanced. <code>pos</code> and <code>currentChar</code> are mutated.</p> <p>MatchAnythingExceptInvalidAndWhitespace(chars() As MKCharacter, pos As Integer, currentChar As String, ParamArray invalidChars() As String) As Boolean This method is shared.</p> <p>Advances past the characters in <code>chars</code> starting at <code>pos</code> until whitespace or an invalid character is found. Returns True if we advanced. <code>pos</code> and <code>currentChar</code> are mutated.</p> <p>MatchASCIILetterOrDigit(chars() As MKCharacter, pos As Integer, currentChar As String, ParamArray validChars() As String) As Boolean This method is shared.</p> <p>Advances through <code>chars</code> starting at <code>pos</code> as long as the character is an ASCII letter, digit or <code>validChars</code>. Mutates <code>pos</code> and <code>currentChar</code>. True if <code>pos</code> changed.</p> <p>MatchASCIILetterOrDigitOrHyphen(chars() As MKCharacter, pos As Integer, maxCount As Integer) As Integer This method is shared.</p> <p>Advances through <code>chars</code> as long as it matches an ASCII letter, digit or hyphen. Returns the number of matched characters. Stops if we match <code>maxCount</code> characters.</p> <p>MatchASCIILetterOrValidCharacter(chars() As MKCharacter, pos As Integer, currentChar As String, ParamArray validChars() As String) As Boolean This method is shared.</p> <p>Advances through <code>chars</code> starting at <code>pos</code> as long as the character is an ASCII letter or <code>validChars</code>. Mutates <code>pos</code> and <code>currentChar</code>. True if <code>pos</code> changed.</p> <p>ScanAutoLink(chars() As MKCharacter, startPos As Integer, uri As String) As Integer This method is shared.</p> <p>Scans <code>chars</code> for a valid autolink returning the index of the character immediately following a valid autolink or <code>0</code> if none is found. Sets <code>uri</code> to the absolute URI.</p> <p>Assumes <code>chars(startPos - 1) = \"&lt;\"</code></p> <p>Valid autolink:</p> <pre><code>     \"&lt;\", absolute URI, \"&gt;\"\nAbsolute URI = scheme, :, &gt;=0 characters (not WS, &lt;, &gt;)\nScheme = [A-Za-z]{1}[A-Za-z0-9\\+\\.\\-]{1, 31}\n</code></pre> <p>ScanDeclarationCommentOrCData(chars() As MKCharacter, startPos As Integer) As Integer This method is shared.</p> <p>Scans <code>chars</code> for a valid HTML declaration, comment or CDATA section. Returns the index of the character after the closing character or <code>0</code> if not found.</p> <p>Assumes <code>startPos</code> points at the index of the character immediately following <code>&lt;!</code>.</p> <pre><code>CDATA:\n-----\n  \"&lt;![CDATA[\", &gt;= 0 characters, then \"]]&gt;\n\nDeclaration:\n-----------\n  \"&lt;!\", &gt;= 1 uppercase ASCII letters, whitespace, &gt;= 1 characters not including \"&gt;\", then \"&gt;\"\n\nComment:\n-------\n  \"&lt;!--\" + text + \"--&gt;\"\n  Where text does not start with \"&gt;\" or \"-&gt;\", does not end with \"-\", and does not contain \"--\"\n\nStarting assumptions:\n  &lt;![CDATA[X]]&gt;\n  0123456789012\n    ^\n\n  &lt;!X X&gt;\n  012345\n    ^\n\n  &lt;!--a--&gt;\n  01234567\n    ^\n</code></pre> <p>ScanEmailLink(chars() As MKCharacter, startPos As Integer, uri As String) As Integer This method is shared.</p> <p>Scans <code>chars</code> from <code>startPos</code> for a valid email autolink, returning the index of the character after a valid autolink or <code>0</code> if none is found. Sets <code>uri</code> to the absolute URI.</p> <p>Assumes <code>chars(startPos - 1) = \"&lt;\"</code> Sets the ByRef parameter <code>uri</code> to the absolute URI.</p> <p>Valid email autolink:</p> <pre><code> \"&lt;\", email address, \"&gt;\"\n  Email address:\n     [a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\n     (?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\n</code></pre> <p>ScanLinkScheme(chars() As MKCharacter, pos As Integer) As Integer This method is shared.</p> <p>Scans <code>chars</code> beginning at <code>pos</code> for an inline link scheme, returning the index of the character following the scheme or <code>0</code> if none is found.</p> <p>Valid scheme = [A-Za-z]{1}[A-Za-z0-9+.-]{1, 31}</p> <p>ScanProcessingInstruction(chars() As MKCharacter, startPos As Integer) As Integer This method is shared.</p> <p>Scans for an inline HTML \"processing instruction\". Returns the index in <code>chars</code> of the character after the closing <code>?&gt;</code> or <code>0</code> if not found.</p> <p>A processing instruction consists of the string <code>&lt;?</code>, a string of characters not including the string <code>?&gt;</code> and the string <code>?&gt;</code>. Assumes <code>startPos</code> points at the index in <code>chars</code> of the character immediately following an opening <code>&lt;?</code>.</p> <p>SkipWhitespace(chars() As MKCharacter, pos As Integer, currentChar As String) As Boolean This method is shared.</p> <p>Skips over whitespace in <code>chars</code> beginning at <code>pos</code> updating <code>pos</code> and <code>currentChar</code>. Returns True if any whitespace was skipped.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineImage/","title":"MKInlineImage","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineImage/#description","title":"Description","text":"<p>Represents an inline image within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineImage/#properties","title":"Properties","text":"Name Type Read-Only CloserCharacter <code>MarkdownKit.MKCharacter</code> Destination <code>MarkdownKit.MKLinkDestination</code> FullReferenceDestinationCloser <code>MarkdownKit.MKCharacter</code> FullReferenceDestinationOpener <code>MarkdownKit.MKCharacter</code> FullReferenceLabelLength <code>Integer</code> HasDestination <code>Boolean</code> \u2714 HasTitle <code>Boolean</code> \u2714 Label <code>MarkdownKit.MKLinkLabel</code> LinkType <code>MarkdownKit.MKLinkTypes</code> LocalStart <code>Integer</code> OpenerCharacter <code>MarkdownKit.MKCharacter</code> Title <code>MarkdownKit.MKLinkTitle</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineImage/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStart As <code>Integer</code>, data As <code>MarkdownKit.MKInlineLinkData</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineImage/#property-descriptions","title":"Property Descriptions","text":"<p>CloserCharacter As MarkdownKit.MKCharacter</p> <p>The link closing bracket character. Comes either after the link label or the link text (depending on the link type).</p> <p>Destination As MarkdownKit.MKLinkDestination</p> <p>This inline image's destination.</p> <p>FullReferenceDestinationCloser As MarkdownKit.MKCharacter</p> <p>If this is a full reference type inline link, this is the <code>]</code> character after the reference link's name.</p> <p>FullReferenceDestinationOpener As MarkdownKit.MKCharacter</p> <p>If this is a full reference type inline link, this is the <code>[</code> character before the reference link's name.</p> <p>FullReferenceLabelLength As Integer</p> <p>If this is a full reference type inline image, this is the length of the reference link label.</p> <p>HasDestination As Boolean</p> <p>True if this image has a destination.</p> <p>HasTitle As Boolean</p> <p>True if this image has a title defined (may be empty but delimited).</p> <p>Label As MarkdownKit.MKLinkLabel</p> <p>This inline images's label. May be Nil.</p> <p>LinkType As MarkdownKit.MKLinkTypes</p> <p>The type of link this is.</p> <p>LocalStart As Integer</p> <p>The local 0-based index in <code>Parent.Characters</code> that this inline image begins at.</p> <p>OpenerCharacter As MarkdownKit.MKCharacter</p> <p>The link opener character (<code>!</code>).</p> <p>Title As MarkdownKit.MKLinkTitle</p> <p>This inline image's optional title. May be Nil.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineImage/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStart As Integer, data As MarkdownKit.MKInlineLinkData)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is this block's parent block. </li> <li><code>absoluteStart</code> is the 0-based position in the original source of the start of this block. </li> <li><code>data</code> is the data required to create this block. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLink/","title":"MKInlineLink","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLink/#description","title":"Description","text":"<p>Represents an inline link within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLink/#properties","title":"Properties","text":"Name Type Read-Only CloserCharacter <code>MarkdownKit.MKCharacter</code> Destination <code>MarkdownKit.MKLinkDestination</code> FullReferenceDestinationCloser <code>MarkdownKit.MKCharacter</code> FullReferenceDestinationOpener <code>MarkdownKit.MKCharacter</code> FullReferenceLabelLength <code>Integer</code> HasDestination <code>Boolean</code> \u2714 HasTitle <code>Boolean</code> \u2714 Label <code>MarkdownKit.MKLinkLabel</code> LinkType <code>MarkdownKit.MKLinkTypes</code> LocalStart <code>Integer</code> OpenerCharacter <code>MarkdownKit.MKCharacter</code> Title <code>MarkdownKit.MKLinkTitle</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLink/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStart As <code>Integer</code>, data As <code>MarkdownKit.MKInlineLinkData</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLink/#property-descriptions","title":"Property Descriptions","text":"<p>CloserCharacter As MarkdownKit.MKCharacter</p> <p>The link closing bracket character. Comes either after the link label or the link text (depending on the link type).</p> <p>Destination As MarkdownKit.MKLinkDestination</p> <p>This inline link's destination.</p> <p>FullReferenceDestinationCloser As MarkdownKit.MKCharacter</p> <p>If this is a full reference type inline link, this is the <code>]</code> character after the reference link's name.</p> <p>FullReferenceDestinationOpener As MarkdownKit.MKCharacter</p> <p>If this is a full reference type inline link, this is the <code>[</code> character before the reference link's name.</p> <p>FullReferenceLabelLength As Integer</p> <p>If this is a full reference type inline link, this is the length of the reference link label.</p> <p>HasDestination As Boolean</p> <p>True if this link has a destination.</p> <p>HasTitle As Boolean</p> <p>True if this link has a title defined (may be empty but delimited).</p> <p>Label As MarkdownKit.MKLinkLabel</p> <p>This inline link's label. May be Nil.</p> <p>LinkType As MarkdownKit.MKLinkTypes</p> <p>The type of link this is.</p> <p>LocalStart As Integer</p> <p>The local 0-based index in <code>Parent.Characters</code> that this inline link begins at.</p> <p>OpenerCharacter As MarkdownKit.MKCharacter</p> <p>The link opener character (<code>[</code>).</p> <p>Title As MarkdownKit.MKLinkTitle</p> <p>This inline link's optional title. May be Nil.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLink/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStart As Integer, data As MarkdownKit.MKInlineLinkData)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is this block's parent block. </li> <li><code>absoluteStart</code> is the 0-based position in the original source of the start of this block. </li> <li><code>data</code> is the data required to create this block. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLinkData/","title":"MKInlineLinkData","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLinkData/#description","title":"Description","text":"<p>Holds data about an inline link within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLinkData/#properties","title":"Properties","text":"Name Type Read-Only Characters() <code>MarkdownKit.MKCharacter</code> CloserCharacter <code>MarkdownKit.MKCharacter</code> Destination <code>MarkdownKit.MKLinkDestination</code> EndPosition <code>Integer</code> FullReferenceDestinationCloser <code>MarkdownKit.MKCharacter</code> FullReferenceDestinationOpener <code>MarkdownKit.MKCharacter</code> FullReferenceLabelLength <code>Integer</code> IsInlineImage <code>Boolean</code> Label <code>MarkdownKit.MKLinkLabel</code> LinkType <code>MarkdownKit.MKLinkTypes</code> OpenerCharacter <code>MarkdownKit.MKCharacter</code> Title <code>MarkdownKit.MKLinkTitle</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLinkData/#methods","title":"Methods","text":"Name Parameters Returns Constructor isInlineImage As <code>Boolean</code>, type As <code>MKLinkTypes</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLinkData/#property-descriptions","title":"Property Descriptions","text":"<p>Characters() As MarkdownKit.MKCharacter</p> <p>The characters representing this inline link's LinkText or, if an inline image, it's \"alt\" description.</p> <p>CloserCharacter As MarkdownKit.MKCharacter</p> <p>The link closing bracket character. Comes either after the link label or the link text (depending on the link type).</p> <p>Destination As MarkdownKit.MKLinkDestination</p> <p>This inline link's destination.</p> <p>EndPosition As Integer</p> <p>The position in the container's <code>Characters</code> array of the closing \"]\".</p> <p>FullReferenceDestinationCloser As MarkdownKit.MKCharacter</p> <p>If this is a full reference type inline link, this is the <code>]</code> character after the reference link's name.</p> <p>FullReferenceDestinationOpener As MarkdownKit.MKCharacter</p> <p>If this is a full reference type inline link, this is the <code>[</code> character before the reference link's name.</p> <p>FullReferenceLabelLength As Integer</p> <p>If this is a full reference type inline link, this is the length of the reference link label.</p> <p>IsInlineImage As Boolean</p> <p>True if this link data represents an inline image.</p> <p>Label As MarkdownKit.MKLinkLabel</p> <p>This inline link's label. May be Nil.</p> <p>LinkType As MarkdownKit.MKLinkTypes</p> <p>The type of link this is.</p> <p>OpenerCharacter As MarkdownKit.MKCharacter</p> <p>The link opener character (<code>[</code> for links and <code>!</code> for images). Either the start of the link label or the link text.</p> <p>Title As MarkdownKit.MKLinkTitle</p> <p>Optional title data. May be Nil.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineLinkData/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(isInlineImage As Boolean, type As MKLinkTypes)</p> <p>Default constructor.</p> <ul> <li><code>isInlineImage</code> is True if this is an inline image (rather than an inline link). </li> <li><code>type</code> is the type of link. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineScanner/","title":"MKInlineScanner","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineScanner/#description","title":"Description","text":"<p>Used internally during parsing to scan inlines.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineScanner/#methods","title":"Methods","text":"Name Parameters Returns CanContainSoftBreaks container As <code>MKBlock</code> <code>Boolean</code> ComputeInlineStart container As <code>MKBlock</code> <code>Integer</code> Constructor CreateInlineLinkData linkTextChars() As <code>MKCharacter</code>, destinationData As <code>MarkdownKit.MKLinkDestination</code>, titleData As <code>MarkdownKit.MKLinkTitle</code>, containerEndPos As <code>Integer</code>, isInlineImage As <code>Boolean</code>, openerChar As <code>MKCharacter</code>, closerChar As <code>MKCharacter</code> <code>MKInlineLinkData</code> CreateReferenceLinkData container As <code>MKBlock</code>, linkLabel As <code>String</code>, chars() As <code>MKCharacter</code>, containerEndPos As <code>Integer</code>, isInlineImage As <code>Boolean</code>, openerChar As <code>MKCharacter</code>, closerChar As <code>MKCharacter</code>, linkType As <code>MKLinkTypes</code>, optionalDestination As <code>MarkdownKit.MKLinkDestination</code> <code>MKInlineLinkData</code> FinaliseBuffer buffer As <code>MKInlineText</code>, container As <code>MKBlock</code> FinaliseInlineContainer container As <code>MKBlock</code> FullReferenceLinkData container As <code>MKBlock</code>, chars() As <code>MKCharacter</code>, linkTextChars() As <code>MKCharacter</code>, charsStartPos As <code>Integer</code>, isInlineImage As <code>Boolean</code>, openerChar As <code>MKCharacter</code>, closerChar As <code>MKCharacter</code> <code>MKInlineLinkData</code> HandleBackticks parent As <code>MKBlock</code>, chars() As <code>MKCharacter</code>, startPos As <code>Integer</code> <code>MKCodeSpan</code> HandleLeftAngleBracket parent As <code>MKBlock</code>, chars() As <code>MarkdownKit.MKCharacter</code>, startPos As <code>Integer</code> <code>MKInlineHTML</code> InlineLinkData openerChar As <code>MKCharacter</code>, closingBracketChar As <code>MKCharacter</code>, chars() As <code>MarkdownKit.MKCharacter</code>, linkTextChars() As <code>MKCharacter</code>, parenthStartPos As <code>Integer</code>, isInlineImage As <code>Boolean</code> <code>MKInlineLinkData</code> LookForLinkOrImage container As <code>MarkdownKit.MKBlock</code>, delimiterStack() As <code>MKDelimiterStackNode</code>, pos As <code>Integer</code> <code>Boolean</code> ParseInlines block As <code>MKBlock</code>, delimiterStack() As <code>MKDelimiterStackNode</code> Peek chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, char As <code>String</code> <code>Boolean</code> ProcessEmphasis container As <code>MKBlock</code>, delimiterStack() As <code>MKDelimiterStackNode</code>, stackBottom As <code>Integer</code> ScanDelimiterRun chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, delimiter As <code>String</code> <code>MKDelimiterStackNode</code> ScanForInlineImage container As <code>MKBlock</code>, startPos As <code>Integer</code>, closerCharPos As <code>Integer</code> <code>MKInlineLinkData</code> ScanForInlineLink container As <code>MKBlock</code>, startPos As <code>Integer</code>, closerCharPos As <code>Integer</code> <code>MKInlineLinkData</code> ScanInlineLinkDestination chars() As <code>MKCharacter</code>, pos As <code>Integer</code> <code>String</code> ScanInlineLinkTitle chars() As <code>MKCharacter</code>, pos As <code>Integer</code> <code>String</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineScanner/#method-descriptions","title":"Method Descriptions","text":"<p>CanContainSoftBreaks(container As MKBlock) As Boolean This method is shared.</p> <p>True if <code>container</code> can contain soft breaks.</p> <p>ComputeInlineStart(container As MKBlock) As Integer This method is shared.</p> <p>Computes the absolute start position of inline elements in this <code>container</code>.</p> <p>The start of inline elements is not always the same as the start position of the container. For example:</p> <pre><code>  012\n  Foo\n  ^\nVersus\n  01234\n  # Foo\n    ^\n</code></pre> <p>Constructor()</p> <p>Private to prevent instantiation.</p> <p>CreateInlineLinkData(linkTextChars() As MKCharacter, destinationData As MarkdownKit.MKLinkDestination, titleData As MarkdownKit.MKLinkTitle, containerEndPos As Integer, isInlineImage As Boolean, openerChar As MKCharacter, closerChar As MKCharacter) As MKInlineLinkData This method is shared.</p> <p>Convenience method for creating a new MKInlineLinkData object.</p> <p><code>containerEndPos</code> is the position in the inline link's container's <code>Characters</code> array of the closing \")\". The contents of <code>linkTextChars</code> are used as the link's text and need to be parsed as inlines.</p> <p><code>openerChar</code> is the opening <code>[</code> character (for links) or <code>!</code> character (for images). <code>closerChar</code> is the closing <code>]</code> character.</p> <p>CreateReferenceLinkData(container As MKBlock, linkLabel As String, chars() As MKCharacter, containerEndPos As Integer, isInlineImage As Boolean, openerChar As MKCharacter, closerChar As MKCharacter, linkType As MKLinkTypes, optionalDestination As MarkdownKit.MKLinkDestination) As MKInlineLinkData This method is shared.</p> <p>Gets the data for a validated reference link named <code>linkLabel</code> from the document's reference map storing the link's end position and character data.</p> <p><code>containerEndPos</code> is the position in <code>container.Characters</code> of the closing \"]\". If this is an inline link, the contents of <code>chars</code> are used as the link's text. If this is an inline image, the contents of <code>chars</code> are used as the images's <code>alt</code> attrubute <code>chars</code> will be parsed as inlines.</p> <p><code>openerChar</code> is the opening <code>[</code> character (for links) or <code>!</code> character (for images). <code>closerChar</code> is the closing <code>]</code> character.</p> <p>FinaliseBuffer(buffer As MKInlineText, container As MKBlock) This method is shared.</p> <p>Finalises the current inline parsing buffer.</p> <p>As we parse inlines, we perodically keep an open inline text buffer to add characters to until we hit a different type of inline element (e.g. a backtick for a code span). This method is called when we need to close / finalise that open buffer.</p> <p>FinaliseInlineContainer(container As MKBlock) This method is shared.</p> <p>Finalises <code>container</code> after parsing all of its inline children.</p> <p>FullReferenceLinkData(container As MKBlock, chars() As MKCharacter, linkTextChars() As MKCharacter, charsStartPos As Integer, isInlineImage As Boolean, openerChar As MKCharacter, closerChar As MKCharacter) As MKInlineLinkData This method is shared.</p> <p>Returns either an inline link or Nil if a valid full reference link cannot be constructed.</p> <p><code>linkTextChars</code> are the raw characters representing this link's \"link text\". They are to be parsed as inlines. <code>charsStartPos</code> is the index of the \"[\" immediately after the closing linkText \"]\". <code>openerChar</code> is the opening <code>[</code> character (for links) or <code>!</code> character (for images). <code>closerChar</code> is the closing <code>]</code> character.</p> <p>HandleBackticks(parent As MKBlock, chars() As MKCharacter, startPos As Integer) As MKCodeSpan This method is shared.</p> <p>If the character at <code>startPos</code> in <code>chars</code> begins a valid inline code span then one is created and returned, otherwise Nil is returned.</p> <p>Assumes <code>startPos</code> in <code>chars</code> is a backtick.</p> <p>HandleLeftAngleBracket(parent As MKBlock, chars() As MarkdownKit.MKCharacter, startPos As Integer) As MKInlineHTML This method is shared.</p> <p>If the character at <code>startPos</code> in <code>chars</code> begins a valid inline HTML span then one is created and returned, otherwise Nil is returned.</p> <p>Assumes <code>chars(startPos) = \"&lt;\"</code>.</p> <p>InlineLinkData(openerChar As MKCharacter, closingBracketChar As MKCharacter, chars() As MarkdownKit.MKCharacter, linkTextChars() As MKCharacter, parenthStartPos As Integer, isInlineImage As Boolean) As MKInlineLinkData This method is shared.</p> <p>Returns either an inline link or Nil if a valid inline link cannot be constructed.</p> <p><code>linkTextChars</code> are the raw characters representing this link's text. They are to be parsed as inlines. <code>parenthStartPos</code> points to the index of the \"(\" immediately after the closing linkText \"]\". <code>openerChar</code> is the opening <code>[</code> character (for links) or <code>!</code> character (for images). <code>closingBracketChar</code> is the closing <code>]</code> character.</p> <p>Inline link: linkText, \"(\", optional whitespace, optional link destination, optional linkTitle, optional whitespace, \")\"</p> <p>The contents of <code>linkText</code> are parsed as inlines and used as the link's text.</p> <p>LookForLinkOrImage(container As MarkdownKit.MKBlock, delimiterStack() As MKDelimiterStackNode, pos As Integer) As Boolean This method is shared.</p> <p>Having hit a \"]\", returns True if a link or image precedes it. If True, the link or image is added to <code>container</code> and <code>pos</code> is mutated.</p> <p>ParseInlines(block As MKBlock, delimiterStack() As MKDelimiterStackNode) This method is shared.</p> <p>Steps through the contents of the inline container <code>block</code>, handling any inline elements it encounters.</p> <p>Assumes <code>block</code> is an inline container block (i.e: a paragraph, ATX heading or setext heading).</p> <p>Peek(chars() As MKCharacter, pos As Integer, char As String) As Boolean This method is shared.</p> <p>Returns True if the character at <code>chars(pos)</code> is <code>char</code>.</p> <p>ProcessEmphasis(container As MKBlock, delimiterStack() As MKDelimiterStackNode, stackBottom As Integer) This method is shared.</p> <p>Process any emphasis in <code>container</code>'s inline blocks.</p> <p><code>stackBottom</code> sets a lower bound to how far we descend in the delimiter stack. If it's <code>-1</code>, then we can go all the way to the bottom. Otherwise, we stop before visiting <code>stackBottom</code>.</p> <p>ScanDelimiterRun(chars() As MKCharacter, pos As Integer, delimiter As String) As MKDelimiterStackNode This method is shared.</p> <p>Scans <code>chars</code> from <code>pos</code> for a run of emphasis. Returns a delimiter stack node with information about the run.</p> <p>Assumes <code>chars(pos)</code> points to the begining of the emphasis run. <code>delimiter</code> is either \"*\" or \"_\".</p> <p>ScanForInlineImage(container As MKBlock, startPos As Integer, closerCharPos As Integer) As MKInlineLinkData This method is shared.</p> <p>Scans <code>container.Characters</code> from the beginning of the array for an inline image. Returns the image data if found or Nil if not.</p> <p>Assumes <code>container.Characters(startPos) = \"!\"</code> and <code>container.Characters(startPos + 1) = \"[\"</code>. Assumes <code>container.Characters(closerCharPos)</code> is the index of a \"]\" character.</p> <p>ScanForInlineLink(container As MKBlock, startPos As Integer, closerCharPos As Integer) As MKInlineLinkData This method is shared.</p> <p>Scans <code>container.Characters</code> from the beginning of the array for an inline link. Returns the link data if found or Nil if not.</p> <p>Assumes <code>container.Characters(startPos) = \"[\"</code>. Assumes <code>container.Characters(closerCharPos)</code> is the index of a \"]\" character.</p> <p>ScanInlineLinkDestination(chars() As MKCharacter, pos As Integer) As String This method is shared.</p> <p>Starting at <code>pos</code>, scans the <code>chars</code> for a valid link URL. Returns the URL or \"\" if there is none. Mutates <code>pos</code>.</p> <p>If the URL is flanked by \"&lt;&gt;\" (scenario 1) they are removed from the URL before returning.</p> <p>ScanInlineLinkTitle(chars() As MKCharacter, pos As Integer) As String This method is shared.</p> <p>Scans <code>chars</code>, starting at <code>pos</code>, for a valid link title. Returns the title or \" if there is none. Mutates <code>pos</code> to the position after the closing title delimiter.</p> <p>There are 3 valid types of link title:</p> <ol> <li> <p>= 0 characters between straight \" characters including a \" character only if it is backslash-escaped.</p> </li> <li> <p>= 0 characters between ' characters, including a ' character only if it is backslash-escaped.</p> </li> <li> <p>= 0 characters between matching parentheses ((...)), including a ( or ) character only if it's backslash-escaped.</p> </li> </ol>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineText/","title":"MKInlineText","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineText/#description","title":"Description","text":"<p>Represents inline text within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineText/#properties","title":"Properties","text":"Name Type Read-Only LocalStart <code>Integer</code> ParentStart <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineText/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineText/#property-descriptions","title":"Property Descriptions","text":"<p>LocalStart As Integer</p> <p>0-based local position of the start of this block on its line.</p> <p>ParentStart As Integer</p> <p>The local 0-based index in <code>Parent.Characters</code> that this inline text span begins at.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKInlineText/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkDestination/","title":"MKLinkDestination","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkDestination/#description","title":"Description","text":"<p>Holds data about a link destination required for rendering into source code tokens.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkDestination/#properties","title":"Properties","text":"Name Type Read-Only EndCharacter <code>MarkdownKit.MKCharacter</code> Length <code>Integer</code> StartCharacter <code>MarkdownKit.MKCharacter</code> Value <code>String</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkDestination/#methods","title":"Methods","text":"Name Parameters Returns Constructor Constructor startChar As <code>MKCharacter</code>, value As <code>String</code>, length As <code>Integer</code>, endChar As <code>MKCharacter</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkDestination/#property-descriptions","title":"Property Descriptions","text":"<p>EndCharacter As MarkdownKit.MKCharacter</p> <p>The last character of this link destination.</p> <p>Length As Integer</p> <p>The length of the destination.</p> <p>StartCharacter As MarkdownKit.MKCharacter</p> <p>The first character of this link destination.</p> <p>Value As String</p> <p>The unescaped link destination.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkDestination/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Default constructor.</p> <p>Constructor(startChar As MKCharacter, value As String, length As Integer, endChar As MKCharacter)</p> <p>Constructor with parameters.</p> <ul> <li><code>startChar</code> is a reference to the actual first character of this destination. </li> <li><code>value</code> is the unescaped destination. </li> <li><code>length</code> is the length of the destination. </li> <li><code>endChar</code> is a reference to the actual last character of this destination. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkLabel/","title":"MKLinkLabel","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkLabel/#description","title":"Description","text":"<p>Holds information about a link label. Provided to assist with rendering into source code tokens.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkLabel/#properties","title":"Properties","text":"Name Type Read-Only Characters() <code>MarkdownKit.MKCharacter</code> Length <code>Integer</code> Value <code>String</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkLabel/#methods","title":"Methods","text":"Name Parameters Returns Constructor Constructor length As <code>Integer</code>, value As <code>String</code>, characters() As <code>MarkdownKit.MKCharacter</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkLabel/#property-descriptions","title":"Property Descriptions","text":"<p>Characters() As MarkdownKit.MKCharacter</p> <p>The label's characters. May be empty.</p> <p>Length As Integer</p> <p>The length of the link label (excluding delimiters).</p> <p>Value As String</p> <p>The link label value.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkLabel/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Default constructor.</p> <p>Constructor(length As Integer, value As String, characters() As MarkdownKit.MKCharacter)</p> <p>Constructor with parameters.</p> <ul> <li><code>length</code> is the length of the link label (excluding delimiters). </li> <li><code>value</code> is the link label. </li> <li><code>characters()</code> is an array of the label's characters. May be empty. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkReferenceDefinition/","title":"MKLinkReferenceDefinition","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkReferenceDefinition/#description","title":"Description","text":"<p>Holds data about a link reference definition within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkReferenceDefinition/#properties","title":"Properties","text":"Name Type Read-Only Colon <code>MarkdownKit.MKCharacter</code> EndPosition <code>Integer</code> HasDestination <code>Boolean</code> \u2714 HasTitle <code>Boolean</code> \u2714 LinkDestination <code>MarkdownKit.MKLinkDestination</code> LinkLabel <code>String</code> LinkLabelCloser <code>MarkdownKit.MKCharacter</code> LinkLabelLength <code>Integer</code> LinkLabelOpener <code>MarkdownKit.MKCharacter</code> LinkLabelStart <code>Integer</code> LinkLabelStartChar <code>MarkdownKit.MKCharacter</code> LinkTitle <code>MarkdownKit.MKLinkTitle</code> Start <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkReferenceDefinition/#methods","title":"Methods","text":"Name Parameters Returns Constructor start As <code>Integer</code>, linkLabelOpener As <code>MarkdownKit.MKCharacter</code>, linkLabelCloser As <code>MarkdownKit.MKCharacter</code>, label As <code>String</code>, linkLabelStartChar As <code>MarkdownKit.MKCharacter</code>, labelStart As <code>Integer</code>, labelLength As <code>Integer</code>, colon As <code>MarkdownKit.MKCharacter</code>, destination As <code>MarkdownKit.MKLinkDestination</code>, title As <code>MarkdownKit.MKLinkTitle</code>, endPos As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkReferenceDefinition/#property-descriptions","title":"Property Descriptions","text":"<p>Colon As MarkdownKit.MKCharacter</p> <p>The colon character.</p> <p>EndPosition As Integer</p> <p>0-based index in the source that this link reference definition ends.</p> <p>HasDestination As Boolean</p> <p>True if this reference link has a destination.</p> <p>HasTitle As Boolean</p> <p>True if there is a link reference definition title. If False then <code>LinkTitleStart</code> and <code>LinkTitleLength</code> are invalid.</p> <p>LinkDestination As MarkdownKit.MKLinkDestination</p> <p>The link destination.</p> <p>LinkLabel As String</p> <p>The link label.</p> <p>LinkLabelCloser As MarkdownKit.MKCharacter</p> <p>The closing link label delimiter (<code>]</code>).</p> <p>LinkLabelLength As Integer</p> <p>The length of the link label (including the flanking <code>[]</code>).</p> <p>LinkLabelOpener As MarkdownKit.MKCharacter</p> <p>The opening link label delimiter (<code>[</code>).</p> <p>LinkLabelStart As Integer</p> <p>0-based index in the source of the start of the link label.</p> <p>LinkLabelStartChar As MarkdownKit.MKCharacter</p> <p>The first character of the link label.</p> <p>LinkTitle As MarkdownKit.MKLinkTitle</p> <p>The link title. May be empty.</p> <p>Start As Integer</p> <p>0-based index in the source that this link reference definition starts.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkReferenceDefinition/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(start As Integer, linkLabelOpener As MarkdownKit.MKCharacter, linkLabelCloser As MarkdownKit.MKCharacter, label As String, linkLabelStartChar As MarkdownKit.MKCharacter, labelStart As Integer, labelLength As Integer, colon As MarkdownKit.MKCharacter, destination As MarkdownKit.MKLinkDestination, title As MarkdownKit.MKLinkTitle, endPos As Integer)</p> <p>Default constructor.</p> <ul> <li><code>start</code> is the 0-based index in the source that this link reference definition starts. </li> <li><code>linkLabelOpener</code> is the opening link label delimiter (<code>[</code>). </li> <li><code>linkLabelCloser</code> is the closing link label delimiter (<code>]</code>). </li> <li><code>label</code> is the link label. </li> <li><code>linkLabelStartChar</code> is the first character of the link label. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkScanner/","title":"MKLinkScanner","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkScanner/#description","title":"Description","text":"<p>Used internally during parsing to scan links.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkScanner/#methods","title":"Methods","text":"Name Parameters Returns Constructor ParseLinkDestination chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, data As <code>Dictionary</code> <code>Boolean</code> ParseLinkLabel chars() As <code>MKCharacter</code>, pos As <code>Integer</code>, data As <code>Dictionary</code> <code>Boolean</code> ParseLinkTitle chars() As <code>MKCharacter</code>, startPos As <code>Integer</code>, data As <code>Dictionary</code> <code>Boolean</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkScanner/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Private to prevent instantation.</p> <p>ParseLinkDestination(chars() As MKCharacter, pos As Integer, data As Dictionary) As Boolean This method is shared.</p> <p>Tries to parse a link destination in <code>chars</code> beginning at <code>pos</code>. If able it returns True, updates <code>pos</code> to the character immediately after the destination and populates <code>data</code>.</p> <p>Sets <code>data.Value(\"linkDestination\")</code> to the link destination (if found). Sets <code>data.Value(\"linkDestinationLength\")</code> to the length of the destination. Note that <code>pos</code> is passed ByRef.</p> <p>A \"link destination\" consists of either:</p> <ol> <li> <p>= 0 characters between an opening <code>&lt;</code> and a closing <code>&gt;</code> that contains no line endings or unescaped <code>&lt;</code> or <code>&gt;</code> characters, or</p> </li> <li> <p>0 characters that does not start with <code>&lt;</code>, does not include ASCII control characters or space character, and includes parentheses only if: (a) they are backslash-escaped (b) they are part of a balanced pair of unescaped parentheses. At least 3 levels must be supported.</p> </li> </ol> <p>ParseLinkLabel(chars() As MKCharacter, pos As Integer, data As Dictionary) As Boolean This method is shared.</p> <p>Tries to parse a link label in <code>chars</code> beginning at <code>pos</code>. If able it returns True, updates <code>pos</code> to the end of the label and populates <code>data</code>.</p> <p>Sets <code>data.Value(\"linkLabel\")</code> to the link label (if found). Sets <code>data.Value(\"linkLabelStart\")</code> to the original <code>pos</code> value. Sets <code>data.Value(\"linkLabelLength\")</code> to the length of the trimmed label before any Sets <code>data.Value(\"linkLabelStartChar\")</code> to the starting character of the label. consecutive internal whitespace is collapsed. Note that <code>pos</code> is passed ByRef.</p> <p>A \"link label\" begins with a left bracket (<code>[</code>) and ends with the first right bracket (<code>]</code>) that is not backslash-escaped. Between these brackets there must be at least one character that is not a space, tab, or line ending. Unescaped square bracket characters are not allowed inside the opening and closing square brackets of link labels. A link label can have at most 999 characters inside the square brackets.</p> <p>ParseLinkTitle(chars() As MKCharacter, startPos As Integer, data As Dictionary) As Boolean This method is shared.</p> <p>Tries to parse a link title in <code>chars</code> beginning at <code>pos</code>. If able it returns True, updates <code>pos</code> to the end of the link title (the delimiter) and populates <code>data</code>.</p> <p>Sets <code>data.Value(\"linkTitle\")</code> to the link title (if found). Sets <code>data.Value(\"linkTitleLength\")</code> to the absolute length of the link title (if found). Sets <code>data.Value(\"linkTitleStart\")</code> to the original value of <code>pos</code>. Sets <code>data.Value(\"linkTitleValid\")</code> to False if there is a link title but it is invalid. Note that <code>pos</code> is passed ByRef.</p> <p>A \"link title\" consists of either:</p> <ol> <li> <p>= 0 characters between <code>\"</code> characters, including a <code>\"</code> character only if it is backslash-escaped.</p> </li> <li> <p>= 0 characters between <code>'</code> characters, including a <code>'</code> character only if it is backslash-escaped</p> </li> <li> <p>= 0 characters between matching parentheses, including a <code>(</code> or <code>)</code> only if it's backslash-escaped.</p> </li> </ol>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitle/","title":"MKLinkTitle","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitle/#description","title":"Description","text":"<p>Holds information about a link title. Provide to assist with rendering into source code tokens.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitle/#properties","title":"Properties","text":"Name Type Read-Only Characters() <code>MarkdownKit.MKCharacter</code> ClosingDelimiter <code>MarkdownKit.MKCharacter</code> Length <code>Integer</code> OpeningDelimiter <code>MarkdownKit.MKCharacter</code> Value <code>String</code> ValueBlocks() <code>MarkdownKit.MKLinkTitleBlock</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitle/#methods","title":"Methods","text":"Name Parameters Returns Constructor Constructor openingDelimiter As <code>MKCharacter</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitle/#property-descriptions","title":"Property Descriptions","text":"<p>Characters() As MarkdownKit.MKCharacter</p> <p>The characters making up the value of this link title (not including any flanking delimiters). May include newlines.</p> <p>ClosingDelimiter As MarkdownKit.MKCharacter</p> <p>The closing delimiter for the title.</p> <p>Length As Integer</p> <p>The length of the destination.</p> <p>OpeningDelimiter As MarkdownKit.MKCharacter</p> <p>The opening delimiter for this link's title.</p> <p>Value As String</p> <p>The unescaped link destination.</p> <p>ValueBlocks() As MarkdownKit.MKLinkTitleBlock</p> <p>An array of special title text blocks where each item is a line (or portion of a line) of the link's text. May be empty.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitle/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Default constructor.</p> <p>Constructor(openingDelimiter As MKCharacter)</p> <p>Constructor that takes a reference to the opening delimiter for this link's title.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitleBlock/","title":"MKLinkTitleBlock","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitleBlock/#description","title":"Description","text":"<p>Link titles can span multiple lines. This class represents the value of a link title that occurs on a single line. It specifies the absolute and local start positions of the line and the contents. Multiple contiguous instances of this class may consitute a link title.</p> <p>This class is only used by source code token renderers.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitleBlock/#properties","title":"Properties","text":"Name Type Read-Only AbsoluteStart <code>Integer</code> Length <code>Integer</code> LineNumber <code>Integer</code> LocalStart <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitleBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor absPos As <code>Integer</code>, localPos As <code>Integer</code>, length As <code>Integer</code>, lineNumber As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitleBlock/#property-descriptions","title":"Property Descriptions","text":"<p>AbsoluteStart As Integer</p> <p>The 0-based absolute position in the original source code of this title line.</p> <p>Length As Integer</p> <p>The length of this title line.</p> <p>LineNumber As Integer</p> <p>The line number this block of text occurs on.</p> <p>LocalStart As Integer</p> <p>The 0-based local position on the line of this title line.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKLinkTitleBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(absPos As Integer, localPos As Integer, length As Integer, lineNumber As Integer)</p> <p>Default constructor.</p> <ul> <li><code>absPos</code> is the 0-based position in the original source code of this link title. </li> <li><code>localPos</code> is the 0-based position on the line this block begins at. </li> <li>length` is the length of this title line. </li> <li><code>lineNumber</code> is the 1-based line number this block begins on. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListBlock/","title":"MKListBlock","text":"<p>Inherits <code>MKAbstractList</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListBlock/#description","title":"Description","text":"<p>Represents a list block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListData/","title":"MKListData","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListData/#description","title":"Description","text":"<p>Stores data required by the parser when parsing a list.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListData/#properties","title":"Properties","text":"Name Type Read-Only BulletCharacter <code>String</code> IsTight <code>Boolean</code> Length <code>Integer</code> ListDelimiter <code>MKListDelimiters</code> ListMarkerAbsolutionPosition <code>Integer</code> ListMarkerLocalPosition <code>Integer</code> ListType <code>MKListTypes</code> MarkerOffset <code>Integer</code> MarkerWidth <code>Integer</code> StartNumber <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListData/#methods","title":"Methods","text":"Name Parameters Returns Operator_Compare other As <code>MKListData</code> <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListData/#property-descriptions","title":"Property Descriptions","text":"<p>BulletCharacter As String</p> <p>The character used for unordered lists. Used if <code>ListData.ListType</code> is set to <code>MKListTypes.Bullet</code>.</p> <p>IsTight As Boolean</p> <p>True if the list is tight (such lists will not render additional explicit paragraph elements).</p> <p>Length As Integer</p> <p>The length of the list marker.</p> <p>ListDelimiter As MKListDelimiters</p> <p>The character that follows the number if <code>ListData.ListType</code> is set to <code>ListType.Ordered</code>.</p> <p>ListMarkerAbsolutionPosition As Integer</p> <p>The 0-based position in the original source of the first character of the list marker.</p> <p>ListMarkerLocalPosition As Integer</p> <p>The 0-based local position on the line that this list marker begins at.</p> <p>ListType As MKListTypes</p> <p>The type (ordered or unordered) of this list.</p> <p>MarkerOffset As Integer</p> <p>The number of spaces the list marker is indented.</p> <p>MarkerWidth As Integer</p> <p>The width of the list marker. May include an optional trailing space.</p> <p>StartNumber As Integer</p> <p>The number for the first list item if <code>ListData.ListType</code> is set to <code>ListType.Ordered</code>.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListData/#method-descriptions","title":"Method Descriptions","text":"<p>Operator_Compare(other As MKListData) As Integer</p> <p>Compares this list with <code>other</code>. Returns <code>0</code> if they are considered equal, otherwise returns <code>-1</code>.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListItemBlock/","title":"MKListItemBlock","text":"<p>Inherits <code>MKAbstractList</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListItemBlock/#description","title":"Description","text":"<p>Represents a list block item within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListItemBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKListItemBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParagraphBlock/","title":"MKParagraphBlock","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParagraphBlock/#description","title":"Description","text":"<p>Represents a paragraph list block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParagraphBlock/#properties","title":"Properties","text":"Name Type Read-Only mAllCharacters() <code>MKCharacter</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParagraphBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParagraphBlock/#property-descriptions","title":"Property Descriptions","text":"<p>mAllCharacters() As MKCharacter</p> <p>All of this block's characters as an array of MKCharacter instances.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParagraphBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/","title":"MKParser","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/#description","title":"Description","text":"<p>This class is responsible for parsing Markdown input into an abstract syntax tree (AST). The AST can then be transformed into other representations (e.g. HTML).</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/#properties","title":"Properties","text":"Name Type Read-Only mAllMatched <code>Boolean</code> mCharsLastIndex <code>Integer</code> mContainer <code>MKBlock</code> mCurrentBlock <code>MKBlock</code> mCurrentChar <code>String</code> mCurrentColumn <code>Integer</code> mCurrentIndent <code>Integer</code> mCurrentLine <code>XUITextLine</code> mCurrentOffset <code>Integer</code> mDoc <code>MKDocument</code> mLastMatchedContainer <code>MKBlock</code> mLines() <code>XUITextLine</code> mMaybeLazy <code>Boolean</code> mNextNWS <code>Integer</code> mNextNWSColumn <code>Integer</code> mRemainingSpaces <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/#methods","title":"Methods","text":"Name Parameters Returns AcceptsLines b As <code>MKBlock</code> <code>Boolean</code> AdvanceOffset count As <code>Integer</code>, columns As <code>Boolean</code> AdvanceOptionalSpace <code>Boolean</code> CanContain parentType As <code>MKBlockTypes</code>, childType As <code>MKBlockTypes</code> <code>Boolean</code> ConvertParagraphBlockToSetextHeading paragraph As <code>MarkdownKit.MKBlock</code>, line As <code>XUITextLine</code> <code>MKSetextHeadingBlock</code> CreateChildBlock parent As <code>MKBlock</code>, line As <code>XUITextLine</code>, type As <code>MKBlockTypes</code>, blockStartOffset As <code>Integer</code> <code>MKBlock</code> FindNextNonWhitespace FirstNonBlankIndex <code>Integer</code> IsATXHeader data As <code>Dictionary</code> <code>Boolean</code> IsClosingCodeFence length As <code>Integer</code> <code>Boolean</code> IsCodeFenceOpening fenceChar As <code>String</code>, data As <code>Dictionary</code> <code>Boolean</code> IsCorrectHtmlBlockEnd type As <code>MKHTMLBlockTypes</code>, line As <code>XUITextLine</code>, pos As <code>Integer</code> <code>Boolean</code> IsHtmlBlockStart pos As <code>Integer</code>, data As <code>Dictionary</code> <code>Boolean</code> IsHtmlBlockType7Start pos As <code>Integer</code>, data As <code>Dictionary</code> <code>Boolean</code> IsSetextHeadingLine data As <code>Dictionary</code> <code>Boolean</code> IsThematicBreak chars() As <code>String</code>, pos As <code>Integer</code> <code>Boolean</code> LastNonBlankIndex firstNonBlank As <code>Integer</code> <code>Integer</code> MatchWhitespaceCharacters line As <code>XUITextLine</code>, pos As <code>Integer</code> <code>Integer</code> ParseBlockStructure ParseInlines ParseLines lines() As <code>XUITextLine</code> <code>MKDocument</code> ParseListMarker indented As <code>Boolean</code>, line As <code>XUITextLine</code>, pos As <code>Integer</code>, interruptsParagraph As <code>Boolean</code>, data As <code>MarkdownKit.MKListData</code> <code>Boolean</code> ParseSource markdown As <code>String</code> <code>MKDocument</code> ProcessLine line As <code>XUITextLine</code> ProcessRemainderOfLine Reset lines() As <code>XUITextLine</code> ResetLine line As <code>XUITextLine</code> TryNewBlocks TryOpenBlocks"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/#constants","title":"Constants","text":"Name Type CODE_INDENT <code>Double</code> TAB_SIZE <code>Double</code> <p>CODE_INDENT As Double The number of spaces required for a code indentation.</p> <p>TAB_SIZE As Double The number of spaces a tab is considered equivalent to.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/#property-descriptions","title":"Property Descriptions","text":"<p>mAllMatched As Boolean</p> <p>Used internally when parsing the block structure.</p> <p>mCharsLastIndex As Integer</p> <p>A cache of [mCurrentLine.Characters.LastIndex].</p> <p>mContainer As MKBlock</p> <p>The block we are currently considering.</p> <p>mCurrentBlock As MKBlock</p> <p>The block currently being evaluated.</p> <p>mCurrentChar As String</p> <p>The current character we are evaluating.</p> <p>mCurrentColumn As Integer</p> <p>The 0-based virtual position in the line that takes tab expansion into account.</p> <p>mCurrentIndent As Integer</p> <p>The current indent number expressed as spaces (accounts for tab stops).</p> <p>mCurrentLine As XUITextLine</p> <p>The line we are currently processing.</p> <p>mCurrentOffset As Integer</p> <p>The 0-based position of the character considered as the start of the current line being evaluated once indentation and block starters have been consumed.</p> <p>mDoc As MKDocument</p> <p>The document the parser is currently constructing.</p> <p>mLastMatchedContainer As MKBlock</p> <p>The last matching container.</p> <p>mLines() As XUITextLine</p> <p>A reference to the array of text lines being parsed. Should be considered read-only.</p> <p>mMaybeLazy As Boolean</p> <p>True if the current line might be a lazy continuation line.</p> <p>mNextNWS As Integer</p> <p>The zero-based index of the next non-whitespace character in the line, assuming that the line begins at <code>mCurrentOffset</code>.</p> <p>mNextNWSColumn As Integer</p> <p>The 0-based virtual position of the next non-whitespace character on [mCurrentLine] that takes tab expansion into account.</p> <p>mRemainingSpaces As Integer</p> <p>Internally used to compute additional remaining spaces.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/#method-descriptions","title":"Method Descriptions","text":"<p>AcceptsLines(b As MKBlock) As Boolean</p> <p>Returns True if <code>b</code> accepts lines.</p> <p>AdvanceOffset(count As Integer, columns As Boolean)</p> <p>Advances the current offset by <code>count</code> places.</p> <p>If <code>columns</code> is True then we need to take into consideration tab stops. The offset relates to the location on the current line that is considered the start of the line once indentation and block openers are taken into consideration.</p> <p>AdvanceOptionalSpace() As Boolean</p> <p>Advances a single space or tab if the next character is a space returning True if there was a space.</p> <p>CanContain(parentType As MKBlockTypes, childType As MKBlockTypes) As Boolean This method is shared.</p> <p>Returns True if a <code>parentType</code> can contain <code>childType</code>.</p> <p>ConvertParagraphBlockToSetextHeading(paragraph As MarkdownKit.MKBlock, line As XUITextLine) As MKSetextHeadingBlock</p> <p>Removes the passed <code>paragraph</code> from its parent and replaces it with a new SetextHeading block with the same children. Returns the SetextHeading block.</p> <p>CreateChildBlock(parent As MKBlock, line As XUITextLine, type As MKBlockTypes, blockStartOffset As Integer) As MKBlock</p> <p>Creates a new block of <code>type</code>, adds it as a child of <code>parent</code>.</p> <p><code>blockStartOffset</code> will be applied to <code>mCurrentOffset</code> when determining the absolute start position of this block.</p> <p>FindNextNonWhitespace()</p> <p>Finds the next non-whitespace (NWS) character on this line</p> <p>FirstNonBlankIndex() As Integer</p> <p>Finds the index in mLines of the first non-blank line or returns -1 if there are only blank lines.</p> <p>IsATXHeader(data As Dictionary) As Boolean</p> <p>Returns True if <code>mCurrentLine</code>, beginning at <code>mNextNWS</code>, is a valid ATX heading. If True then <code>data</code> is a new valid dictionary, otherwise <code>data</code> is set to Nil.</p> <p>Assumes that <code>mNextNWS</code> points to a \"#\" in <code>mCurrentLine</code>. Sets <code>data.Value(\"level\")</code> to the header level (1 to 6). Sets <code>data.Value(\"length\")</code> to number of characters from the start of the opening sequence to the first character of the heading content. Sets <code>data.Value(\"closingSequenceCount\")</code> to the number of trailing <code>#</code> characters (may be zero). Sets <code>data.Value(\"closingSequenceStart\")</code> to the index of the first <code>#</code> character in the closing sequence if there is one, otherwise data.Value(\"closingSequenceCount\")` is absent.</p> <p>IsClosingCodeFence(length As Integer) As Boolean</p> <p>Returns True if mCurrentLine, beginning at <code>mNextNWS</code> is a closing fence of at least <code>length</code> characters.</p> <p>IsCodeFenceOpening(fenceChar As String, data As Dictionary) As Boolean</p> <p>Returns True if <code>mCurrentLine</code>, beginning at <code>mNextNWS</code>, is a fenced code opening. Populates <code>data</code> with the \"fenceLength\".</p> <p>Assumes that <code>mCurrentChar = fenceChar</code> and <code>mCurrentLine.Characters(mNextNWS) = fenceChar</code> as this method is only called from <code>TryNewBlocks</code>.</p> <p>Also assumes that <code>fenceChar</code> is either \"`\" or \"~\".</p> <p>We don't capture the (optional) info string here as it gets added later as a <code>MKTextBlock</code> child of this block.</p> <p>IsCorrectHtmlBlockEnd(type As MKHTMLBlockTypes, line As XUITextLine, pos As Integer) As Boolean</p> <p>Returns True if we find the correct ending condition for the specified HTML block type.</p> <p>There are 7 kinds of HTML blocks (CommonMark spec 0.29 4.6).</p> <p>IsHtmlBlockStart(pos As Integer, data As Dictionary) As Boolean</p> <p>Returns True if the there is a HTML block starting at <code>pos</code> on <code>mCurrentLine</code>. Puts the \"type\" of HTML block in <code>data</code>.</p> <p>There are 7 kinds of HTML block. See the note \"HTML Block Types\" in this class for more detail.</p> <p>IsHtmlBlockType7Start(pos As Integer, data As Dictionary) As Boolean</p> <p>Returns True if <code>mCurrentLine</code> from <code>pos</code> is a type 7 HTML block start. Sets <code>data.Value(\"type\")</code> to none or type 7 enumeration.</p> <pre><code>Type 7:\n{openTag NOT script|style|pre}[\u2022\u2192]+|\u2b90$   or\n{closingTag}[\u2022\u2192]+|\u2b90$\n</code></pre> <p>IsSetextHeadingLine(data As Dictionary) As Boolean</p> <p>Returns True if <code>mCurrentLine</code>, beginning at <code>mNextNWS</code> is a setext heading line. Sets <code>data.Value(\"level\")</code></p> <p>Sets <code>data.Value(\"level\")</code> to the heading level (1 or 2) or 0 if this is not a setext heading line.</p> <pre><code>  ^[=]+[ ]*$\n  ^[-]+[ ]*$\n</code></pre> <p>IsThematicBreak(chars() As String, pos As Integer) As Boolean</p> <p>Returns True if <code>line</code> starting at <code>pos</code> is a thematic break.</p> <p>Valid thematic break lines consist of &gt;= 3 dashes, underscores or asterixes which may be optionally separated by any amount of spaces or tabs whitespace. The characters must match:</p> <p>LastNonBlankIndex(firstNonBlank As Integer) As Integer</p> <p>Finds the index in <code>mLines</code> of the last non-blank line or returns -1 if there are only blank lines.</p> <p><code>firstNonBlank</code> should be the index of a valid non-blank line in <code>mLines</code> (i.e. <code>FirstNonBlankIndex</code> has been called prior to this method).</p> <p>MatchWhitespaceCharacters(line As XUITextLine, pos As Integer) As Integer</p> <p>Matches whitespace on <code>line</code> beginning at <code>pos</code> and returns how many characters were matched.</p> <p>ParseBlockStructure()</p> <p>Parses <code>mLines</code> into a block structure.</p> <p>This is part 1 of the parsing process. It gives us the overall structure of the Markdown document. Assumes the parser has been reset before this method is invoked.</p> <p>ParseInlines()</p> <p>Walks the document parsing inline content.</p> <p>Assumes that <code>ParseBlockStructure</code> was called immediately prior to this method.</p> <p>ParseLines(lines() As XUITextLine) As MKDocument</p> <p>Parses <code>lines</code> into a Markdown document.</p> <p>ParseListMarker(indented As Boolean, line As XUITextLine, pos As Integer, interruptsParagraph As Boolean, data As MarkdownKit.MKListData) As Boolean</p> <p>Returns True if able to parse a ListItem marker, populating <code>data</code> with the details.</p> <p>ParseSource(markdown As String) As MKDocument</p> <p>Parses <code>markdown</code> into a Markdown document.</p> <p>ProcessLine(line As XUITextLine)</p> <p>Processes a line of Markdown and incorporates it into the document tree.</p> <p>ProcessRemainderOfLine()</p> <p>Processes what's left of the current line.</p> <p>We've tried matching against the open blocks and we've opened any required new blocks. What now remains at the offset is a text line. Add it to the appropriate container.</p> <p>Reset(lines() As XUITextLine)</p> <p>Resets all properties, ready to parse again.</p> <p>ResetLine(line As XUITextLine)</p> <p>Sets <code>line</code> to be the current line for processing, clears the line's tokens and marks it as dirty.</p> <p>TryNewBlocks()</p> <p>Tries to start a new container block.</p> <p>TryOpenBlocks()</p> <p>Iterates through open blocks and descend through their last children down to the last open block.</p> <p>For each open block, check to see if <code>mCurrentLine</code> meets the required condition to keep the block open.</p> <p><code>mContainer</code> will be set to the block which last had a match to the line.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKParser/#html-block-types","title":"HTML Block Types","text":"<p>Type 1: <code>MKHTMLBlockTypes.InterruptingBlockWithEmptyLines</code></p> <p>Start condition: The line begins with the string <code>\"&lt;script\"</code>, <code>\"&lt;pre\"</code>, or <code>\"&lt;style\"</code> (case-insensitive),  followed by whitespace, the string <code>\"&gt;\"</code>, or the end of the line.</p> <p>End condition: The line contains an end tag <code>\"&lt;/script&gt;\"</code>, <code>\"&lt;/pre&gt;\"</code>, or <code>\"&lt;/style&gt;\"</code> (case-insensitive).  It need not match the start tag.</p> <p>Type 2: <code>MKHTMLBlockTypesComment</code></p> <p>Start condition: The line begins with the string <code>\"&lt;!--\"</code>.</p> <p>End condition: The line contains the string <code>\"--&gt;\"</code>.</p> <p>Type 3: <code>MKHTMLBlockTypes.ProcessingInstruction</code></p> <p>Start condition: The line begins with the string <code>\"&lt;?\"</code>.</p> <p>End condition: The line contains the string <code>\"?&gt;\"</code>.</p> <p>Type 4: <code>MKHTMLBlocks.TypeDocumentType</code></p> <p>Start condition: The line begins with the string <code>\"&lt;!</code>\" followed by an uppercase ASCII letter.</p> <p>End condition: The line contains the character <code>\"&gt;\"</code>.</p> <p>Type 5: <code>MKHTMLBlockTypes.CData</code></p> <p>Start condition: The line begins with the string <code>\"&lt;![CDATA[\"</code>.</p> <p>End condition: The line contains the string <code>\"]]&gt;\"</code>.</p> <p>Type 6: <code>MKHTMLBlockTypes.InterruptingBlock</code></p> <p>Start condition: The line begins the string <code>\"&lt;\"</code> or <code>\"&lt;!--\"</code> followed by one of the strings  (case-insensitive) <code>\"address\"</code>, <code>\"article\"</code>, <code>\"aside\"</code>, <code>\"base\"</code>, <code>\"basefont\"</code>, <code>\"blockquote\"</code>, <code>\"body\"</code>,  <code>\"caption\"</code>, <code>\"center\"</code>, <code>\"col\"</code>, <code>\"colgroup\"</code>, <code>\"dd\"</code>, <code>\"details\"</code>, <code>\"dialog\"</code>, <code>\"dir\"</code>, <code>\"div\"</code>, <code>\"dl\"</code>,  <code>\"dt\"</code>, <code>\"fieldset\"</code>, <code>\"figcaption\"</code>, <code>\"figure\"</code>, <code>\"footer\"</code>, <code>\"form\"</code>, <code>\"frame\"</code>, <code>\"frameset\"</code>, <code>\"h1\"</code>,  <code>\"h2\"</code>, <code>\"h3\"</code>, <code>\"h4\"</code>, <code>\"h5\"</code>, <code>\"h6\"</code>, <code>\"head\"</code>, <code>\"header\"</code>, <code>\"hr\"</code>, <code>\"html\"</code>, <code>\"iframe\"</code>, <code>\"legend\"</code>,  <code>\"li\"</code>, <code>\"link\"</code>, <code>\"main\"</code>, <code>\"menu\"</code>, <code>\"menuitem\"</code>, <code>\"nav\"</code>, <code>\"noframes\"</code>, <code>\"ol\"</code>, <code>\"optgroup\"</code>, <code>\"option\"</code>,  <code>\"p\"</code>, <code>\"param\"</code>, <code>\"section\"</code>, <code>\"source\"</code>, <code>\"summary\"</code>, <code>\"table\"</code>, <code>\"tbody\"</code>, <code>\"td\"</code>, <code>\"tfoot\"</code>, <code>\"th\"</code>,  <code>\"thead\"</code>, <code>\"title\"</code>, <code>\"tr\"</code>, <code>\"track\"</code>, <code>\"ul\"</code>, followed by whitespace, the end of the line, the string <code>\"--&gt;\"</code>  or the string <code>\"/&gt;\"</code>.</p> <p>End condition: The line is followed by a blank line.</p> <p>Type 7: <code>MKHTMLBlockTypes.NonInterruptingBlock</code></p> <p>Start condition: The line begins with a complete open tag (with any tag name other than script, style,  or pre) or a complete closing tag, followed only by whitespace or the end of the line.</p> <p>End condition: The line is followed by a blank line.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKRenderer/","title":"MKRenderer","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKRenderer/#description","title":"Description","text":"<p>Classes that wish to transform the abstract syntax tree (AST) created by <code>MKParser</code> should  implement this interface.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKRenderer/#methods","title":"Methods","text":"Name Parameters Returns VisitATXHeading atx As <code>MarkdownKit.MKATXHeadingBlock</code> <code>Variant</code> VisitBlock b As <code>MarkdownKit.MKBlock</code> <code>Variant</code> VisitBlockQuote bq As <code>MarkdownKit.MKBlockQuote</code> <code>Variant</code> VisitCodeSpan cs As <code>MarkdownKit.MKCodeSpan</code> <code>Variant</code> VisitDocument doc As <code>MarkdownKit.MKDocument</code> <code>Variant</code> VisitEmphasis e As <code>MarkdownKit.MKEmphasis</code> <code>Variant</code> VisitFencedCode fc As <code>MarkdownKit.MKFencedCodeBlock</code> <code>Variant</code> VisitHTMLBlock html As <code>MarkdownKit.MKHTMLBlock</code> <code>Variant</code> VisitIndentedCode ic As <code>MarkdownKit.MKIndentedCodeBlock</code> <code>Variant</code> VisitInlineHTML html As <code>MarkdownKit.MKInlineHTML</code> <code>Variant</code> VisitInlineImage image As <code>MarkdownKit.MKInlineImage</code> <code>Variant</code> VisitInlineLink link As <code>MarkdownKit.MKInlineLink</code> <code>Variant</code> VisitInlineText it As <code>MarkdownKit.MKInlineText</code> <code>Variant</code> VisitList list As <code>MarkdownKit.MKListBlock</code> <code>Variant</code> VisitListItem item As <code>MarkdownKit.MKListItemBlock</code> <code>Variant</code> VisitParagraph p As <code>MarkdownKit.MKParagraphBlock</code> <code>Variant</code> VisitSetextHeading stx As <code>MarkdownKit.MKSetextHeadingBlock</code> <code>Variant</code> VisitSoftBreak sb As <code>MarkdownKit.MKSoftBreak</code> <code>Variant</code> VisitStrongEmphasis se As <code>MarkdownKit.MKStrongEmphasis</code> <code>Variant</code> VisitTextBlock tb As <code>MarkdownKit.MKTextBlock</code> <code>Variant</code> VisitThematicBreak tb As <code>MarkdownKit.MKThematicBreak</code> <code>Variant</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKRenderer/#method-descriptions","title":"Method Descriptions","text":"<p>VisitATXHeading(atx As MarkdownKit.MKATXHeadingBlock) As Variant The renderer is visiting an ATX heading.</p> <p>VisitBlock(b As MarkdownKit.MKBlock) As Variant The renderer is visiting a block node.</p> <p>VisitBlockQuote(bq As MarkdownKit.MKBlockQuote) As Variant The renderer is visiting a block quote.</p> <p>VisitCodeSpan(cs As MarkdownKit.MKCodeSpan) As Variant The renderer is visiting a code span.</p> <p>VisitDocument(doc As MarkdownKit.MKDocument) As Variant The renderer is visiting the main Markdown document.</p> <p>VisitEmphasis(e As MarkdownKit.MKEmphasis) As Variant The renderer is visiting an emphasis node.</p> <p>VisitFencedCode(fc As MarkdownKit.MKFencedCodeBlock) As Variant The renderer is visiting a fenced code block.</p> <p>VisitHTMLBlock(html As MarkdownKit.MKHTMLBlock) As Variant The renderer is visiting an HTML block.</p> <p>VisitIndentedCode(ic As MarkdownKit.MKIndentedCodeBlock) As Variant The renderer is visiting an indented code fence.</p> <p>VisitInlineHTML(html As MarkdownKit.MKInlineHTML) As Variant The renderer is visiting some inline HTML.</p> <p>VisitInlineImage(image As MarkdownKit.MKInlineImage) As Variant The renderer is visiting an inline image.</p> <p>VisitInlineLink(link As MarkdownKit.MKInlineLink) As Variant The renderer is visiting an inline link.</p> <p>VisitInlineText(it As MarkdownKit.MKInlineText) As Variant The renderer is visiting some inline text.</p> <p>VisitList(list As MarkdownKit.MKListBlock) As Variant The renderer is visiting a list.</p> <p>VisitListItem(item As MarkdownKit.MKListItemBlock) As Variant The renderer is visiting a list item.</p> <p>VisitParagraph(p As MarkdownKit.MKParagraphBlock) As Variant The renderer is visiting a paragraph block.</p> <p>VisitSetextHeading(stx As MarkdownKit.MKSetextHeadingBlock) As Variant The renderer is visiting a setext heading.</p> <p>VisitSoftBreak(sb As MarkdownKit.MKSoftBreak) As Variant The renderer is visiting a soft break.</p> <p>VisitStrongEmphasis(se As MarkdownKit.MKStrongEmphasis) As Variant The renderer is visiting a strong emphasis node.</p> <p>VisitTextBlock(tb As MarkdownKit.MKTextBlock) As Variant The renderer is visiting a text block.</p> <p>VisitThematicBreak(tb As MarkdownKit.MKThematicBreak) As Variant The renderer is visiting a thematic break.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSetextHeadingBlock/","title":"MKSetextHeadingBlock","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSetextHeadingBlock/#description","title":"Description","text":"<p>Represents a setext heading within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSetextHeadingBlock/#properties","title":"Properties","text":"Name Type Read-Only Level <code>Integer</code> UnderlineLength <code>Integer</code> UnderlineLineNumber <code>Integer</code> UnderlineLocalStart <code>Integer</code> UnderlineStart <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSetextHeadingBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code> Finalise line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSetextHeadingBlock/#property-descriptions","title":"Property Descriptions","text":"<p>Level As Integer</p> <p>This ATX header's level.</p> <p>UnderlineLength As Integer</p> <p>If this block is a Setext header then this is the length (in characters) of the Setext underline.</p> <p>UnderlineLineNumber As Integer</p> <p>The number of the line that the setext heading underline is on.</p> <p>UnderlineLocalStart As Integer</p> <p>The 0-based local position on the line that the setext heading underline begins at.</p> <p>UnderlineStart As Integer</p> <p>0-based position in the original source code of the first character of a Setext underline (if this block is a Setext header).</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSetextHeadingBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul> <p>Finalise(line As XUITextLine)</p> <p>Closes this block and makes any final changes that may be required.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSoftBreak/","title":"MKSoftBreak","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSoftBreak/#description","title":"Description","text":"<p>Represents a soft break within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSoftBreak/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, blockStart As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKSoftBreak/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, blockStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>blockStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKStrongEmphasis/","title":"MKStrongEmphasis","text":"<p>Inherits <code>MKAbstractEmphasis</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKStrongEmphasis/#description","title":"Description","text":"<p>Represents a run of strong emphasis within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKStrongEmphasis/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStart As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKStrongEmphasis/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStart As Integer)</p> <p>Default constructor.</p> <p><code>parent</code> is the parent of this block. <code>absoluteStart</code> is the 0-based position in the original source code of the start of this block.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKTextBlock/","title":"MKTextBlock","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKTextBlock/#description","title":"Description","text":"<p>Represents a text block within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKTextBlock/#properties","title":"Properties","text":"Name Type Read-Only Contents <code>String</code> IsBlank <code>Boolean</code> \u2714 Line <code>XUITextLine</code> LocalStart <code>Integer</code> PhantomSpaces <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKTextBlock/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStart As <code>Integer</code>, localStart As <code>Integer</code>, contents As <code>String</code>, phantomSpaces As <code>Integer</code>, line As <code>XUITextLine</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKTextBlock/#property-descriptions","title":"Property Descriptions","text":"<p>Contents As String</p> <p>The contents of this text block.</p> <p>IsBlank As Boolean</p> <p>True if this text block is empty.</p> <p>Line As XUITextLine</p> <p>The line this text block begins on.</p> <p>LocalStart As Integer</p> <p>0-based local position on the line that this text block starts.</p> <p>PhantomSpaces As Integer</p> <p>The number of spaces to be inserted at the start of this text block that don't actually exist in the source but are required for CommonMark compliance.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKTextBlock/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStart As Integer, localStart As Integer, contents As String, phantomSpaces As Integer, line As XUITextLine)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>abasoluteStart</code> is the 0-based position in the original source of the start of this block. </li> <li><code>localStart</code> is the 0-based position on the line that this block begins at. </li> <li><code>contents</code> is the contents of this text block. </li> <li><code>phantomSpaces</code> is the number of spaces to be inserted at the start of this text block that don't actually exist in the source but are required for CommonMark compliance. </li> <li><code>line</code> is a reference to the line this text block begins on. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKThematicBreak/","title":"MKThematicBreak","text":"<p>Inherits <code>MKBlock</code></p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKThematicBreak/#description","title":"Description","text":"<p>Represents a thematic break within a Markdown document.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKThematicBreak/#properties","title":"Properties","text":"Name Type Read-Only Length <code>Integer</code> LocalStart <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKThematicBreak/#methods","title":"Methods","text":"Name Parameters Returns Constructor parent As <code>MKBlock</code>, absoluteStart As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKThematicBreak/#property-descriptions","title":"Property Descriptions","text":"<p>Length As Integer</p> <p>The length of this thematic break.</p> <p>LocalStart As Integer</p> <p>The local 0-based position on the line that this thematic break begins at.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MKThematicBreak/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(parent As MKBlock, absoluteStart As Integer)</p> <p>Default constructor.</p> <ul> <li><code>parent</code> is the parent of this block. </li> <li><code>absoluteStart</code> is the 0-based position in the original Markdown source that this block begins at. </li> </ul>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/","title":"MarkdownKit","text":""},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#description","title":"Description","text":"<p>A 100% CommonMark compliant Markdown parser.</p> <p><code>MarkdownKit</code> takes Markdown as input and generates a <code>MKDocument</code> which is essentially an  abstract syntax tree (AST). From the AST, it is then able to render the input as HTML.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#classes","title":"Classes","text":"Name MKAbstractEmphasis MKAbstractList MKATXHeadingBlock MKBlock MKBlockQuote MKCharacter MKCodeSpan MKDelimiterStackNode MKDocument MKEdgeCase MKEmphasis MKException MKFencedCodeBlock MKHTMLBlock MKHTMLBlockScanner MKHTMLRenderer MKIndentedCodeBlock MKInlineHTML MKInlineHTMLScanner MKInlineImage MKInlineLink MKInlineLinkData MKInlineScanner MKInlineText MKLinkDestination MKLinkLabel MKLinkReferenceDefinition MKLinkScanner MKLinkTitle MKLinkTitleBlock MKListBlock MKListData MKListItemBlock MKParagraphBlock MKParser MKSetextHeadingBlock MKSoftBreak MKStrongEmphasis MKTextBlock MKThematicBreak"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#interfaces","title":"Interfaces","text":"Name MKRenderer"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#properties","title":"Properties","text":"Name Type Read-Only CharacterReferences <code>XUIDictionary</code> \u2714 EscapableCharacters <code>Dictionary</code> \u2714 HTMLTagNames <code>Dictionary</code> \u2714 mParser <code>MarkdownKit.MKParser</code> Version <code>XUISemanticVersion</code> \u2714"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#methods","title":"Methods","text":"Name Parameters Returns CollapseInternalWhitespace s As <code>String</code> <code>String</code> FromMKCharacterArray chars() As <code>String</code>, start As <code>Integer</code>, length As <code>Integer</code> <code>String</code> IsEscapable char As <code>String</code> <code>Boolean</code> IsEscaped chars() As <code>MKCharacter</code>, position As <code>Integer</code> <code>Boolean</code> IsMarkdownEscaped chars() As <code>MKCharacter</code>, pos As <code>Integer</code> <code>Boolean</code> IsMarkdownEscaped chars() As <code>String</code>, pos As <code>Integer</code> <code>Boolean</code> IsMarkdownWhitespace char As <code>MKCharacter</code>, lineEndingIsWhitespace As <code>Boolean</code> <code>Boolean</code> IsMarkdownWhitespace char As <code>String</code> <code>Boolean</code> IsPunctuation char As <code>MKCharacter</code> <code>Boolean</code> MKCharacters s As <code>String</code>, line As <code>XUITextLine</code>, localStartOffset As <code>Integer</code> <code>MKCharacter()</code> ReplaceEntities chars() As <code>String</code> ReplaceEntities s As <code>String</code> <code>String</code> ToDocument markdown As <code>String</code> <code>MarkdownKit.MKDocument</code> ToHTML markdown As <code>String</code> <code>String</code> ToString type As <code>MKBlockTypes</code> <code>String</code> ToString chars() As <code>MKCharacter</code> <code>String</code> ToString chars() As <code>MKCharacter</code>, start As <code>Integer</code>, length As <code>Integer</code> <code>String</code> Unescape s As <code>String</code> Unescape chars() As <code>String</code>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#constants","title":"Constants","text":"Name Type MAX_REFERENCE_LABEL_LENGTH <code>Double</code> VERSION_MAJOR <code>Double</code> VERSION_MINOR <code>Double</code> VERSION_PATCH <code>Double</code> <p>MAX_REFERENCE_LABEL_LENGTH As Double The maximum number of characters permitted within the square brackets of a link label.</p> <p>VERSION_MAJOR As Double The current major version.</p> <p>VERSION_MINOR As Double The current minor version.</p> <p>VERSION_PATCH As Double The current patch version.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#enumerations","title":"Enumerations","text":"<p>MKBlockTypes</p> <p>The supported block types.</p> Name AtxHeading Block BlockQuote CodeSpan Document Emphasis FencedCode Html IndentedCode InlineHTML InlineImage InlineLink InlineText List ListItem Paragraph ReferenceDefinition SetextHeading SoftBreak StrongEmphasis TextBlock ThematicBreak <p>MKHTMLBlockTypes</p> <p>The different HTML block types.</p> Name None InterruptingBlockWithEmptyLines Comment ProcessingInstruction Document CData InterruptingBlock NonInterruptingBlock <p>MKLinkTypes</p> <p>The various types of Markdown links.</p> Name CollapsedReference FullReference ShortcutReference Standard <p>MKListDelimiters</p> <p>Defines the delimiter used in the source for ordered lists.</p> Name Period Parenthesis <p>MKListTypes</p> <p>Defines the type of a list block element.</p> Name Bullet Ordered"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#property-descriptions","title":"Property Descriptions","text":"<p>CharacterReferences As XUIDictionary</p> <p>A case-sensitive dictionary containing the HTML entity references and their corresponding unicode codepoints. Key = entity, Value = codepoint.</p> <p>EscapableCharacters As Dictionary</p> <p>A dictionary containing characters that can be escaped with a preceding backslash.</p> <p>HTMLTagNames As Dictionary</p> <p>A dictionary of HTML tag names.</p> <p>mParser As MarkdownKit.MKParser</p> <p>An internal parser used for convenience methods such as <code>ToHTML()</code>.</p> <p>Version As XUISemanticVersion</p> <p>The current version.</p>"},{"location":"XUI/XUI%20Utilities/MarkdownKit/MarkdownKit/#method-descriptions","title":"Method Descriptions","text":"<p>CollapseInternalWhitespace(s As String) As String</p> <p>Reduces consecutive internal whitespace to a single space.</p> <p>FromMKCharacterArray(chars() As String, start As Integer, length As Integer) As String</p> <p>Returns a string from <code>chars</code> beginning at index <code>start</code> for <code>length</code> characters. Assumes <code>chars</code> is an array of individual characters.</p> <p>If <code>start + length</code> &gt; the number of remaining characters then all characters from <code>start</code> to the end of <code>chars</code> are returned. If <code>length</code> = <code>-1</code> then all characters from <code>start</code> to the end of <code>chars</code> are returned.</p> <p>IsEscapable(char As String) As Boolean</p> <p>True if <code>char</code> is a backslash-escapable character.</p> <p>IsEscaped(chars() As MKCharacter, position As Integer) As Boolean</p> <p>True if the character at <code>position</code> is escaped (preceded by a non-escaped backslash character).</p> <p>IsMarkdownEscaped(chars() As MKCharacter, pos As Integer) As Boolean</p> <p>True if the character at <code>pos</code> is escaped (preceded by a non-escaped backslash character).</p> <p>IsMarkdownEscaped(chars() As String, pos As Integer) As Boolean</p> <p>True if the character at <code>pos</code> is escaped (preceded by a non-escaped backslash character).</p> <p>IsMarkdownWhitespace(char As MKCharacter, lineEndingIsWhitespace As Boolean) As Boolean</p> <p>True if <code>char</code> is considered Markdown whitespace.</p> <p>If the optional <code>lineEndingIsWhitespace</code> is True then we also consider a line ending to be whitespace.</p> <p>IsMarkdownWhitespace(char As String) As Boolean</p> <p>True if <code>char</code> is considered Markdown whitespace.</p> <p>IsPunctuation(char As MKCharacter) As Boolean</p> <p>True if <code>char</code> is Markdown punctuation.</p> <p>MKCharacters(s As String, line As XUITextLine, localStartOffset As Integer) As MKCharacter()</p> <p>Returns <code>s</code> as an array of MKCharacter instances.</p> <p>ReplaceEntities(chars() As String)</p> <p>Replaces any HTML entities defined in <code>chars</code> with their corresponding unicode character.</p> <p>This document is used as the authoritative source for the valid entity references and their corresponding code points.</p> <p>Entity reference: <code>\"&amp;\"</code>, a valid HTML5 entity name, <code>\";\"</code></p> <p>Decimal numeric character reference: <code>&amp;#[0-9]{1\u20137};</code></p> <p>Hexadecimal numeric character reference: <code>&amp;#[Xx][a-fA-F0-9]{1-6};</code></p> <p>ReplaceEntities(s As String) As String</p> <p>Replaces any HTML entities in <code>s</code> with their corresponding unicode character.</p> <p>ToDocument(markdown As String) As MarkdownKit.MKDocument</p> <p>Returns the <code>markdown</code> string as a Markdown document (abstract syntax tree).</p> <p>ToHTML(markdown As String) As String</p> <p>Returns the <code>markdown</code> string as HTML.</p> <p>ToString(type As MKBlockTypes) As String</p> <p>Returns a String representation of the passed block type.</p> <p>ToString(chars() As MKCharacter) As String</p> <p>Convert an array of MKCharacter instances to a string.</p> <p>ToString(chars() As MKCharacter, start As Integer, length As Integer) As String</p> <p>Returns a string from <code>chars</code> beginning at index <code>start</code> for <code>length</code> characters.</p> <p>If <code>start + length</code> &gt; the number of remaining characters then all characters from <code>start</code> to the end of <code>chars</code> are returned. If <code>length</code> = <code>-1</code> then all characters from <code>start</code> to the end of <code>chars</code> are returned.</p> <p>Unescape(s As String)</p> <p>Converts backslash escaped characters in <code>s</code> to their literal character value. Mutates <code>s</code>.</p> <p>Unescape(chars() As String)</p> <p>Converts backslash escaped characters to their literal character value. Mutates <code>chars</code>.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKException/","title":"TKException","text":"<p>Inherits <code>RuntimeException</code></p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKException/#description","title":"Description","text":"<p>A subclass of <code>RuntimeException</code> used for exceptions that occur during TOML processing.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKGenerator/","title":"TKGenerator","text":""},{"location":"XUI/XUI%20Utilities/TOMLKit/TKGenerator/#description","title":"Description","text":"<p>Internal class used by <code>TOMLKit</code> to generate TOML from a <code>Dictionary</code>.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKGenerator/#properties","title":"Properties","text":"Name Type Read-Only CurrentLevel <code>Integer</code> Indents(0) <code>String</code> IsInArray <code>Boolean</code> KeyStack() <code>String</code> mIsInArrayCount <code>Integer</code> OutputArr() <code>String</code> StringEncoderMB <code>MemoryBlock</code> USLocale <code>Locale</code>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKGenerator/#methods","title":"Methods","text":"Name Parameters Returns AddKeyAndValue key As <code>String</code>, value As <code>Variant</code>, toArr() As <code>String</code> Constructor ConvertToString d As <code>Dictionary</code> <code>String</code> ConvertToString arr() As <code>Variant</code> <code>String</code> ConvertToString value As <code>Variant</code> <code>String</code> EncodeArray value As <code>Variant</code> <code>Variant()</code> EncodeDateTime dt As <code>DateTime</code> <code>String</code> EncodeDictionary sourceDict As <code>Dictionary</code> <code>Dictionary</code> EncodeDouble value As <code>Double</code> <code>String</code> EncodeInteger value As <code>Integer</code> <code>String</code> EncodeValue source As <code>Variant</code> <code>Variant</code> Generate sourceDict As <code>Dictionary</code> <code>String</code> IndentForCurrentLevel <code>String</code> IsDictionaryArray value As <code>Variant</code> <code>Boolean</code> ProcessTOMLDictionary tomlDict As <code>Dictionary</code> SortKeyArray keyArr() As <code>String</code>, valueArr() As <code>Variant</code> ToBasicString mbIn As <code>MemoryBlock</code>, isKey As <code>Boolean</code> <code>String</code>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKGenerator/#constants","title":"Constants","text":"Name Type kComma <code>String</code> kCommaAndSpace <code>String</code> kCurlyBraceClose <code>String</code> kCurlyBraceOpen <code>String</code> kDot <code>String</code> kEqualsWithSpaces <code>String</code> kFalse <code>String</code> kIndent <code>String</code> kQuote <code>String</code> kSpace <code>String</code> kSquareBracketClose <code>String</code> kSquareBracketCloseDoubleWithSpace <code>String</code> kSquareBracketCloseWithSpace <code>String</code> kSquareBracketOpen <code>String</code> kSquareBracketOpenAndSpace <code>String</code> kSquareBracketOpenDoubleAndSpace <code>String</code> kTrue <code>String</code> kUnderscore <code>String</code> <p>kComma As String The <code>,</code> character.</p> <p>kCommaAndSpace As String The <code>,</code> character combination.</p> <p>kCurlyBraceClose As String The <code>}</code> character.</p> <p>kCurlyBraceOpen As String The <code>{</code> character.</p> <p>kDot As String The <code>.</code> character.</p> <p>kEqualsWithSpaces As String The <code>=</code> character combination.</p> <p>kFalse As String The <code>false</code> string.</p> <p>kIndent As String The indent character.</p> <p>kQuote As String The <code>\"</code> character.</p> <p>kSpace As String The space character.</p> <p>kSquareBracketClose As String The <code>]</code> character.</p> <p>kSquareBracketCloseDoubleWithSpace As String The <code>]]</code> character combination.</p> <p>kSquareBracketCloseWithSpace As String The <code>]</code> character combination.</p> <p>kSquareBracketOpen As String The <code>[</code> character.</p> <p>kSquareBracketOpenAndSpace As String The <code>[</code> character combination.</p> <p>kSquareBracketOpenDoubleAndSpace As String The <code>[[</code> character combination.</p> <p>kTrue As String The <code>true</code> string.</p> <p>kUnderscore As String The <code>_</code> character.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKGenerator/#property-descriptions","title":"Property Descriptions","text":"<p>CurrentLevel As Integer</p> <p>The current level.</p> <p>Indents(0) As String</p> <p>This property is shared.</p> <p>Stores the indent for the current level.</p> <p>IsInArray As Boolean</p> <p>True if the generator is currently within an array.</p> <p>KeyStack() As String</p> <p>The key stack.</p> <p>mIsInArrayCount As Integer</p> <p>Internal use.</p> <p>OutputArr() As String</p> <p>Holds the string being built.</p> <p>StringEncoderMB As MemoryBlock</p> <p>A <code>MemoryBlock</code> used to encode strings.</p> <p>USLocale As Locale</p> <p>This property is shared.</p> <p>The US locale.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKGenerator/#method-descriptions","title":"Method Descriptions","text":"<p>AddKeyAndValue(key As String, value As Variant, toArr() As String) Internal use.</p> <p>Constructor()</p> <p>The default constructor.</p> <p>ConvertToString(d As Dictionary) As String</p> <p>Returns a string representation of <code>d</code>.</p> <p>ConvertToString(arr() As Variant) As String</p> <p>Returns a string representation of <code>arr()</code>.</p> <p>ConvertToString(value As Variant) As String</p> <p>Returns a string representation of <code>value</code>.</p> <p>EncodeArray(value As Variant) As Variant()</p> <p>Internal use. Encodes an array.</p> <p>EncodeDateTime(dt As DateTime) As String</p> <p>Internal use. Encodes a <code>DateTime</code>.</p> <p>EncodeDictionary(sourceDict As Dictionary) As Dictionary</p> <p>Internal use. Encodes a <code>Dictionary</code>.</p> <p>EncodeDouble(value As Double) As String</p> <p>Internal use. Encodes a <code>Double</code>.</p> <p>EncodeInteger(value As Integer) As String</p> <p>Internal use. Encodes an <code>Integer</code>.</p> <p>EncodeValue(source As Variant) As Variant</p> <p>Internal use. Encodes a <code>Variant</code> value.</p> <p>Generate(sourceDict As Dictionary) As String</p> <p>Generates TOML from <code>sourceDict</code>.</p> <p>IndentForCurrentLevel() As String</p> <p>Returns the indent for the current level.</p> <p>IsDictionaryArray(value As Variant) As Boolean</p> <p>Internal use. Returns True if <code>value</code> is a <code>Dictionary</code> array.</p> <p>ProcessTOMLDictionary(tomlDict As Dictionary)</p> <p>Internal use. Processes a TOML dictionary.</p> <p>SortKeyArray(keyArr() As String, valueArr() As Variant) This method is shared.</p> <p>Internal delegate method for sorting an array.</p> <p>ToBasicString(mbIn As MemoryBlock, isKey As Boolean) As String</p> <p>Internal use. Returns <code>mbln</code> as a string.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKInlineDictionary/","title":"TKInlineDictionary","text":"<p>Inherits <code>Dictionary</code></p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKInlineDictionary/#description","title":"Description","text":"<p>Represents a TOML inline dictionary.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKInlineDictionary/#methods","title":"Methods","text":"Name Parameters Returns CaseDelegate key1 As <code>Variant</code>, key2 As <code>Variant</code> <code>Integer</code> Constructor ParamArray entries() As <code>Pair</code>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKInlineDictionary/#method-descriptions","title":"Method Descriptions","text":"<p>CaseDelegate(key1 As Variant, key2 As Variant) As Integer This method is shared.</p> <p>Internal use delegate for sorting an array.</p> <p>Constructor(ParamArray entries() As Pair)</p> <p>Constructor that takes an optional array of <code>entries</code>.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalDateTime/","title":"TKLocalDateTime","text":"<p>Inherits <code>DateTime</code></p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalDateTime/#description","title":"Description","text":"<p>Represents a TOML local DateTime.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalTime/","title":"TKLocalTime","text":""},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalTime/#description","title":"Description","text":"<p>Represents a TOML local time.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalTime/#properties","title":"Properties","text":"Name Type Read-Only Hour <code>Integer</code> \u2714 mHour <code>Integer</code> Minute <code>Integer</code> \u2714 mMinute <code>Integer</code> mNanosecond <code>Integer</code> mSecond <code>Integer</code> mSecondsFromMidnight <code>Double</code> mStringValue <code>String</code> Nanosecond <code>Integer</code> \u2714 Second <code>Integer</code> \u2714 SecondsFromMidnight <code>Double</code> \u2714 ToString <code>String</code> \u2714"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalTime/#methods","title":"Methods","text":"Name Parameters Returns Constructor hour As <code>Integer</code>, minute As <code>Integer</code>, second As <code>Integer</code>, nanosecond As <code>Integer</code> Constructor copyFrom As <code>TKLocalTime</code> FromString timeString As <code>String</code> <code>TKLocalTime</code> Now <code>TKLocalTime</code> Operator_Convert <code>String</code>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalTime/#property-descriptions","title":"Property Descriptions","text":"<p>Hour As Integer</p> <p>The hour.</p> <p>mHour As Integer</p> <p>Backing field for the computed <code>Hour</code> property.</p> <p>Minute As Integer</p> <p>The minute.</p> <p>mMinute As Integer</p> <p>Backing field for the <code>Minute</code> computed property.</p> <p>mNanosecond As Integer</p> <p>Backing field for the <code>Nanosecond</code> computed property.</p> <p>mSecond As Integer</p> <p>Backing field for the <code>Second</code> computed property.</p> <p>mSecondsFromMidnight As Double</p> <p>Backing field used within the <code>SecondsFromMidnight</code> computed property.</p> <p>mStringValue As String</p> <p>Backing field used within the <code>ToString</code> computed property.</p> <p>Nanosecond As Integer</p> <p>The nanosecond.</p> <p>Second As Integer</p> <p>The second.</p> <p>SecondsFromMidnight As Double</p> <p>The number of seconds from midnight.</p> <p>ToString As String</p> <p>A string representation of this local time.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKLocalTime/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(hour As Integer, minute As Integer, second As Integer, nanosecond As Integer)</p> <p>Constructs a new <code>TKLocalTime</code> from <code>hour</code>, <code>minute</code>, <code>second</code> and an optional <code>nanosecond</code>.</p> <p>Constructor(copyFrom As TKLocalTime)</p> <p>Constructs a new <code>TKLocalTime</code> from <code>copyFrom</code>.</p> <p>FromString(timeString As String) As TKLocalTime This method is shared.</p> <p>Returns a new <code>TKLocalTime</code> from a string.</p> <p>Now() As TKLocalTime This method is shared.</p> <p>Returns this moment in time as a new <code>TKLocalTime</code>.</p> <p>Operator_Convert() As String</p> <p>Returns a string representation of this object.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKParser/","title":"TKParser","text":""},{"location":"XUI/XUI%20Utilities/TOMLKit/TKParser/#description","title":"Description","text":"<p>An internal class used by the <code>TOMLKit</code> module to parse a string  into a dictionary</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKParser/#properties","title":"Properties","text":"Name Type Read-Only BaseDictionary <code>Dictionary</code> CurrentDictionary <code>Dictionary</code> DotDefinedDictionaries() <code>Dictionary</code> InlineArrays() <code>Variant</code> RowNumber <code>Integer</code> RowStartByteIndex <code>Integer</code> SectionDefinedDictionaries() <code>Dictionary</code> TOML <code>String</code> TOMLMemoryBlock <code>MemoryBlock</code>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKParser/#methods","title":"Methods","text":"Name Parameters Returns GetChunk startIndex As <code>Integer</code>, endIndex As <code>Integer</code> <code>String</code> IndexOfByte p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, targetByte As <code>Integer</code> <code>Integer</code> InterpretEscaped p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>String</code> IsDictionaryArray arr() As <code>Variant</code> <code>Boolean</code> MaybeParseArray p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, value As <code>Variant</code> <code>Boolean</code> MaybeParseBoolean p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, value As <code>Variant</code> <code>Boolean</code> MaybeParseComment p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>Boolean</code> MaybeParseDateTime p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, value As <code>Variant</code> <code>Boolean</code> MaybeParseNumber p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, value As <code>Variant</code> <code>Boolean</code> MaybeParseString p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, value As <code>Variant</code> <code>Boolean</code> MaybeParseTable p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, value As <code>Variant</code> <code>Boolean</code> MaybeRaiseIllegalCharacterException p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> MaybeRaiseInvalidUnderscoreException p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> MaybeRaiseUnexpectedCharException p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, expectedByte As <code>Integer</code> MaybeRaiseUnexpectedEOLException p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> Parse toml As <code>String</code> <code>Dictionary</code> ParseBasicString p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>String</code> ParseBinary p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>Integer</code> ParseHex p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>Integer</code> ParseKeyAndValueIntoDictionary p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, intoDict As <code>Dictionary</code>, allowInline As <code>Boolean</code> ParseKeys p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>String()</code> ParseLiteralString p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>String</code> ParseNextRow p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> ParseOctal p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>Integer</code> ParseValue p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> <code>Variant</code> RaiseDuplicateKeyException key As <code>String</code> RaiseException msg As <code>String</code> RaiseIllegalCharacterException byteIndex As <code>Integer</code> RaiseIllegalKeyException RaiseUnexpectedCharException p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>, expectedByte As <code>Integer</code> RaiseUnexpectedEndOfDataException SkipToNextRow p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code> SkipWhitespace p As <code>Ptr</code>, lastByteIndex As <code>Integer</code>, byteIndex As <code>Integer</code>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKParser/#constants","title":"Constants","text":"Name Type kErrorUnexpectedEOL <code>String</code> <p>kErrorUnexpectedEOL As String Unexpected EOL error message.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKParser/#property-descriptions","title":"Property Descriptions","text":"<p>BaseDictionary As Dictionary</p> <p>Internal use.</p> <p>CurrentDictionary As Dictionary</p> <p>Internal use.</p> <p>DotDefinedDictionaries() As Dictionary</p> <p>Internal use.</p> <p>InlineArrays() As Variant</p> <p>Internal use.</p> <p>RowNumber As Integer</p> <p>Internal use.</p> <p>RowStartByteIndex As Integer</p> <p>Internal use.</p> <p>SectionDefinedDictionaries() As Dictionary</p> <p>Internal use.</p> <p>TOML As String</p> <p>Internal use.</p> <p>TOMLMemoryBlock As MemoryBlock</p> <p>Internal use.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TKParser/#method-descriptions","title":"Method Descriptions","text":"<p>GetChunk(startIndex As Integer, endIndex As Integer) As String</p> <p>Internal use.</p> <p>IndexOfByte(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, targetByte As Integer) As Integer</p> <p>Gets the index of the target byte in the row. Will stop at EOL or a comment.</p> <p>InterpretEscaped(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As String</p> <p>Internal use. Will raise an exception if it's not a valid escape character.</p> <p>IsDictionaryArray(arr() As Variant) As Boolean</p> <p>Internal use.</p> <p>MaybeParseArray(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, value As Variant) As Boolean</p> <p>Internal use.</p> <p>MaybeParseBoolean(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, value As Variant) As Boolean</p> <p>Internal use.</p> <p>MaybeParseComment(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As Boolean</p> <p>Internal use.</p> <p>Should skip whitespace before calling this.</p> <p>MaybeParseDateTime(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, value As Variant) As Boolean</p> <p>Internal use.</p> <p>MaybeParseNumber(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, value As Variant) As Boolean</p> <p>Internal use.</p> <p>MaybeParseString(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, value As Variant) As Boolean</p> <p>Internal use.</p> <p>MaybeParseTable(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, value As Variant) As Boolean</p> <p>Internal use.</p> <p>MaybeRaiseIllegalCharacterException(p As Ptr, lastByteIndex As Integer, byteIndex As Integer)</p> <p>Internal use.</p> <p>MaybeRaiseInvalidUnderscoreException(p As Ptr, lastByteIndex As Integer, byteIndex As Integer)</p> <p>Internal use.</p> <p>MaybeRaiseUnexpectedCharException(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, expectedByte As Integer)</p> <p>Internal use.</p> <p>MaybeRaiseUnexpectedEOLException(p As Ptr, lastByteIndex As Integer, byteIndex As Integer)</p> <p>Internal use.</p> <p>Parse(toml As String) As Dictionary</p> <p>Parses a TOML document string into a <code>Dictionary</code>.</p> <p>ParseBasicString(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As String</p> <p>Internal use.</p> <p>ParseBinary(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As Integer</p> <p>Internal use.</p> <p>ParseHex(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As Integer</p> <p>Internal use.</p> <p>ParseKeyAndValueIntoDictionary(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, intoDict As Dictionary, allowInline As Boolean)</p> <p>Internal use.</p> <p>ParseKeys(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As String()</p> <p>Internal use.</p> <p>Should be at the first non-whitespace position.</p> <p>ParseLiteralString(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As String</p> <p>Internal use.</p> <p>ParseNextRow(p As Ptr, lastByteIndex As Integer, byteIndex As Integer)</p> <p>Internal use.</p> <p>ParseOctal(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As Integer</p> <p>Internal use.</p> <p>ParseValue(p As Ptr, lastByteIndex As Integer, byteIndex As Integer) As Variant</p> <p>Internal use.</p> <p>RaiseDuplicateKeyException(key As String)</p> <p>Internal use.</p> <p>RaiseException(msg As String)</p> <p>Internal use.</p> <p>RaiseIllegalCharacterException(byteIndex As Integer)</p> <p>Internal use.</p> <p>RaiseIllegalKeyException()</p> <p>Internal use.</p> <p>RaiseUnexpectedCharException(p As Ptr, lastByteIndex As Integer, byteIndex As Integer, expectedByte As Integer)</p> <p>Internal use.</p> <p>RaiseUnexpectedEndOfDataException()</p> <p>Internal use.</p> <p>SkipToNextRow(p As Ptr, lastByteIndex As Integer, byteIndex As Integer)</p> <p>Internal use.</p> <p>SkipWhitespace(p As Ptr, lastByteIndex As Integer, byteIndex As Integer)</p> <p>Internal use.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/","title":"TOMLKit","text":""},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#description","title":"Description","text":"<p>A module for reading and writing TOML data.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#classes","title":"Classes","text":"Name TKException TKGenerator TKInlineDictionary TKLocalDateTime TKLocalTime TKParser"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#properties","title":"Properties","text":"Name Type Read-Only RxDateTimeString <code>RegEx</code> \u2714 RxLocalDateString <code>RegEx</code> \u2714 RxTimeString <code>RegEx</code> \u2714 Version <code>XUISemanticVersion</code> \u2714"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#methods","title":"Methods","text":"Name Parameters Returns GenerateTOML dict As <code>Dictionary</code> <code>String</code> ParseTOML toml As <code>String</code> <code>Dictionary</code> RegExMatchToDateTime match As <code>RegExMatch</code> <code>DateTime</code> RegExMatchToLocalTime match As <code>RegExMatch</code> <code>TKLocalTime</code>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#constants","title":"Constants","text":"Name Type kBillion <code>Double</code> kByteBackslash <code>Double</code> kByteBackspace <code>Double</code> kByteCapA <code>Double</code> kByteCapE <code>Double</code> kByteCapF <code>Double</code> kByteCapT <code>Double</code> kByteCapU <code>Double</code> kByteCapZ <code>Double</code> kByteColon <code>Double</code> kByteComma <code>Double</code> kByteCurlyBraceClose <code>Double</code> kByteCurlyBraceOpen <code>Double</code> kByteDot <code>Double</code> kByteEOL <code>Double</code> kByteEquals <code>Double</code> kByteFormFeed <code>Double</code> kByteHash <code>Double</code> kByteHyphen <code>Double</code> kByteLineFeed <code>Double</code> kByteLowA <code>Double</code> kByteLowB <code>Double</code> kByteLowE <code>Double</code> kByteLowF <code>Double</code> kByteLowI <code>Double</code> kByteLowL <code>Double</code> kByteLowN <code>Double</code> kByteLowO <code>Double</code> kByteLowR <code>Double</code> kByteLowS <code>Double</code> kByteLowT <code>Double</code> kByteLowU <code>Double</code> kByteLowX <code>Double</code> kByteLowZ <code>Double</code> kByteNine <code>Double</code> kByteOne <code>Double</code> kBytePlus <code>Double</code> kByteQuoteDouble <code>Double</code> kByteQuoteSingle <code>Double</code> kByteReturn <code>Double</code> kByteSeven <code>Double</code> kByteSpace <code>Double</code> kByteSquareBracketClose <code>Double</code> kByteSquareBracketOpen <code>Double</code> kByteTab <code>Double</code> kByteUnderscore <code>Double</code> kByteZero <code>Double</code> kMillion <code>Double</code> VERSION_MAJOR <code>Double</code> VERSION_MINOR <code>Double</code> VERSION_PATCH <code>Double</code> <p>kBillion As Double A billion.</p> <p>kByteBackslash As Double The decimal ASCII value of the <code>\\</code> character.</p> <p>kByteBackspace As Double The decimal ASCII value of the backspace character.</p> <p>kByteCapA As Double The decimal ASCII value of the <code>A</code> character.</p> <p>kByteCapE As Double The decimal ASCII value of the <code>E</code> character.</p> <p>kByteCapF As Double The decimal ASCII value of the <code>F</code> character.</p> <p>kByteCapT As Double The decimal ASCII value of the <code>T</code> character.</p> <p>kByteCapU As Double The decimal ASCII value of the <code>U</code> character.</p> <p>kByteCapZ As Double The decimal ASCII value of the <code>Z</code> character.</p> <p>kByteColon As Double The decimal ASCII value of the <code>:</code> character.</p> <p>kByteComma As Double The decimal ASCII value of the <code>,</code> character.</p> <p>kByteCurlyBraceClose As Double The decimal ASCII value of the <code>}</code> character.</p> <p>kByteCurlyBraceOpen As Double The decimal ASCII value of the <code>{</code> character.</p> <p>kByteDot As Double The decimal ASCII value of the <code>.</code> character.</p> <p>kByteEOL As Double The decimal ASCII value of the EOL character.</p> <p>kByteEquals As Double The decimal ASCII value of the <code>=</code> character.</p> <p>kByteFormFeed As Double The decimal ASCII value of the form feed character.</p> <p>kByteHash As Double The decimal ASCII value of the <code>#</code> character.</p> <p>kByteHyphen As Double The decimal ASCII value of the <code>-</code> character.</p> <p>kByteLineFeed As Double The decimal ASCII value of the line feed character.</p> <p>kByteLowA As Double The decimal ASCII value of the <code>a</code> character.</p> <p>kByteLowB As Double The decimal ASCII value of the <code>b</code> character.</p> <p>kByteLowE As Double The decimal ASCII value of the <code>e</code> character.</p> <p>kByteLowF As Double The decimal ASCII value of the <code>f</code> character.</p> <p>kByteLowI As Double The decimal ASCII value of the <code>i</code> character.</p> <p>kByteLowL As Double The decimal ASCII value of the <code>l</code> character.</p> <p>kByteLowN As Double The decimal ASCII value of the <code>n</code> character.</p> <p>kByteLowO As Double The decimal ASCII value of the <code>o</code> character.</p> <p>kByteLowR As Double The decimal ASCII value of the <code>r</code> character.</p> <p>kByteLowS As Double The decimal ASCII value of the <code>s</code> character.</p> <p>kByteLowT As Double The decimal ASCII value of the <code>t</code> character.</p> <p>kByteLowU As Double The decimal ASCII value of the <code>u</code> character.</p> <p>kByteLowX As Double The decimal ASCII value of the <code>x</code> character.</p> <p>kByteLowZ As Double The decimal ASCII value of the <code>z</code> character.</p> <p>kByteNine As Double The decimal ASCII value of the <code>9</code> character.</p> <p>kByteOne As Double The decimal ASCII value of the <code>1</code> character.</p> <p>kBytePlus As Double The decimal ASCII value of the <code>+</code> character.</p> <p>kByteQuoteDouble As Double The decimal ASCII value of the <code>\"</code> character.</p> <p>kByteQuoteSingle As Double The decimal ASCII value of the <code>'</code> character.</p> <p>kByteReturn As Double The decimal ASCII value of the carriage return character.</p> <p>kByteSeven As Double The decimal ASCII value of the <code>7</code> character.</p> <p>kByteSpace As Double The decimal ASCII value of the <code></code> character.</p> <p>kByteSquareBracketClose As Double The decimal ASCII value of the <code>]</code> character.</p> <p>kByteSquareBracketOpen As Double The decimal ASCII value of the <code>[</code> character.</p> <p>kByteTab As Double The decimal ASCII value of the horizontal tab character.</p> <p>kByteUnderscore As Double The decimal ASCII value of the <code>_</code> character.</p> <p>kByteZero As Double The decimal ASCII value of the <code>0</code> character.</p> <p>kMillion As Double A million.</p> <p>VERSION_MAJOR As Double The major version.</p> <p>VERSION_MINOR As Double The minor version.</p> <p>VERSION_PATCH As Double The patch version.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#property-descriptions","title":"Property Descriptions","text":"<p>RxDateTimeString As RegEx</p> <p>The regex for parsing a DateTime.</p> <p>RxLocalDateString As RegEx</p> <p>The regex for parsing a local date.</p> <p>RxTimeString As RegEx</p> <p>The regex for parsing time.</p> <p>Version As XUISemanticVersion</p> <p>The current version.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#method-descriptions","title":"Method Descriptions","text":"<p>GenerateTOML(dict As Dictionary) As String</p> <p>Converts a dictionary to a TOML document.</p> <p>ParseTOML(toml As String) As Dictionary</p> <p>Parses a TOML document into a dictionary and returns it.</p> <p>RegExMatchToDateTime(match As RegExMatch) As DateTime</p> <p>Converts a <code>RegExMatch</code> instance to a <code>DateTime</code> instance.</p> <p>RegExMatchToLocalTime(match As RegExMatch) As TKLocalTime</p> <p>Converts a <code>RegExMatch</code> instance to a <code>TKLocalTime</code> instance.</p>"},{"location":"XUI/XUI%20Utilities/TOMLKit/TOMLKit/#acknowledgements","title":"Acknowledgements","text":"<p>Ported from <code>M_TOML</code>, written by Kem Tekinay which can be found at:</p> <p>https://github.com/ktekinay/Xojo-TOML</p> <p>I have renamed and rewritten small parts to better fit with my preferred coding style but all  credit is due to Kem.</p>"},{"location":"XUI/XUICodeEditor/XUICECaretData/","title":"XUICECaretData","text":""},{"location":"XUI/XUICodeEditor/XUICECaretData/#description","title":"Description","text":"<p>Contains data computed during the drawing of the current caret line that is  required when during the caret if the caret is of the block type.</p>"},{"location":"XUI/XUICodeEditor/XUICECaretData/#properties","title":"Properties","text":"Name Type Read-Only Character <code>String</code> Style <code>XUICETokenStyle</code>"},{"location":"XUI/XUICodeEditor/XUICECaretData/#methods","title":"Methods","text":"Name Parameters Returns Constructor character As <code>String</code>, style As <code>XUICETokenStyle</code>"},{"location":"XUI/XUICodeEditor/XUICECaretData/#property-descriptions","title":"Property Descriptions","text":"<p>Character As String</p> <p>The character behind the caret.</p> <p>Style As XUICETokenStyle</p> <p>The style of the character behind the caret.</p>"},{"location":"XUI/XUICodeEditor/XUICECaretData/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(character As String, style As XUICETokenStyle)</p> <p>Default constructor.</p> <ul> <li><code>character</code> is the character behind the caret. </li> <li><code>style</code> is the style of the character behind the caret. </li> </ul>"},{"location":"XUI/XUICodeEditor/XUICEDelimiter/","title":"XUICEDelimiter","text":""},{"location":"XUI/XUICodeEditor/XUICEDelimiter/#description","title":"Description","text":"<p>Represents a pair of opening and closing delimiter tokens.</p>"},{"location":"XUI/XUICodeEditor/XUICEDelimiter/#properties","title":"Properties","text":"Name Type Read-Only Closer <code>XUICELineToken</code> Opener <code>XUICELineToken</code>"},{"location":"XUI/XUICodeEditor/XUICEDelimiter/#methods","title":"Methods","text":"Name Parameters Returns Constructor openingDelimiter As <code>XUICELineToken</code>, closingDelimiter As <code>XUICELineToken</code> EquivalentTo other As <code>XUICEDelimiter</code> <code>Boolean</code>"},{"location":"XUI/XUICodeEditor/XUICEDelimiter/#enumerations","title":"Enumerations","text":"<p>Types</p> <p>The supported types of delimiter.</p> Name LCurly LParen LSquare RCurly RParen RSquare None"},{"location":"XUI/XUICodeEditor/XUICEDelimiter/#property-descriptions","title":"Property Descriptions","text":"<p>Closer As XUICELineToken</p> <p>The closing delimiter token in this matched pair of delimiters.</p> <p>Opener As XUICELineToken</p> <p>The opening delimiter token in this matched pair of delimiters.</p>"},{"location":"XUI/XUICodeEditor/XUICEDelimiter/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(openingDelimiter As XUICELineToken, closingDelimiter As XUICELineToken)</p> <p>Default constructor.</p> <ul> <li><code>openingDelimiter</code> is the opening delimiter token in this matched pair of delimiters. </li> <li><code>closingDelimiter</code> is the closing delimiter token in this matched pair of delimiters. </li> </ul> <p>EquivalentTo(other As XUICEDelimiter) As Boolean</p> <p>True if <code>other</code> is considered equivalent to this delimiter.</p>"},{"location":"XUI/XUICodeEditor/XUICELine/","title":"XUICELine","text":"<p>Inherits <code>XUITextLine</code></p>"},{"location":"XUI/XUICodeEditor/XUICELine/#description","title":"Description","text":"<p>Represents a single line of text in the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/XUICELine/#properties","title":"Properties","text":"Name Type Read-Only ColumnLength <code>Integer</code> \u2714 Contents <code>String</code> \u2714 IndentLevel <code>Integer</code> IsContinuation <code>Boolean</code> IsOnlyNonAlpha <code>Boolean</code> \u2714 LineManager <code>XUICELineManager</code> \u2714 mIndentLevel <code>Integer</code> mOwnerRef <code>WeakRef</code> mTextEndX <code>Double</code> mTextStartX <code>Double</code> mTextStartY <code>Double</code> mTopLeftY <code>Double</code> TextEndX <code>Double</code> \u2714 TextStartX <code>Double</code> \u2714 TextStartY <code>Double</code> \u2714 Tokens() <code>XUICELineToken</code> Unmatched <code>Boolean</code> Value <code>String</code> \u2714"},{"location":"XUI/XUICodeEditor/XUICELine/#methods","title":"Methods","text":"Name Parameters Returns CharactersFromCaretPos startPos As <code>Integer</code>, count As <code>Integer</code> <code>String</code> CharactersFromColumn startCol As <code>Integer</code>, count As <code>Integer</code> <code>String</code> CharactersInSelection selection As <code>XUITextSelection</code> <code>String</code> CharactersToColumn column As <code>Integer</code> <code>String</code> ChopCharacters count As <code>Integer</code> <code>String</code> ChopCharactersFrom column As <code>Integer</code>, shouldTokenise As <code>Boolean</code> <code>String</code> ColumnAtX x As <code>Integer</code>, g As <code>Graphics</code> <code>Integer</code> Constructor owner As <code>XUICELineManager</code>, lineNumber As <code>Integer</code>, startPos As <code>Integer</code>, lineContents As <code>String</code>, shouldTokenise As <code>Boolean</code> DeleteCharacterAtCaretPos caretPos As <code>Integer</code>, shouldTokenise As <code>Boolean</code> DeleteCharactersFromCaretPos caretPos As <code>Integer</code>, count As <code>Integer</code>, shouldTokenise As <code>Boolean</code> DeleteCharactersFromEnd count As <code>Integer</code>, shouldTokenise As <code>Boolean</code> Draw g As <code>Graphics</code>, topLeftX As <code>Double</code>, topLeftY As <code>Double</code>, lineH As <code>Double</code>, gutterWidth As <code>Double</code>, containsCaret As <code>Boolean</code>, maxLineNumWidth As <code>Double</code> DrawBlockLines g As <code>Graphics</code>, topLeftX As <code>Double</code>, topLeftY As <code>Double</code>, lineH As <code>Double</code> DrawDebugHighlight g As <code>Graphics</code>, topLeftX As <code>Double</code>, topLeftY As <code>Double</code>, lineH As <code>Double</code>, gutterWidth As <code>Double</code> DrawLineNumber g As <code>Graphics</code>, topLeftY As <code>Double</code>, gutterWidth As <code>Double</code>, lineH As <code>Double</code> DrawSelection selectedColumns As <code>XUISelectedColumns</code>, g As <code>Graphics</code>, topLeftX As <code>Double</code>, topLeftY As <code>Double</code>, lineH As <code>Double</code>, gutterWidth As <code>Double</code> DrawText g As <code>Graphics</code>, s As <code>String</code>, x As <code>Double</code>, y As <code>Double</code>, wrapWidth As <code>Double</code>, condense As <code>Boolean</code> FirstToken <code>XUICELineToken</code> HighlightDelimiter delimiter As <code>XUICELineToken</code>, g As <code>Graphics</code>, topLeftX As <code>Double</code>, topLeftY As <code>Double</code>, lineH As <code>Double</code>, gutterWidth As <code>Double</code> IndentWidth charWidth As <code>Double</code> <code>Double</code> Insert column As <code>Integer</code>, s As <code>String</code> <code>Integer</code> LastToken <code>XUICELineToken</code> Left count As <code>Integer</code> <code>String</code> NextWordEnd caretPos As <code>Integer</code> <code>Integer</code> PopCharacters count As <code>Integer</code>, shouldTokenise As <code>Boolean</code> <code>String</code> PreviousWordStart caretPos As <code>Integer</code> <code>Integer</code> Right count As <code>Integer</code> <code>String</code> SetContents value As <code>String</code>, shouldTokenise As <code>Boolean</code> TokenAtColumn column As <code>Integer</code> <code>XUICELineToken</code> Tokenise TokenSelectionOverlap t As <code>XUICELineToken</code>, selection As <code>XUISelectedColumns</code> <code>Pair</code> WidthToCaretPos caretPos As <code>Integer</code>, g As <code>Graphics</code> <code>Double</code> WidthToColumn column As <code>Integer</code>, g As <code>Graphics</code>, ignoreIdentation As <code>Boolean</code> <code>Double</code> WordToColumn column As <code>Integer</code> <code>String</code>"},{"location":"XUI/XUICodeEditor/XUICELine/#constants","title":"Constants","text":"Name Type COLUMNS_PER_INDENT <code>Double</code> ELLIPSIS <code>String</code> <p>COLUMNS_PER_INDENT As Double The number of columns each level of indentation is equivalent to.</p> <p>ELLIPSIS As String The string to draw when there are autocomplete suggestions available.</p>"},{"location":"XUI/XUICodeEditor/XUICELine/#property-descriptions","title":"Property Descriptions","text":"<p>ColumnLength As Integer</p> <p>The length of this line in columns. A combination of the number of characters and the amount of indentation.</p> <p>Contents As String</p> <p>The read only contents of this line. To alter use <code>SetContents()</code>.</p> <p>IndentLevel As Integer</p> <p>This line's level of indentation (0 = no indentation). Clamped to &gt;= 0.</p> <p>IsContinuation As Boolean</p> <p>True if this line is a continuation of the line above.</p> <p>IsOnlyNonAlpha As Boolean</p> <p>True if this line contains only non-alphanumeric characters.</p> <p>LineManager As XUICELineManager</p> <p>The line manager that owns this line.</p> <p>mIndentLevel As Integer</p> <p>Backing field for the <code>IndentLevel</code> computed property.</p> <p>mOwnerRef As WeakRef</p> <p>A weak reference to this line's owning line manager.</p> <p>mTextEndX As Double</p> <p>Backing field for the <code>TextEndX</code> computed property.</p> <p>mTextStartX As Double</p> <p>Backing field for the <code>TextStartX</code> computed property.</p> <p>mTextStartY As Double</p> <p>Backing field for the computed <code>TextStartY</code> property.</p> <p>mTopLeftY As Double</p> <p>The top left Y coordinate that this line is drawn at.</p> <p>TextEndX As Double</p> <p>The X coordinate of the end of this line's text computed during its last draw.</p> <p>TextStartX As Double</p> <p>The X coordinate of the start of this line's text computed during its last draw. Includes indentation.</p> <p>TextStartY As Double</p> <p>The Y coordinate of the start of this line's text computed during its last draw.</p> <p>Tokens() As XUICELineToken</p> <p>This line's tokens.</p> <p>Unmatched As Boolean</p> <p>True if this line is part of an unmatched block structure.</p> <p>Value As String</p> <p>We override <code>TextLine.Value</code> because the editor should use <code>Contents</code> instead.</p>"},{"location":"XUI/XUICodeEditor/XUICELine/#method-descriptions","title":"Method Descriptions","text":"<p>CharactersFromCaretPos(startPos As Integer, count As Integer) As String</p> <p>Returns <code>count</code> characters from this line starting at <code>startPos</code>.</p> <p>CharactersFromColumn(startCol As Integer, count As Integer) As String</p> <p>Returns <code>count</code> characters from this line starting at the 0-based <code>startCol</code>.</p> <p>CharactersInSelection(selection As XUITextSelection) As String</p> <p>Returns the characters enclosed by the passed <code>selection</code>.</p> <p>CharactersToColumn(column As Integer) As String</p> <p>Returns the characters up to but not including <code>column</code>.</p> <p>ChopCharacters(count As Integer) As String</p> <p>Chops (removes) <code>count</code> characters from the end of the line and returns them.</p> <p>ChopCharactersFrom(column As Integer, shouldTokenise As Boolean) As String</p> <p>Chops (removes) the characters from <code>column</code> to the end of the line and returns them.</p> <p>ColumnAtX(x As Integer, g As Graphics) As Integer</p> <p>Returns the column at pixel position <code>x</code> where <code>0</code> is the line start. Returns <code>-1</code> if out of range.</p> <p><code>x</code> is relative to this line's <code>TextStartX</code> property. <code>g</code> is the graphics context used to measure text width.</p> <p>Constructor(owner As XUICELineManager, lineNumber As Integer, startPos As Integer, lineContents As String, shouldTokenise As Boolean)</p> <p>Default constructor.</p> <ul> <li><code>owner</code> is the <code>XUILineManager</code> that manages this line. Will be kept as a <code>WeakRef</code>. </li> <li><code>lineNumber</code> is this line's 1-based line number. </li> <li><code>startPos</code> is the 0-based position in the source code that this line begins at. </li> <li><code>lineContents</code> is the contents of this line. </li> <li><code>shouldTokenise</code> determines if this line should be tokenised by the line manager's code editor's active formatter upon instantiation. Default is <code>True</code>. </li> </ul> <p>DeleteCharacterAtCaretPos(caretPos As Integer, shouldTokenise As Boolean)</p> <p>Deletes the character at <code>caretPos</code> from this line.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range.</p> <p>DeleteCharactersFromCaretPos(caretPos As Integer, count As Integer, shouldTokenise As Boolean)</p> <p>Deletes <code>count</code> characters from this line beginning at <code>caretPos</code>.</p> <p>DeleteCharactersFromEnd(count As Integer, shouldTokenise As Boolean)</p> <p>Deletes <code>count</code> characters from the end of the line.</p> <p>Draw(g As Graphics, topLeftX As Double, topLeftY As Double, lineH As Double, gutterWidth As Double, containsCaret As Boolean, maxLineNumWidth As Double)</p> <p>Draws this line to <code>g</code>.</p> <ul> <li><code>topLeftX</code> is the X coord of the top left corner of the line. </li> <li><code>topLeftY</code> is the Y coord of the top left corner of the line. </li> <li><code>lineH</code> is the height of the line. </li> <li><code>gutterWidth</code> is the width of the gutter. </li> <li><code>maxLineNumWidth</code> is the width of the bounding rectangle around the longest line number in the gutter. </li> </ul> <p>A line includes the gutter, any spacing for indentation and the line contents itself.</p> <p>Anti-aliasing needs to be disabled whenever we draw on Windows except for text (which looks rubbish if anti-aliasing is off).</p> <p>Assumes that the graphics context has anti-aliasing off in Windows builds.</p> <p>DrawBlockLines(g As Graphics, topLeftX As Double, topLeftY As Double, lineH As Double)</p> <p>Draws this line's block lines.</p> <p>Block lines are a visual representation of the connections between blocks. We can quickly achieve this by drawing a vertical line at each indentation level.</p> <p>DrawDebugHighlight(g As Graphics, topLeftX As Double, topLeftY As Double, lineH As Double, gutterWidth As Double)</p> <p>Draws a rounded rect around the text on this line. Used to highlight a line that is being debugged.</p> <p>DrawLineNumber(g As Graphics, topLeftY As Double, gutterWidth As Double, lineH As Double)</p> <p>Draws a the line number to the gutter in <code>g</code>.</p> <p><code>gutterWidth</code> is the width of the this line's canvas' gutter. <code>topLeftY</code> is the top left corner of the line. <code>lineH</code> is the height of the line.</p> <p>DrawSelection(selectedColumns As XUISelectedColumns, g As Graphics, topLeftX As Double, topLeftY As Double, lineH As Double, gutterWidth As Double)</p> <p>Draws the selected columns within this line.</p> <p>DrawText(g As Graphics, s As String, x As Double, y As Double, wrapWidth As Double, condense As Boolean)</p> <p>Draws an anti-aliased string <code>s</code> at the specified location in <code>g</code>.</p> <ul> <li><code>s</code> is the string to draw. </li> <li><code>x</code> is the x coordinate. </li> <li><code>y</code> is the y coordinate of the text baseline. </li> <li><code>wrapWidth</code> is the width the text will wrap at. </li> <li>If <code>condense</code> is True then the string may be truncated with an ellipsis. </li> </ul> <p>This is essentially a wrapper to the <code>Graphics.DrawText</code> method. It exists because we need to disable anti-aliasing in the graphics contexts on Windows but it needs to be re-enabled when drawing text. Rather than litter the code base with calls to toggle the anti-aliasing state, this method does it for us.</p> <p>FirstToken() As XUICELineToken</p> <p>Returns the first token of this line or Nil if there are no tokens.</p> <p>HighlightDelimiter(delimiter As XUICELineToken, g As Graphics, topLeftX As Double, topLeftY As Double, lineH As Double, gutterWidth As Double)</p> <p>Highlights the passed <code>delimiter</code> on this line.</p> <p>IndentWidth(charWidth As Double) As Double</p> <p>Returns the width of the indentation at the front of this line.</p> <p><code>charWidth</code> is the current width of a character in the editor.</p> <p>Insert(column As Integer, s As String) As Integer</p> <p>Inserts <code>s</code> into this line at <code>column</code>. Returns the caret position following the insertion.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>column</code> is out of range. Assumes that <code>s</code> is not empty and does not contain newlines.</p> <p>LastToken() As XUICELineToken</p> <p>Returns the last token on this line or Nil if there are no tokens.</p> <p>Left(count As Integer) As String</p> <p>Returns <code>count</code> left-most characters from this line.</p> <p>NextWordEnd(caretPos As Integer) As Integer</p> <p>Returns the caret position of the end of the word after the <code>caretPos</code>.</p> <p>If the caret is within the last word on this line then it returns the end position for the line.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range for this line.</p> <p>PopCharacters(count As Integer, shouldTokenise As Boolean) As String</p> <p>Pops the specified number of characters from the end of this line and returns them.</p> <p>If count &gt; number of characters on the line we return the whole line. Assumes <code>count &gt; 0</code>.</p> <p>PreviousWordStart(caretPos As Integer) As Integer</p> <p>Returns the caret pos of the start of the word before the <code>caretPos</code>.</p> <p>If <code>caretPos</code> is within the first word on the line then it returns the line start position. Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range for this line.</p> <p>Right(count As Integer) As String</p> <p>Returns <code>count</code> right-most characters from this line.</p> <p>SetContents(value As String, shouldTokenise As Boolean)</p> <p>Sets the contents of this line to <code>value</code>, marks the line as dirty and optionally triggers tokenisation.</p> <p>Assumes that there are no newline characters in <code>value</code>.</p> <p>TokenAtColumn(column As Integer) As XUICELineToken</p> <p>Returns the token at the specified <code>column</code> or Nil if there isn't one.</p> <p>Tokenise()</p> <p>Re-tokenises this line and any others required (depending on mode).</p> <p>TokenSelectionOverlap(t As XUICELineToken, selection As XUISelectedColumns) As Pair</p> <p>Returns a <code>Pair</code> containing the first and last columns of the token contained by the selection or <code>Nil</code> if the token is not selected.</p> <p><code>t</code> is the token we want to check if enclosed by the passed selection. <code>selection</code> is a selection representing the columns in this line that are selected.</p> <p>The returned pair's structure is: <code>Left</code> = 0-based column of this token where the selection starts <code>Right</code> = 0-based column of this token where the selection ends.</p> <p>Let's suppose the token has the lexeme \"Hello\" and characters \"ell\" are selected by the passed selection. We will return <code>1:3</code> (as the first character selected is at column 1 and the last character selected is at column 3). The important thing to remember is that the returned columns are local to this token, not the line.</p> <p>Assumes that at least part of this line is within the passed selection so there is at least a chance the passed token is selected.</p> <p>WidthToCaretPos(caretPos As Integer, g As Graphics) As Double</p> <p>Returns the width of the text of this line up and including the character at <code>caretPos</code> in <code>g</code>.</p> <p><code>caretPos</code> is the 0-based caret position, not the offset of the character in this line. Assumes the <code>g</code> has the correct font size and family set.</p> <p>WidthToColumn(column As Integer, g As Graphics, ignoreIdentation As Boolean) As Double</p> <p>The width of this line up to <code>column</code>.</p> <p><code>g</code> is required to compute the width of the string.</p> <p>Does not include the gutter width. Does not factor in padding around the text or the gutter.</p> <p>WordToColumn(column As Integer) As String</p> <p>Returns the word running up to (not-including) 0-based <code>column</code>. Returns \"\" if there isn't one.</p>"},{"location":"XUI/XUICodeEditor/XUICELineManager/","title":"XUICELineManager","text":""},{"location":"XUI/XUICodeEditor/XUICELineManager/#description","title":"Description","text":"<p>Every <code>XUICodeEditor</code> has a Line Manager that is represented by an instance of this class.</p> <p>It is the responsibility of the line manager to handle the manipulation of lines of code  within an editor.</p>"},{"location":"XUI/XUICodeEditor/XUICELineManager/#properties","title":"Properties","text":"Name Type Read-Only Formatter <code>XUICEFormatter</code> \u2714 LastChanged <code>Double</code> \u2714 LineCount <code>Integer</code> \u2714 Lines() <code>XUICELine</code> LongestLine <code>XUICELine</code> \u2714 mCaretPosCache <code>Integer</code> mDidDeleteContiguousLines <code>Boolean</code> mLastChanged <code>Double</code> mLongestLine <code>XUICELine</code> mNearestDelimiters <code>XUICEDelimiter</code> mOwnerRef <code>WeakRef</code> NearestDelimiters <code>XUICEDelimiter</code> \u2714 Owner <code>XUICodeEditor</code> \u2714"},{"location":"XUI/XUICodeEditor/XUICELineManager/#methods","title":"Methods","text":"Name Parameters Returns AdjustLineOffsets firstLineNumber As <code>Integer</code>, value As <code>Integer</code>, lineNumberDelta As <code>Integer</code> CodeLineCount <code>Integer</code> Constructor owner As <code>XUICodeEditor</code> Contents <code>String</code> ContentsFrom startLineNumber As <code>Integer</code>, endLineNum As <code>Integer</code> <code>String</code> DeleteAllLines allowUndo As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> DeleteLineAt lineNumber As <code>Integer</code>, adjustBy As <code>Integer</code> DeleteSelection allowUndo As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code>, undoMessage As <code>String</code> InsertCharacter caretPos As <code>Integer</code>, char As <code>String</code>, allowUndo As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> InsertLineAt lineNumber As <code>Integer</code>, contents As <code>String</code>, adjustBy As <code>Integer</code> <code>XUICELine</code> InsertText caretPos As <code>Integer</code>, s As <code>String</code>, allowUndo As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> IsEmpty <code>Boolean</code> LastLine <code>XUICELine</code> LineAt lineNumber As <code>Integer</code> <code>XUICELine</code> LineForCaretPos caretPos As <code>Integer</code> <code>XUICELine</code> LineNumberForCaretPos pos As <code>Integer</code> <code>Integer</code> NextWordEnd caretPos As <code>Integer</code> <code>Integer</code> PreviousWordStart caretPos As <code>Integer</code> <code>Integer</code> ReplaceSelection s As <code>String</code>, allowUndo As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> SelectionToString selection As <code>XUITextSelection</code> <code>String</code> TokeniseAllLines UpdateLongestLine UpdateNearestDelimiters caretPos As <code>Integer</code>"},{"location":"XUI/XUICodeEditor/XUICELineManager/#property-descriptions","title":"Property Descriptions","text":"<p>Formatter As XUICEFormatter</p> <p>The formatter used to format text in the editor.</p> <p>LastChanged As Double</p> <p>The time stamp (in microseconds) that the last change took place.</p> <p>LineCount As Integer</p> <p>The number of lines in the editor.</p> <p>Lines() As XUICELine</p> <p>The lines of text managed by the line manager.</p> <p>LongestLine As XUICELine</p> <p>The current longest line.</p> <p>mCaretPosCache As Integer</p> <p>Cached value of the <code>caretPos</code> argument passed to <code>UpdateNearestDelimiters</code>.</p> <p>mDidDeleteContiguousLines As Boolean</p> <p>True if the line manager just deleted contiguous lines.</p> <p>mLastChanged As Double</p> <p>Backing field for the <code>LastChanged</code> computed property.</p> <p>mLongestLine As XUICELine</p> <p>Backing field for the <code>LongestLine</code> property.</p> <p>mNearestDelimiters As XUICEDelimiter</p> <p>Stores the last computed matching delimiters. Used internally within <code>UpdateNearestDelimiters()</code>. May be Nil.</p> <p>mOwnerRef As WeakRef</p> <p>A weak reference to the <code>XUICodeEditor</code> that owns this line manager.</p> <p>NearestDelimiters As XUICEDelimiter</p> <p>Stores the last computed matching delimiters to the caret. May be Nil.</p> <p>Owner As XUICodeEditor</p> <p>The <code>XUICodeEditor</code> that owns this line manager.</p>"},{"location":"XUI/XUICodeEditor/XUICELineManager/#method-descriptions","title":"Method Descriptions","text":"<p>AdjustLineOffsets(firstLineNumber As Integer, value As Integer, lineNumberDelta As Integer)</p> <p>Adjusts the start and end positions of every line beginning at <code>firstLineNumber</code> by <code>value</code>.</p> <p><code>lineNumberDelta</code> is the number to adjust the line numbers by.</p> <p>CodeLineCount() As Integer</p> <p>Returns the number of lines of code (excludes empty lines and comment-only lines).</p> <p>Constructor(owner As XUICodeEditor)</p> <p><code>owner</code> is the <code>XUICodeEditor</code> that owns this line manager.</p> <p>Contents() As String</p> <p>Returns the contents of every line.</p> <p>ContentsFrom(startLineNumber As Integer, endLineNum As Integer) As String</p> <p>Returns the contents of every line in the passed range (inclusive).</p> <ul> <li><code>startLineNum</code> is the 1-based number of the line to start at. </li> <li><code>endLineNum</code> is the 1-based number of the line to end at. </li> </ul> <p>If <code>endLineNum = -1</code> then we get all contents from <code>startLineNum</code> to the last line.</p> <p>DeleteAllLines(allowUndo As Boolean, shouldInvalidate As Boolean, raiseContentsDidChange As Boolean)</p> <p>Deletes all lines and updates the caret position.</p> <p>If <code>allowUndo</code> is True then this action will be undoable. If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated.</p> <p>DeleteLineAt(lineNumber As Integer, adjustBy As Integer)</p> <p>Deletes the line at <code>lineNumber</code> and adjusts subsequent line offsets by <code>adjustBy</code>. Does not move the caret.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>lineNumber</code> is out of range.</p> <p>DeleteSelection(allowUndo As Boolean, shouldInvalidate As Boolean, raiseContentsDidChange As Boolean, undoMessage As String)</p> <p>Deletes the current text selection and updates the caret position.</p> <ul> <li>If <code>allowUndo</code> is True then this action should be pushed to the undo manager. </li> <li>If <code>shouldInvalidate</code> is True then the canvas will be invalidated after the deletion. </li> <li>If <code>raiseContentsDidChange</code> is True then we will raise the editor's <code>ContentsDidChange event</code>. </li> <li><code>undoMessage</code> is an optional override message for undoable actions. </li> </ul> <p>There are 6 scenarios:</p> <ol> <li>A single whole line is selected. </li> <li>Only text on a single line is selected. </li> <li>Contiguous complete lines are selected. </li> <li>All of the start line but only part of the end line is selected. </li> <li>Part of the start line and all of the end line is selected. </li> <li>Part of the start line and part of the end line are selected. </li> </ol> <p>InsertCharacter(caretPos As Integer, char As String, allowUndo As Boolean, raiseContentsDidChange As Boolean)</p> <p>Inserts <code>char</code> at <code>caretPos</code> and updates the the owning editor's caret position.</p> <p>If <code>allowUndo</code> is True then this action will be undoable. If <code>raiseContentsDidChange</code> is True then we raise the editor's <code>ContentsDidChange</code> event.</p> <p>For performance, we make a number of assumptions:</p> <ul> <li>Assumes that <code>char</code> is a single character. </li> <li>Assumes <code>0 &lt;= caretPos &gt; (LastLine.EndPosition + 1)</code>. </li> <li>Assumes <code>char</code> is not a newline character. </li> </ul> <p>InsertLineAt(lineNumber As Integer, contents As String, adjustBy As Integer) As XUICELine</p> <p>Creates and inserts a new line at <code>lineNumber</code> containing <code>contents</code>, returning the new line.</p> <p><code>adjustBy</code> is an (additional) value to adjust all subsequent line offsets by. Raises an <code>InvalidArgumentException</code> if <code>lineNumber</code> is out of range.</p> <p>InsertText(caretPos As Integer, s As String, allowUndo As Boolean, shouldInvalidate As Boolean, raiseContentsDidChange As Boolean)</p> <p>Inserts <code>s</code> into the editor at <code>caretPos</code>. <code>s</code> may contain newlines. Updates the caret position.</p> <p>If <code>allowUndo</code> is True then push this action to the undo manager. If <code>shouldInvalidate</code> is False then the canvas will not immediately invalidate. If <code>raiseContentsDidChange</code> is True then we'll raise the editor's <code>ContentsDidChange</code> event.</p> <p>Assumes that <code>s</code> is not empty. <code>s</code> may contain newlines. If present they must have been standardised to <code>&amp;u0A</code>. Clears any selection present prior to the insertion.</p> <p>There are three scenarios:</p> <ol> <li>A solitary newline character is being inserted. </li> <li>The text to insert does not contain newlines. </li> <li>The text to insert contains at least one newline. </li> </ol> <p>IsEmpty() As Boolean</p> <p>True if there is no text in the canvas.</p> <p>There may be no text but there will always be at least on line.</p> <p>LastLine() As XUICELine</p> <p>The last (i.e. highest numbered) line.</p> <p>LineAt(lineNumber As Integer) As XUICELine</p> <p>Returns the line at <code>lineNumber</code> or Nil.</p> <p>LineForCaretPos(caretPos As Integer) As XUICELine</p> <p>Returns the line that would contain the 0-based <code>caretPos</code>.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range.</p> <p>LineNumberForCaretPos(pos As Integer) As Integer</p> <p>Returns the line number for the specified caret position.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>pos</code> is out of range.</p> <p>NextWordEnd(caretPos As Integer) As Integer</p> <p>Returns the caret position of the end of the word after the <code>caretPos</code>.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range for this line.</p> <p>PreviousWordStart(caretPos As Integer) As Integer</p> <p>Returns the caret pos of the start of the word before the <code>caretPos</code>.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range for this line.</p> <p>ReplaceSelection(s As String, allowUndo As Boolean, shouldInvalidate As Boolean, raiseContentsDidChange As Boolean)</p> <p>Replaces the text selection in the owning canvas with <code>s</code> and updates the caret position.</p> <p>If <code>allowUndo</code> is True then this replacement will be undoable. If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated. If <code>raiseContentsDidChange</code> is True then we raise the editor's <code>ContentsDidChange</code> event.</p> <p>Assumes that if <code>s</code> contains newlines that they have been standardised to UNIX (<code>&amp;u0A</code>).</p> <p>SelectionToString(selection As XUITextSelection) As String</p> <p>Returns <code>selection</code> as a string. May return an empty string.</p> <p>TokeniseAllLines()</p> <p>Re-tokenises every line.</p> <p>UpdateLongestLine()</p> <p>Updates the cache of the longest line.</p> <p>UpdateNearestDelimiters(caretPos As Integer)</p> <p>Updates the nearest delimiters to the specified <code>caretPos</code>.</p>"},{"location":"XUI/XUICodeEditor/XUICELineToken/","title":"XUICELineToken","text":""},{"location":"XUI/XUICodeEditor/XUICELineToken/#description","title":"Description","text":"<p>Represents a token in the code editor.</p> <p>Whenever text is entered / edited in the code editor it is tokenised into tokens. A token is the atomic unit of styling in the editor and they are generated by formatters.</p> <p>Tokens contain data that tells the code editor their position in the code editor and their type. A token's type determine's how it is styled by the editor (e.g. the colour of text,  whether it is bold, etc).</p>"},{"location":"XUI/XUICodeEditor/XUICELineToken/#properties","title":"Properties","text":"Name Type Read-Only EndLocal <code>Integer</code> \u2714 FallbackType <code>String</code> Length <code>Integer</code> LineNumber <code>Integer</code> mData <code>Dictionary</code> StartAbsolute <code>Integer</code> StartLocal <code>Integer</code> Type <code>String</code>"},{"location":"XUI/XUICodeEditor/XUICELineToken/#methods","title":"Methods","text":"Name Parameters Returns Constructor startAbsolute As <code>Integer</code>, startLocal As <code>Integer</code>, length As <code>Integer</code>, lineNumber As <code>Integer</code>, type As <code>String</code>, fallback As <code>String</code> HasDataKey key As <code>String</code> <code>Boolean</code> LookupData key As <code>String</code>, default As <code>Variant</code> <code>Variant</code> SetData key As <code>String</code>, value As <code>Variant</code>"},{"location":"XUI/XUICodeEditor/XUICELineToken/#constants","title":"Constants","text":"Name Type TYPE_COMMENT <code>String</code> TYPE_DEFAULT <code>String</code> TYPE_ERROR <code>String</code> TYPE_IDENTIFIER <code>String</code> TYPE_KEYWORD <code>String</code> TYPE_NUMBER <code>String</code> TYPE_OPERATOR <code>String</code> TYPE_STRING <code>String</code> <p>TYPE_COMMENT As String The generic comment token type. Guaranteed to be defined within a valid theme.</p> <p>TYPE_DEFAULT As String The default token type. Guaranteed to be defined within a valid theme.</p> <p>TYPE_ERROR As String The error token type. Guaranteed to be defined within a valid theme.</p> <p>TYPE_IDENTIFIER As String The generic identifier token type. Guaranteed to be defined within a valid theme.</p> <p>TYPE_KEYWORD As String The generic keyword token type. Guaranteed to be defined within a valid theme.</p> <p>TYPE_NUMBER As String The generic number token type. Guaranteed to be defined within a valid theme.</p> <p>TYPE_OPERATOR As String The generic operator token type. Guaranteed to be defined within a valid theme.</p> <p>TYPE_STRING As String The generic string token type. Guaranteed to be defined within a valid theme.</p>"},{"location":"XUI/XUICodeEditor/XUICELineToken/#property-descriptions","title":"Property Descriptions","text":"<p>EndLocal As Integer</p> <p>0-based position of the end of this token local to this line.</p> <p>FallbackType As String</p> <p>The token type to use if the current theme doesn't support the primary \"Type\" style.</p> <p>Length As Integer</p> <p>The length of this token in characters.</p> <p>LineNumber As Integer</p> <p>The 1-based number of the line this token belongs to.</p> <p>mData As Dictionary</p> <p>Backing dictionary for any arbitrary data this token may contain.</p> <p>StartAbsolute As Integer</p> <p>The absolute 0-based start position of this token in the original source text.</p> <p>StartLocal As Integer</p> <p>The 0-based local position of this token where <code>0</code> is the start of this line.</p> <p>Type As String</p> <p>This token's type. Used to determine how to style it.</p>"},{"location":"XUI/XUICodeEditor/XUICELineToken/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(startAbsolute As Integer, startLocal As Integer, length As Integer, lineNumber As Integer, type As String, fallback As String)</p> <p>Default constructor.</p> <ul> <li><code>startAbsolute</code> is the absolute 0-based position of the start of this token within the original source code. </li> <li><code>startLocal</code> is the 0-based position on this token's line that this token starts at. </li> <li><code>length</code> is the length of this token in characters. </li> <li><code>lineNumber</code> is the 1-based line number this token is on. </li> <li><code>type</code> is this token's type as a string. This is used in themes to style the token in the editor. </li> <li><code>fallback</code> is the token's fallback type to use if <code>type</code> isn't available in the current theme. </li> </ul> <p>HasDataKey(key As String) As Boolean</p> <p>True if this token has data with the specified (case insensitive) <code>key</code>.</p> <p>LookupData(key As String, default As Variant) As Variant</p> <p>Returns the data value associated with <code>key</code> or <code>default</code> if there is no matching key.</p> <p>SetData(key As String, value As Variant)</p> <p>Sets the data <code>key</code> to <code>value</code>. Will overwrite the existing value of <code>key</code> if already set.</p>"},{"location":"XUI/XUICodeEditor/XUICELocation/","title":"XUICELocation","text":""},{"location":"XUI/XUICodeEditor/XUICELocation/#description","title":"Description","text":"<p>Represents a location within the code editor.</p>"},{"location":"XUI/XUICodeEditor/XUICELocation/#properties","title":"Properties","text":"Name Type Read-Only ActuallyOverLine <code>Boolean</code> CaretPos <code>Integer</code> Column <code>Integer</code> Line <code>XUICELine</code>"},{"location":"XUI/XUICodeEditor/XUICELocation/#methods","title":"Methods","text":"Name Parameters Returns Constructor line As <code>XUICELine</code>, caretPos As <code>Integer</code>, column As <code>Integer</code>, overLine As <code>Boolean</code> ToString <code>String</code>"},{"location":"XUI/XUICodeEditor/XUICELocation/#property-descriptions","title":"Property Descriptions","text":"<p>ActuallyOverLine As Boolean</p> <p>True if the location is actually over the line (not before or after it).</p> <p>CaretPos As Integer</p> <p>0-based caret position.</p> <p>Column As Integer</p> <p>0-based column.</p> <p>Line As XUICELine</p> <p>The line referenced by this location.</p>"},{"location":"XUI/XUICodeEditor/XUICELocation/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(line As XUICELine, caretPos As Integer, column As Integer, overLine As Boolean)</p> <p>Default constructor.</p> <ul> <li>The <code>line</code> containing this location. </li> <li><code>caretPos</code> is the 0-based caret position at this location. </li> <li><code>overLine</code> is <code>True</code> if the location is actually over a line (and not past its left or right edge). </li> </ul> <p>ToString() As String</p> <p>Returns a string representation of this location (<code>line, col</code>).</p>"},{"location":"XUI/XUICodeEditor/XUICETheme/","title":"XUICETheme","text":""},{"location":"XUI/XUICodeEditor/XUICETheme/#description","title":"Description","text":"<p>One of the the most powerful features offered by the <code>XUICodeEditor</code> is the ability to customise its appearance. This is done through themes that are represented by  the <code>XUICETheme</code> class.</p>"},{"location":"XUI/XUICodeEditor/XUICETheme/#properties","title":"Properties","text":"Name Type Read-Only Author <code>String</code> AutocompleteHorizontalPadding <code>Integer</code> AutocompleteOptionColor <code>ColorGroup</code> AutocompleteOptionVerticalPadding <code>Integer</code> AutocompletePopupBackgroundColor <code>ColorGroup</code> AutocompletePopupBorderColor <code>ColorGroup</code> AutocompletePopupBorderRadius <code>Integer</code> AutocompletePrefixStyle <code>XUICETokenStyle</code> \u2714 AutocompleteVerticalPadding <code>Integer</code> BackgroundColor <code>ColorGroup</code> BlockLineColor <code>ColorGroup</code> CaretColor <code>ColorGroup</code> CurrentLineHighlightColor <code>ColorGroup</code> CurrentLineNumberColor <code>ColorGroup</code> DebugLineColor <code>ColorGroup</code> DefaultStyle <code>XUICETokenStyle</code> \u2714 DelimitersBorderColor <code>ColorGroup</code> DelimitersFillColor <code>ColorGroup</code> DelimitersHaveBorder <code>Boolean</code> DelimitersHaveFillColor <code>Boolean</code> DelimitersHaveUnderline <code>Boolean</code> DelimitersUnderlineColor <code>ColorGroup</code> Description <code>String</code> HasAutocompletePopupBorder <code>Boolean</code> LineNumberColor <code>ColorGroup</code> Name <code>String</code> ScrollbarBackgroundColor <code>ColorGroup</code> ScrollbarBorderColor <code>ColorGroup</code> ScrollbarThumbColor <code>ColorGroup</code> SelectedAutocompleteOptionBackgroundColor <code>ColorGroup</code> SelectedAutocompleteOptionColor <code>ColorGroup</code> SelectionColor <code>ColorGroup</code> Styles <code>Dictionary</code> UnmatchedBlockLineColor <code>ColorGroup</code> Version <code>XUISemanticVersion</code>"},{"location":"XUI/XUICodeEditor/XUICETheme/#methods","title":"Methods","text":"Name Parameters Returns AddTokenStyle styleName As <code>String</code>, style As <code>XUICETokenStyle</code> AssertIsTokenDictionary d As <code>Dictionary</code> AssertPathType d As <code>Dictionary</code>, path As <code>String</code>, type As <code>String</code> AssertValidThemeDictionary d As <code>Dictionary</code> Constructor CreateTheme d As <code>Dictionary</code> <code>XUICETheme</code> FromFile f As <code>FolderItem</code> <code>XUICETheme</code> RemoveTokenStyle styleName As <code>String</code> <code>Boolean</code> StyleForName styleName As <code>String</code> <code>XUICETokenStyle</code> StyleForToken token As <code>XUICELineToken</code> <code>XUICETokenStyle</code> StyleNames <code>String()</code> ToTOML <code>String</code>"},{"location":"XUI/XUICodeEditor/XUICETheme/#constants","title":"Constants","text":"Name Type DEFAULT_BLOCK_LINE_COLOR_LIGHT <code>Color</code> DEFAULT_CURRENT_LINE_HIGHLIGHT_COLOR_DARK <code>Color</code> DEFAULT_CURRENT_LINE_HIGHLIGHT_COLOR_LIGHT <code>Color</code> DEFAULT_DEBUG_LINE_COLOR_DARK <code>Color</code> DEFAULT_DEBUG_LINE_COLOR_LIGHT <code>Color</code> DEFAULT_UNMATCHED_BLOCK_LINE_COLOR_DARK <code>Color</code> DEFAULT_UNMATCHED_BLOCK_LINE_COLOR_LIGHT <code>Color</code> TYPE_ARRAY <code>String</code> TYPE_BOOLEAN <code>String</code> TYPE_COLOR <code>String</code> TYPE_COLORGROUP <code>String</code> TYPE_DATETIME <code>String</code> TYPE_DICTIONARY <code>String</code> TYPE_DOUBLE <code>String</code> TYPE_INTEGER <code>String</code> TYPE_NIL <code>String</code> TYPE_STRING <code>String</code> <p>DEFAULT_BLOCK_LINE_COLOR_LIGHT As Color The light mode default colour for block lines if none is provided by the theme.</p> <p>DEFAULT_CURRENT_LINE_HIGHLIGHT_COLOR_DARK As Color The dark mode default colour for the current line highlight if none is provided by the theme.</p> <p>DEFAULT_CURRENT_LINE_HIGHLIGHT_COLOR_LIGHT As Color The light mode default colour for the current line highlight if none is provided by the theme.</p> <p>DEFAULT_DEBUG_LINE_COLOR_DARK As Color The dark mode default colour for the current line highlight if none is provided by the theme.</p> <p>DEFAULT_DEBUG_LINE_COLOR_LIGHT As Color The dark mode default colour for the current line highlight if none is provided by the theme.</p> <p>DEFAULT_UNMATCHED_BLOCK_LINE_COLOR_DARK As Color The dark mode default colour for unmatched block lines if none is provided by the theme.</p> <p>DEFAULT_UNMATCHED_BLOCK_LINE_COLOR_LIGHT As Color The light mode default colour for unmatched block lines if none is provided by the theme.</p> <p>TYPE_ARRAY As String Internally used when asserting if a theme is valid.</p> <p>TYPE_BOOLEAN As String Internally used when asserting if a theme is valid.</p> <p>TYPE_COLOR As String Internally used when asserting if a theme is valid.</p> <p>TYPE_COLORGROUP As String Internally used when asserting if a theme is valid.</p> <p>TYPE_DATETIME As String Internally used when asserting if a theme is valid.</p> <p>TYPE_DICTIONARY As String Internally used when asserting if a theme is valid.</p> <p>TYPE_DOUBLE As String Internally used when asserting if a theme is valid.</p> <p>TYPE_INTEGER As String Internally used when asserting if a theme is valid.</p> <p>TYPE_NIL As String Internally used when asserting if a theme is valid.</p> <p>TYPE_STRING As String Internally used when asserting if a theme is valid.</p>"},{"location":"XUI/XUICodeEditor/XUICETheme/#property-descriptions","title":"Property Descriptions","text":"<p>Author As String</p> <p>The name of this theme's author.</p> <p>AutocompleteHorizontalPadding As Integer</p> <p>The number of pixels to pad to the left and right of autocomplete options in the autocomplete popup.</p> <p>AutocompleteOptionColor As ColorGroup</p> <p>The colour of the text of unselected options in the autocomplete popup.</p> <p>AutocompleteOptionVerticalPadding As Integer</p> <p>The number of pixels to pad above and below autocomplete options in the autocomplete popup.</p> <p>AutocompletePopupBackgroundColor As ColorGroup</p> <p>The colour to use for the background of the autocomplete popup.</p> <p>AutocompletePopupBorderColor As ColorGroup</p> <p>If the autocomplete popup has a border then this is its colour.</p> <p>AutocompletePopupBorderRadius As Integer</p> <p>The border radius of the autocomplete popup.</p> <p>AutocompletePrefixStyle As XUICETokenStyle</p> <p>The style to use for the autocompletion prefix.</p> <p>AutocompleteVerticalPadding As Integer</p> <p>The number of pixels to pad above the first and below the last autocomplete options in the autocomplete popup.</p> <p>BackgroundColor As ColorGroup</p> <p>The colour to use for the editor's background.</p> <p>BlockLineColor As ColorGroup</p> <p>The colour to use for block lines.</p> <p>CaretColor As ColorGroup</p> <p>The colour of the editor's caret.</p> <p>CurrentLineHighlightColor As ColorGroup</p> <p>The colour to use to highlight the current line in the editor (if enabled).</p> <p>CurrentLineNumberColor As ColorGroup</p> <p>The colour of the line number of the current line.</p> <p>DebugLineColor As ColorGroup</p> <p>The colour to use to highlight a line that is being debugged.</p> <p>DefaultStyle As XUICETokenStyle</p> <p>The default token style.</p> <p>DelimitersBorderColor As ColorGroup</p> <p>If drawing current delimiters and <code>DelimitersHaveBorderColor</code> = True` then this is the colour of their border.</p> <p>DelimitersFillColor As ColorGroup</p> <p>If drawing current delimiters and <code>DelimitersHaveFillColor = True</code> then this is the colour their background will be.</p> <p>DelimitersHaveBorder As Boolean</p> <p>If True then when the current delimiters are drawn they should have a border of color <code>DelimitersBorderColor</code>.</p> <p>DelimitersHaveFillColor As Boolean</p> <p>If True then when drawing the current delimiters, they should have a background fill color of <code>DelimitersFillColor</code>.</p> <p>DelimitersHaveUnderline As Boolean</p> <p>If True then when the current delimiters are drawn they should be underlined with <code>DelimitersUnderlineColor</code>.</p> <p>DelimitersUnderlineColor As ColorGroup</p> <p>If drawing current delimiters and <code>DelimitersHaveUnderline</code> = True` then this is the colour of the underline.</p> <p>Description As String</p> <p>A description of this theme.</p> <p>HasAutocompletePopupBorder As Boolean</p> <p>True if the autocomplete popup has a border.</p> <p>LineNumberColor As ColorGroup</p> <p>The colour of the line numbers.</p> <p>Name As String</p> <p>This theme's name.</p> <p>ScrollbarBackgroundColor As ColorGroup</p> <p>The colour of the background of the scrollbar track. Only relevant on Windows and Linux.</p> <p>ScrollbarBorderColor As ColorGroup</p> <p>The colour of the border of the scrollbar track. Only relevant on Windows and Linux.</p> <p>ScrollbarThumbColor As ColorGroup</p> <p>The colour of the thumb of the scrollbar track. Only relevant on Windows and Linux.</p> <p>SelectedAutocompleteOptionBackgroundColor As ColorGroup</p> <p>The background colour for the currently selected option in the autocomplete popup.</p> <p>SelectedAutocompleteOptionColor As ColorGroup</p> <p>The colour of the text of the currently selected option in the autocomplete popup.</p> <p>SelectionColor As ColorGroup</p> <p>The colour to use for the background of selected text.</p> <p>Styles As Dictionary</p> <p>This theme's styles. Key = Style name, Value = MCETokenStyle.</p> <p>UnmatchedBlockLineColor As ColorGroup</p> <p>The colour to use for block lines that are unmatched.</p> <p>Version As XUISemanticVersion</p> <p>This theme's version.</p>"},{"location":"XUI/XUICodeEditor/XUICETheme/#method-descriptions","title":"Method Descriptions","text":"<p>AddTokenStyle(styleName As String, style As XUICETokenStyle)</p> <p>Adds a token style to this theme.</p> <p>Assumes <code>styleName</code> is not empty and <code>style</code> is not Nil.</p> <p>AssertIsTokenDictionary(d As Dictionary) This method is shared.</p> <p>Asserts that <code>d</code> is a valid token dictionary. Raises an <code>InvalidArgumentException</code> if it's not.</p> <p>AssertPathType(d As Dictionary, path As String, type As String) This method is shared.</p> <p>Asserts that <code>d</code> contains <code>path</code> and the terminal key of <code>path</code> is the correct <code>type</code>. Raises an <code>InvalidArgumentException</code> if not.</p> <p>AssertValidThemeDictionary(d As Dictionary) This method is shared.</p> <p>Asserts that <code>d</code> contains the required properties for a valid theme. Raises an <code>InvalidArgumentException</code> if not.</p> <p>Constructor()</p> <p>Default constructor.</p> <p>CreateTheme(d As Dictionary) As XUICETheme This method is shared.</p> <p>Returns a theme constructed from a validated theme dictionary <code>d</code>.</p> <p>Assumes that <code>d</code> has already been validated using <code>AssertValidThemeDictionary</code>.</p> <p>FromFile(f As FolderItem) As XUICETheme This method is shared.</p> <p>Loads a theme from a TOML theme file.</p> <p>RemoveTokenStyle(styleName As String) As Boolean</p> <p>Removes the style <code>styleName</code> from this theme if it exists. Returns True if successful or False if there is not style with that name.</p> <p>StyleForName(styleName As String) As XUICETokenStyle</p> <p>Returns the style with the specified name or Nil if it doesn't exist.</p> <p>StyleForToken(token As XUICELineToken) As XUICETokenStyle</p> <p>Returns the style to use for the passed token type.</p> <p>If the requested primary style is not found then we try the fallback style. If that's not found we return the default style.</p> <p>StyleNames() As String()</p> <p>Returns an array of all the styles defined in this theme.</p> <p>ToTOML() As String</p> <p>Converts this theme to TOML that can be written to disk.</p>"},{"location":"XUI/XUICodeEditor/XUICETokenStyle/","title":"XUICETokenStyle","text":""},{"location":"XUI/XUICodeEditor/XUICETokenStyle/#description","title":"Description","text":"<p>Every token in the code editor generated by a formatter has an associated style,  specified by the code editor's theme. A style specifies the colour of the text, whether it is bold, etc. Token styles are represented by this class.</p>"},{"location":"XUI/XUICodeEditor/XUICETokenStyle/#properties","title":"Properties","text":"Name Type Read-Only BackgroundColour <code>ColorGroup</code> Bold <code>Boolean</code> Colour <code>ColorGroup</code> HasBackgroundColour <code>Boolean</code> Italic <code>Boolean</code> Underline <code>Boolean</code>"},{"location":"XUI/XUICodeEditor/XUICETokenStyle/#methods","title":"Methods","text":"Name Parameters Returns Clone <code>XUICETokenStyle</code> Constructor Constructor d As <code>Dictionary</code> ToTOML <code>String</code>"},{"location":"XUI/XUICodeEditor/XUICETokenStyle/#constants","title":"Constants","text":"Name Type KEY_BACKGROUND_COLOUR <code>String</code> KEY_BOLD <code>String</code> KEY_COLOUR <code>String</code> KEY_HAS_BACKGROUND_COLOUR <code>String</code> KEY_ITALIC <code>String</code> KEY_UNDERLINE <code>String</code> <p>KEY_BACKGROUND_COLOUR As String The JSON key for this style's background colour.</p> <p>KEY_BOLD As String The JSON key for this style's bold status.</p> <p>KEY_COLOUR As String The JSON key for this style's colour.</p> <p>KEY_HAS_BACKGROUND_COLOUR As String The JSON key for this style's HasBackgroundColour status.</p> <p>KEY_ITALIC As String The JSON key for this style's italic status.</p> <p>KEY_UNDERLINE As String The JSON key for this style's underline status.</p>"},{"location":"XUI/XUICodeEditor/XUICETokenStyle/#property-descriptions","title":"Property Descriptions","text":"<p>BackgroundColour As ColorGroup</p> <p>The colour of this token's background (if enabled).</p> <p>Bold As Boolean</p> <p>True if this token should be bold.</p> <p>Colour As ColorGroup</p> <p>The colour of this token's text.</p> <p>HasBackgroundColour As Boolean</p> <p>True if this style has a background colour.</p> <p>Italic As Boolean</p> <p>True if this token should be italicised.</p> <p>Underline As Boolean</p> <p>True if this token should be underlined.</p>"},{"location":"XUI/XUICodeEditor/XUICETokenStyle/#method-descriptions","title":"Method Descriptions","text":"<p>Clone() As XUICETokenStyle</p> <p>Returns a clone of this object.</p> <p>Constructor()</p> <p>Default constructor.</p> <p>Constructor(d As Dictionary)</p> <p>Instantiates a new token style from a <code>Dictionary</code>.</p> <p>Assumes that <code>ColorGroup</code> values are strings in the following format:</p> <p><code>\"&amp;hAARRGGBB\"</code> or <code>\"&amp;hAARRGGBB,&amp;hAARRGGBB\"</code></p> <p>Where <code>AA</code>, <code>RR</code>, <code>GG</code> and <code>BB</code> are the colour's alpha, red, green and blue values.</p> <p>If only one colour is provided it is used in both light and dark mode. If two colours are provided (separated by a comma) then the first is used in light mode and the second in dark mode. If two colours are provided and the OS doesn't support dark mode then the first colour is used.</p> <p>ToTOML() As String</p> <p>Returns a TOML representation of this style.</p>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/","title":"XUICodeEditor","text":"<p>Inherits <code>NSScrollViewCanvas</code></p> <p>Implements <code>XUINotificationListener</code></p>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#description","title":"Description","text":"<p>A powerful and highly customisable code editor control based on the open source <code>TextInputCanvas</code> control. It supports themes, multiple languages, autocompletion and features a robust undo engine.</p>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#properties","title":"Properties","text":"Name Type Read-Only AllowAutocomplete <code>Boolean</code> AllowAutoCompleteInComments <code>Boolean</code> AllowInertialScrolling <code>Boolean</code> AutocloseBrackets <code>Boolean</code> AutocompleteCombo <code>XUICodeEditor.AutocompleteCombos</code> AutocompleteData <code>XUICEAutocompleteData</code> AutocompletePopupFontName <code>String</code> AutocompletePopupFontSize <code>Integer</code> BackgroundColor <code>Color</code> \u2714 BlinkCaret <code>Boolean</code> BorderColor <code>ColorGroup</code> CaretColour <code>Color</code> \u2714 CaretColumn <code>Integer</code> \u2714 CaretData <code>XUICECaretData</code> CaretLineNumber <code>Integer</code> CaretPosition <code>Integer</code> CaretType <code>CaretTypes</code> CaretXCoordinate <code>Integer</code> \u2714 ClosingBracketForOpener <code>Dictionary</code> \u2714 Contents <code>String</code> \u2714 ContentType <code>XUICodeEditor.ContentTypes</code> CurrentLine <code>XUICELine</code> CurrentLineHighlightColor <code>Color</code> \u2714 CurrentLineNumberColor <code>Color</code> \u2714 CurrentSelection <code>XUITextSelection</code> CurrentUndoID <code>Integer</code> DebuggingLine <code>Integer</code> DebugLineColour <code>Color</code> \u2714 DisplayLineNumbers <code>Boolean</code> DrawBlockLines <code>Boolean</code> FirstVisibleLine <code>Integer</code> FontName <code>String</code> FontSize <code>Integer</code> Formatter <code>XUICEFormatter</code> HasBottomBorder <code>Boolean</code> HasFocus <code>Boolean</code> \u2714 HasLeftBorder <code>Boolean</code> HasRightBorder <code>Boolean</code> HasTopBorder <code>Boolean</code> HighlightCurrentLine <code>Boolean</code> HighlightDelimitersAroundCaret <code>Boolean</code> JustTokenised <code>Boolean</code> LastFullyVisibleLineNumber <code>Integer</code> \u2714 LastParseMicroseconds <code>Double</code> LineManager <code>XUICELineManager</code> LineNumberColor <code>Color</code> \u2714 LineNumberFontSize <code>Integer</code> LongestLineChanged <code>Boolean</code> mAutocompletePopup <code>XUICodeEditorAutocompletePopup</code> mBackBuffer <code>Picture</code> mBorderColor <code>ColorGroup</code> mCachedRequiredBufferWidth <code>Double</code> mCaretBlinker <code>Timer</code> mCaretPosition <code>Integer</code> mCaretType <code>CaretTypes</code> mCaretVisible <code>Boolean</code> mCurrentLine <code>XUICELine</code> mCurrentSelection <code>XUITextSelection</code> mCurrentUndoID <code>Integer</code> mDebuggingLine <code>Integer</code> mDelimiterTimer <code>Timer</code> mDisplayLineNumbers <code>Boolean</code> mDragging <code>Boolean</code> mDraggingHorizontalScrollbarThumb <code>Boolean</code> mDraggingVerticalScrollbarThumb <code>Boolean</code> mDrawBlockLines <code>Boolean</code> mFirstVisibleLine <code>Integer</code> mFontName <code>String</code> mFontSize <code>Integer</code> mFormatter <code>XUICEFormatter</code> mGraphicsScaleX <code>Double</code> mGraphicsScaleY <code>Double</code> mGutterWidth <code>Double</code> mHasBottomBorder <code>Boolean</code> mHasFocus <code>Boolean</code> mHasLeftBorder <code>Boolean</code> mHasRightBorder <code>Boolean</code> mHasTopBorder <code>Boolean</code> mHighlightCurrentLine <code>Boolean</code> mHighlightDelimitersAroundCaret <code>Boolean</code> mHorizontalScrollbar <code>Picture</code> mHorizontalScrollbarThumbBounds <code>Rect</code> MinimumAutocompletionLength <code>Integer</code> MinimumParseInterval <code>Integer</code> mIsDoubleClick <code>Boolean</code> mLastClickTicks <code>Integer</code> mLastClickWasContextual <code>Boolean</code> mLastKeyDownTicks <code>Double</code> mLastMouseDownX <code>Integer</code> mLastMouseDownY <code>Integer</code> mLastMouseDragX <code>Integer</code> mLastMouseDragY <code>Integer</code> mLastMouseUpX <code>Integer</code> mLastMouseUpY <code>Integer</code> mLastTripleClickTicks <code>Integer</code> mLineHeight <code>Double</code> mLineNumberFontSize <code>Integer</code> mLineNumWidth <code>Double</code> mLocationUnderMouse <code>XUICELocation</code> mMaxVisibleLines <code>Integer</code> mMinimumAutocompletionLength <code>Integer</code> mParseTimer <code>Timer</code> mReadOnly <code>Boolean</code> mScrollPosX <code>Integer</code> mScrollPosY <code>Integer</code> mSpacesPerTab <code>Integer</code> mSuppressAutocompletePopup <code>Boolean</code> mTheme <code>XUICETheme</code> mVerticalLinePadding <code>Integer</code> mVerticalScrollbar <code>Picture</code> mVerticalScrollbarThumbBounds <code>Rect</code> NeedsFullRedraw <code>Boolean</code> ReadOnly <code>Boolean</code> ScrollPosX <code>Integer</code> SelectionColour <code>Color</code> \u2714 SpacesPerTab <code>Integer</code> TextSelected <code>Boolean</code> \u2714 Theme <code>XUICETheme</code> UndoIDThreshold <code>Integer</code> \u2714 UndoManager <code>XUIUndoManager</code> VerticalLinePadding <code>Integer</code>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#methods","title":"Methods","text":"Name Parameters Returns AcceptCurrentAutocompleteOption AutocompleteOptionsAvailable <code>Boolean</code> CaretAtCurrentLineEnd <code>Boolean</code> CaretBlinkerAction caretBlinker As <code>Timer</code> CaretIsInComment <code>Boolean</code> Clear ClearDebuggingLine ComputeGutterWidth lineNumberWidth As <code>Double</code> <code>Double</code> Constructor ContentsDidChange CurrentSelectionAsString <code>String</code> DeleteBackward allowUndo As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> DeleteForward allowUndo As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> DeleteSelection allowUndo As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code>, undoMessage As <code>String</code> DelimiterTimerAction delimiterTimer As <code>Timer</code> DocumentSize <code>Rect</code> DrawBorders g As <code>Graphics</code> FetchAutocompleteData ForceRedraw HandleAutocompleteKeyPress HandleCtrlSpace HandleDoubleClick x As <code>Integer</code>, y As <code>Integer</code> HandleEscKey shouldInvalidate As <code>Boolean</code> HandleHorizontalScrollbarTrackClick x As <code>Integer</code>, y As <code>Integer</code> HandleReturnKey allowUndo As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> HandleTripleClick x As <code>Integer</code>, y As <code>Integer</code> HandleVerticalScrollbarTrackClick x As <code>Integer</code>, y As <code>Integer</code> HideAutocompletePopup shouldSetFocus As <code>Boolean</code> Insert s As <code>String</code>, pos As <code>Integer</code>, allowUndo As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code>, raiseContentsDidChange As <code>Boolean</code> InsertCharacter char As <code>String</code>, raiseContentsDidChange As <code>Boolean</code>, range As <code>TextRange</code> IsDoubleClick x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> IsOverHorizontalScrollbar x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> IsOverVerticalScrollbar x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> IsTripleClick x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> IsWithinHorizontalScrollbarTrack x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> IsWithinVerticalScrollbarTrack x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> LastVisibleLineNumber <code>Integer</code> LineFullyVisible line As <code>XUICELine</code> <code>Boolean</code> LineHeight <code>Double</code> LocationAtXY x As <code>Integer</code>, y As <code>Integer</code> <code>XUICELocation</code> LocationToCaretPos location As <code>XUICELocation</code> <code>Integer</code> MaxVisibleLines lineHeight As <code>Double</code> <code>Integer</code> MoveCaretDown MoveCaretLeft MoveCaretRight MoveCaretToColumn lineNumber As <code>Integer</code>, column As <code>Integer</code>, shouldInvalidate As <code>Boolean</code> MoveCaretToNextWordEnd MoveCaretToPos newPos As <code>Integer</code>, shouldInvalidate As <code>Boolean</code> MoveCaretToPreviousWordStart MoveCaretUp MoveDownAndModifySelection MoveLeftAndModifySelection MoveRightAndModifySelection MoveToBeginningOfDocument MoveToBeginningOfLine MoveToDocumentBeginningAndModifySelection MoveToDocumentEndAndModifySelection MoveToEndOfDocument MoveToEndOfLine MoveToLeftEndOfLineAndModifySelection MoveToRightEndOfLineAndModifySelection MoveUpAndModifySelection MoveWordLeftAndModifySelection MoveWordRightAndModifySelection NotificationReceived n As <code>XUINotification</code> PageDownAndModifySelection PageUpAndModifySelection PaintBlockCaret g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code> PaintCaret g As <code>Graphics</code>, pos As <code>Integer</code> ParseTimerAction parseTimer As <code>Timer</code> RebuildBackBuffer RebuildHorizontalScrollbar RebuildScrollbars RebuildVerticalScrollbar RedrawDirtyLines RegisterForNotifications ReplaceCurrentSelection s As <code>String</code> RequiredBufferWidth <code>Double</code> RequiresHorizontalScrollbar <code>Boolean</code> RequiresVerticalScrollbar <code>Boolean</code> ScrollDown linesToScroll As <code>Integer</code>, moveCaret As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code> ScrollPageDown moveCaret As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code> ScrollPageUp moveCaret As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code> ScrollToCaretPos shouldInvalidate As <code>Boolean</code> ScrollUp linesToScroll As <code>Integer</code>, moveCaret As <code>Boolean</code>, shouldInvalidate As <code>Boolean</code> SelectAll shouldInvalidate As <code>Boolean</code> SelectWhitespaceAroundCaret shouldInvalidate As <code>Boolean</code> SelectWordAtCaret shouldInvalidate As <code>Boolean</code> SetGraphicsStyle g As <code>Graphics</code>, style As <code>XUICETokenStyle</code> ShowAutocompletePopup TabToSpaces <code>String</code> Typing <code>Boolean</code> XYAtCaretPos caretPos As <code>Integer</code>, x As <code>Double</code>, y As <code>Double</code>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#events","title":"Events","text":"Name Parameters Returns AutocompleteDataForPrefix prefix As <code>String</code>, caretLine As <code>Integer</code>, caretColumn As <code>Integer</code> <code>XUICEAutocompleteData</code> ContentsDidChange DidContextualClick x As <code>Integer</code>, y As <code>Integer</code> Opening"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#constants","title":"Constants","text":"Name Type BLOCK_GUTTER_MIN_WIDTH <code>Double</code> CARET_BLINK_PERIOD <code>Double</code> DEFAULT_AUTOCOMPLETE_POPUP_FONT_SIZE <code>Double</code> DEFAULT_FONT_SIZE <code>Double</code> DEFAULT_LINE_NUMBER_FONT_SIZE <code>Double</code> DELIMITER_TIMER_PERIOD <code>Double</code> HORIZONTAL_SCROLLBAR_HEIGHT <code>Double</code> HORIZONTAL_SCROLLBAR_THUMB_HEIGHT <code>Double</code> LEFT_SCROLL_PADDING <code>Double</code> LINE_CONTENTS_LEFT_PADDING <code>Double</code> MIN_LINE_NUMBER_WIDTH <code>Double</code> PARSE_TIMER_PERIOD <code>Double</code> POPUP_PADDING <code>Double</code> RIGHT_SCROLL_PADDING <code>Double</code> SCROLLBAR_THUMB_PADDING <code>Double</code> TYPING_SPEED_TICKS <code>Double</code> UNDO_EVENT_BLOCK_SECONDS <code>Double</code> VERTICAL_SCROLLBAR_THUMB_WIDTH <code>Double</code> VERTICAL_SCROLLBAR_WIDTH <code>Double</code> VSCROLL_SENSITIVITY <code>Double</code> <p>BLOCK_GUTTER_MIN_WIDTH As Double The minimal width of the gutter containing the block indicators.</p> <p>CARET_BLINK_PERIOD As Double The interval (in ms) between caret blinks.</p> <p>DEFAULT_AUTOCOMPLETE_POPUP_FONT_SIZE As Double The default font size for the options in the autocomplete popup to use if not overridden.</p> <p>DEFAULT_FONT_SIZE As Double The default font size to use if not overridden.</p> <p>DEFAULT_LINE_NUMBER_FONT_SIZE As Double The default font size to use for line numbers if not overridden.</p> <p>DELIMITER_TIMER_PERIOD As Double The number of milliseconds between updating the nearest delimiters to the caret.</p> <p>HORIZONTAL_SCROLLBAR_HEIGHT As Double The width of the vertical scrollbar.</p> <p>HORIZONTAL_SCROLLBAR_THUMB_HEIGHT As Double The width of the vertical scrollbar thumb.</p> <p>LEFT_SCROLL_PADDING As Double The number of pixels to pad left when scrolling leftwards.</p> <p>LINE_CONTENTS_LEFT_PADDING As Double The padding between the right gutter edge and the line contents.</p> <p>MIN_LINE_NUMBER_WIDTH As Double If line numbers are not drawn, this is the minimum width of the line number section of the gutter.</p> <p>PARSE_TIMER_PERIOD As Double The number of milliseconds between checks to see if we should invoke the formatter's <code>Parse()</code> method.</p> <p>POPUP_PADDING As Double The number of pixels between the autocomplete popup and the edge of the canvas.</p> <p>RIGHT_SCROLL_PADDING As Double Fudge factor for padding the right of lines when horizontal scrolling.</p> <p>SCROLLBAR_THUMB_PADDING As Double The number of pixels to pad either side of the scrollbar thumb.</p> <p>TYPING_SPEED_TICKS As Double The number of ticks between keystrokes to still be considered as actively typing.</p> <p>UNDO_EVENT_BLOCK_SECONDS As Double The number of seconds within which undoable action will be grouped together as a single undoable action.</p> <p>VERTICAL_SCROLLBAR_THUMB_WIDTH As Double The width of the vertical scrollbar thumb.</p> <p>VERTICAL_SCROLLBAR_WIDTH As Double The width of the vertical scrollbar.</p> <p>VSCROLL_SENSITIVITY As Double Higher number = more lines scrolled when quickly scrolling vertically. Values between 1 - 3 work well.</p>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#enumerations","title":"Enumerations","text":"<p>AutocompleteCombos</p> <p>The acceptable key combinations for triggering autocompletion.</p> Name CtrlSpace Tab <p>CaretTypes</p> <p>The different types of caret the canvas supports.</p> Name Block Underscore VerticalBar <p>ContentTypes</p> <p>The type of content the editor is processing.</p> Name Markdown SourceCode"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#property-descriptions","title":"Property Descriptions","text":"<p>AllowAutocomplete As Boolean</p> <p>True if the editor supports autocompletion.</p> <p>AllowAutoCompleteInComments As Boolean</p> <p>If True then the autocomplete engine will also function inside comments.</p> <p>AllowInertialScrolling As Boolean</p> <p>If True then the canvas will vertically scroll faster if the mouse wheel is moved faster.</p> <p>AutocloseBrackets As Boolean</p> <p>If True then the editor will automatically close parentheses, square brackets and curly brackets when an opening bracket is entered and the caret is not in a comment.</p> <p>AutocompleteCombo As XUICodeEditor.AutocompleteCombos</p> <p>The keyboard shortcut used to trigger autocompletion.</p> <p>AutocompleteData As XUICEAutocompleteData</p> <p>The autocomplete options for prefix in front of the caret. May be Nil.</p> <p>AutocompletePopupFontName As String</p> <p>The name of the font family to use for options in the autocomplete popup.</p> <p>AutocompletePopupFontSize As Integer</p> <p>The autocomplete popup option font size.</p> <p>BackgroundColor As Color</p> <p>The editor's background colour.</p> <p>BlinkCaret As Boolean</p> <p>True if the caret should periodically blink.</p> <p>BorderColor As ColorGroup</p> <p>The colour of the editor's border (if enabled).</p> <p>CaretColour As Color</p> <p>The caret colour.</p> <p>CaretColumn As Integer</p> <p>The current 0-based column the caret is in.</p> <p>CaretData As XUICECaretData</p> <p>Data required for drawing the block type caret.</p> <p>CaretLineNumber As Integer</p> <p>The number of the line the caret is currently on.</p> <p>CaretPosition As Integer</p> <p>The current position of the caret in the editor (0-based).</p> <p>CaretType As CaretTypes</p> <p>The type of caret the canvas should use.</p> <p>CaretXCoordinate As Integer</p> <p>The absolute X coordinate of the caret at its current position (computed and expensive).</p> <p>ClosingBracketForOpener As Dictionary</p> <p>Maps opening brackets (e.g. \"[\") to their closer (e.g. \"]\"). Key = opening bracket (string), Value = matching closing bracket (string).</p> <p>Contents As String</p> <p>The text contents of the editor.</p> <p>ContentType As XUICodeEditor.ContentTypes</p> <p>The type of contents in the editor (Markdown or source code).</p> <p>CurrentLine As XUICELine</p> <p>The line that the caret is currently on.</p> <p>CurrentLineHighlightColor As Color</p> <p>The colour to use to highlight the current line (if enabled).</p> <p>CurrentLineNumberColor As Color</p> <p>The colour of the line number if it is the current line.</p> <p>CurrentSelection As XUITextSelection</p> <p>The currently selected text range (or Nil if nothing selected).</p> <p>CurrentUndoID As Integer</p> <p>The ID of the group of undo actions that are considered one \"event\" for the purposes of undo.</p> <p>DebuggingLine As Integer</p> <p>The line number to highlights as being currently debugged. Set to 0 if no line should be highlighted in this way.</p> <p>DebugLineColour As Color</p> <p>The colour to use when highlighting a line for debugging.</p> <p>DisplayLineNumbers As Boolean</p> <p>True if line numbers should be displayed.</p> <p>DrawBlockLines As Boolean</p> <p>If True then the editor will draw block lines for source code.</p> <p>FirstVisibleLine As Integer</p> <p>The number of the line visible at the top of the canvas. Altered by vertical scrolling.</p> <p>FontName As String</p> <p>The font family used in the canvas.</p> <p>FontSize As Integer</p> <p>The font size to use for text in the editor.</p> <p>Formatter As XUICEFormatter</p> <p>The formatter used to format text.</p> <p>HasBottomBorder As Boolean</p> <p>If True then a border will be drawn at the bottom of the editor.</p> <p>HasFocus As Boolean</p> <p>True if the editor currently has the focus.</p> <p>HasLeftBorder As Boolean</p> <p>If True then a border will be drawn at the left edge of the editor.</p> <p>HasRightBorder As Boolean</p> <p>If True then a border will be drawn at the right edge of the editor.</p> <p>HasTopBorder As Boolean</p> <p>If True then a border will be drawn at the top of the editor.</p> <p>HighlightCurrentLine As Boolean</p> <p>If True then the line the caret is currently on will be highlighted.</p> <p>HighlightDelimitersAroundCaret As Boolean</p> <p>If True then delimiters (such as <code>{</code> and <code>}</code>) will be highlighted around the caret. Only supported by some formatters.</p> <p>JustTokenised As Boolean</p> <p>Internally set to True whenever the tokenisation has occurred.</p> <p>LastFullyVisibleLineNumber As Integer</p> <p>The line number of the last fully visible line.</p> <p>LastParseMicroseconds As Double</p> <p>The time (from <code>System.Microseconds</code>) that the last <code>Formatter.Parse()</code> invocation occurred.</p> <p>LineManager As XUICELineManager</p> <p>A reference to this code editor's line manager.</p> <p>LineNumberColor As Color</p> <p>The line number colour for lines that are not the current line.</p> <p>LineNumberFontSize As Integer</p> <p>The line number font size. Must be less than <code>FontSize</code>.</p> <p>LongestLineChanged As Boolean</p> <p>If True then the there has been a change in the length of the longest line.</p> <p>mAutocompletePopup As XUICodeEditorAutocompletePopup</p> <p>This code editor's autocomplete popup control.</p> <p>mBackBuffer As Picture</p> <p>The buffer we draw the editor contents to and then blit to the screen each frame.</p> <p>mBorderColor As ColorGroup</p> <p>The colour of the editor's border (if enabled).</p> <p>mCachedRequiredBufferWidth As Double</p> <p>A cache of the required buffer width computed in the last <code>Paint</code> event.</p> <p>mCaretBlinker As Timer</p> <p>The timer responsible for blinking the caret.</p> <p>mCaretPosition As Integer</p> <p>Backing field for the <code>CaretPosition</code> computed property.</p> <p>mCaretType As CaretTypes</p> <p>Backing field for the <code>CaretType</code> computed property.</p> <p>mCaretVisible As Boolean</p> <p>True if the caret has blinked visible, False if not.</p> <p>mCurrentLine As XUICELine</p> <p>Backing field for the <code>CurrentLine</code> computed property.</p> <p>mCurrentSelection As XUITextSelection</p> <p>Backing field for the <code>CurrentSelection</code> computed property.</p> <p>mCurrentUndoID As Integer</p> <p>Backing field for the <code>CurrentUndoID</code> computed property.</p> <p>mDebuggingLine As Integer</p> <p>The line number to highlights as being currently debugged. Set to 0 if no line should be highlighted in this way.</p> <p>mDelimiterTimer As Timer</p> <p>Runs periodically to update the nearest delimiters to the caret position.</p> <p>mDisplayLineNumbers As Boolean</p> <p>Backing field for the <code>DisplayLineNumbers</code> computed property.</p> <p>mDragging As Boolean</p> <p>True if the mouse is currently dragging.</p> <p>mDraggingHorizontalScrollbarThumb As Boolean</p> <p>Set to True in MouseDown if the user has clicked the horizontal scrollbar thumb on Windows &amp; Linux.</p> <p>mDraggingVerticalScrollbarThumb As Boolean</p> <p>Set to True in MouseDown if the user has clicked the vertical scrollbar thumb on Windows &amp; Linux.</p> <p>mDrawBlockLines As Boolean</p> <p>If True then the editor will draw block lines for source code. Backs the <code>DrawBlockLines</code> computed property.</p> <p>mFirstVisibleLine As Integer</p> <p>Backing field for the <code>FirstVisibleLine</code> computed property.</p> <p>mFontName As String</p> <p>Backing field for the <code>FontName</code> computed property.</p> <p>mFontSize As Integer</p> <p>Backing field for the <code>FontSize</code> computed property.</p> <p>mFormatter As XUICEFormatter</p> <p>The formatter used to format text. Backs the <code>Formatter</code> computed property.</p> <p>mGraphicsScaleX As Double</p> <p>The cached canvas <code>Graphics.ScaleX</code> value.</p> <p>mGraphicsScaleY As Double</p> <p>The cached canvas <code>Graphics.ScaleY</code> value.</p> <p>mGutterWidth As Double</p> <p>An internal cache of the gutter width in pixels.</p> <p>mHasBottomBorder As Boolean</p> <p>If True then a border will be drawn at the bottom of the editor.</p> <p>mHasFocus As Boolean</p> <p>Backing field for the <code>HasFocus</code> computed property.</p> <p>mHasLeftBorder As Boolean</p> <p>If True then a border will be drawn at the left edge of the editor.</p> <p>mHasRightBorder As Boolean</p> <p>If True then a border will be drawn at the right edge of the editor.</p> <p>mHasTopBorder As Boolean</p> <p>If True then a border will be drawn at the top of the editor.</p> <p>mHighlightCurrentLine As Boolean</p> <p>Backing field for the <code>HighlightCurrentLine</code> computed property.</p> <p>mHighlightDelimitersAroundCaret As Boolean</p> <p>If True then delimiters (such as <code>{</code> and <code>}</code>) will be highlighted around the caret. Only supported by some formatters.</p> <p>mHorizontalScrollbar As Picture</p> <p>The horizontal scrollbar image to draw. May be Nil if not required.</p> <p>mHorizontalScrollbarThumbBounds As Rect</p> <p>The current bounds of the horizontal scrollbar thumb. Will be Nil if the vertical scrollbar is not visible. Always Nil on macOS.</p> <p>MinimumAutocompletionLength As Integer</p> <p>The minimum number of characters required before autocompletion is offered. Must be &gt;= 2.</p> <p>MinimumParseInterval As Integer</p> <p>The minimum time (in milliseconds) between calls to the editor's formatter's <code>Parse()</code> method.</p> <p>mIsDoubleClick As Boolean</p> <p>True if the last click that occurred was a double click.</p> <p>mLastClickTicks As Integer</p> <p>The ticks that the last mouse click occurred at.</p> <p>mLastClickWasContextual As Boolean</p> <p>True if the mouse click that just occurred in the <code>MouseDown</code> event was a contextual click.</p> <p>mLastKeyDownTicks As Double</p> <p>The time of the last <code>KeyDown</code> event. Used to determine if the user is still typing.</p> <p>mLastMouseDownX As Integer</p> <p>The X coordinate of the last <code>MouseDown</code> event.</p> <p>mLastMouseDownY As Integer</p> <p>The Y coordinate of the last <code>MouseDown</code> event.</p> <p>mLastMouseDragX As Integer</p> <p>The X coordinate during the last MouseDrag event or -1 if the mouse has been released since the last drag event.</p> <p>mLastMouseDragY As Integer</p> <p>The Y coordinate during the last MouseDrag event or -1 if the mouse has been released since the last drag event.</p> <p>mLastMouseUpX As Integer</p> <p>The X mouse coordinate from the previous <code>MouseUp</code> event.</p> <p>mLastMouseUpY As Integer</p> <p>The Y mouse coordinate from the previous <code>MouseUp</code> event.</p> <p>mLastTripleClickTicks As Integer</p> <p>The ticks that the last triple click occurred at.</p> <p>mLineHeight As Double</p> <p>Internal cache of the current line height.</p> <p>mLineNumberFontSize As Integer</p> <p>Backing field for the computed <code>LineNumberFontSize</code>.</p> <p>mLineNumWidth As Double</p> <p>Internal cache of the line number width in the gutter.</p> <p>mLocationUnderMouse As XUICELocation</p> <p>The line location underneath the mouse cursor.</p> <p>mMaxVisibleLines As Integer</p> <p>A cache of the last value returned by the <code>MaxVisibleLines</code> method. It's the maximum number of lines visible in the canvas. Will never be more than the number of lines in existence.</p> <p>mMinimumAutocompletionLength As Integer</p> <p>The minimum number of characters required before autocompletion is offered. Backs the <code>MinimumAutocompletionLength</code> computed property.</p> <p>mParseTimer As Timer</p> <p>Periodically checks to see if the formatter can parse the contents.</p> <p>mReadOnly As Boolean</p> <p>Backing store for the <code>ReadOnly</code> computed property.</p> <p>mScrollPosX As Integer</p> <p>Backing field for the <code>ScrollPosX</code> computed property.</p> <p>mScrollPosY As Integer</p> <p>The Y coordinate the canvas last scrolled to.</p> <p>mSpacesPerTab As Integer</p> <p>The number of spaces to insert in place of the tab character.</p> <p>mSuppressAutocompletePopup As Boolean</p> <p>If True then the autocomplete popup is suppressed even if there is autocomplete data available. Set after the user has cancelled or accepted autocomplete.</p> <p>mTheme As XUICETheme</p> <p>The editor's current theme (backs the <code>Theme</code> computed property).</p> <p>mVerticalLinePadding As Integer</p> <p>Backing field for the <code>VerticalLinePadding</code> computed property.</p> <p>mVerticalScrollbar As Picture</p> <p>The vertical scrollbar image to draw. May be Nil if not required.</p> <p>mVerticalScrollbarThumbBounds As Rect</p> <p>The current bounds of the vertical scrollbar thumb. Will be Nil if the vertical scrollbar is not visible. Always Nil on macOS.</p> <p>NeedsFullRedraw As Boolean</p> <p>True if the canvas needs a full redraw.</p> <p>ReadOnly As Boolean</p> <p>If True then the canvas is read-only (i.e. not editable).</p> <p>ScrollPosX As Integer</p> <p>The horizontal scroll offset. 0 is baseline. Positive indicates scrolling to the right.</p> <p>SelectionColour As Color</p> <p>The selection colour.</p> <p>SpacesPerTab As Integer</p> <p>The number of spaces to insert in place of the tab character.</p> <p>TextSelected As Boolean</p> <p>True if there is any text currently selected.</p> <p>Theme As XUICETheme</p> <p>The editor's current theme.</p> <p>UndoIDThreshold As Integer</p> <p>The number of ticks that represents the start of a new undo event block.</p> <p>UndoManager As XUIUndoManager</p> <p>A reference to this editor's undo manager.</p> <p>VerticalLinePadding As Integer</p> <p>The number of pixels to pad a line on its top and bottom edges.</p>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#method-descriptions","title":"Method Descriptions","text":"<p>AcceptCurrentAutocompleteOption()</p> <p>Accepts the currently selected option in the autocomplete popup.</p> <p>AutocompleteOptionsAvailable() As Boolean</p> <p>True if there are autocompletion options available at the current caret position.</p> <p>CaretAtCurrentLineEnd() As Boolean</p> <p>True if the caret is at the end of the current line.</p> <p>CaretBlinkerAction(caretBlinker As Timer)</p> <p>Toggles the visibility of the caret. Called by <code>mCaretBlinker.Action</code>.</p> <p>CaretIsInComment() As Boolean</p> <p>Returns True if the token at the current caret position is a comment.</p> <p>Clear()</p> <p>Clears the contents of the editor.</p> <p>ClearDebuggingLine()</p> <p>If a line is currently being highlighted for debugging it will no longer be highlighted this way.</p> <p>ComputeGutterWidth(lineNumberWidth As Double) As Double</p> <p>Computes the width in pixels of the gutter using the passed <code>lineNumberWidth</code>.</p> <p>Constructor()</p> <p>Default constructor.</p> <p>ContentsDidChange()</p> <p>Raises this editor's <code>ContentsDidChange</code> event.</p> <p>CurrentSelectionAsString() As String</p> <p>Returns the contents of the current selection. May return an empty string.</p> <p>DeleteBackward(allowUndo As Boolean, raiseContentsDidChange As Boolean)</p> <p>Deletes the character before the caret and invalidates the canvas.</p> <p>If <code>allowUndo</code> is True then this action will be undoable. If <code>raiseContentsDidChange</code> is True then we will also raise the <code>ContentsDidChange</code> event. By default, <code>ContentsDidChange</code> is raised but sometimes (e.g. when this method is called internally by other methods) we don't.</p> <p>DeleteForward(allowUndo As Boolean, raiseContentsDidChange As Boolean)</p> <p>Deletes the character immediately in front of the caret and invalidates the canvas.</p> <p>If <code>allowUndo</code> is True then this action will be undoable. If <code>raiseContentsDidChange</code> is True then we will also raise the <code>ContentsDidChange</code> event. By default, <code>ContentsDidChange</code> is raised but sometimes (e.g. when this method is called internally by other methods) we don't.</p> <p>DeleteSelection(allowUndo As Boolean, shouldInvalidate As Boolean, raiseContentsDidChange As Boolean, undoMessage As String)</p> <p>Deletes the current selection.</p> <p>If <code>allowUndo</code> is True then this action will be pushed to the undo manager. If <code>shouldInvalidate</code> is True then the canvas will immediately invalidate. If <code>raiseContentsDidChange</code> is True then we will raise the <code>ContentsDidChange</code> event. <code>undoMessage</code> is an optional override message for undoable actions.</p> <p>DelimiterTimerAction(delimiterTimer As Timer)</p> <p>Updates the nearest delimiters to the caret periodically. Called by <code>mDelimiterTimer.Action</code>.</p> <p>DocumentSize() As Rect</p> <p>Returns the size of the entire contents area in pixels.</p> <p>DrawBorders(g As Graphics)</p> <p>Draws any enabled borders.</p> <p>FetchAutocompleteData()</p> <p>Requests autocomplete data for the word immediately in front of the caret.</p> <p>ForceRedraw()</p> <p>Immediately redraws the canvas.</p> <p>HandleAutocompleteKeyPress()</p> <p>Handles the pressing of the autocomplete key.</p> <p>HandleCtrlSpace()</p> <p>Handles the pressing of the Ctrl+Space key combination.</p> <p>HandleDoubleClick(x As Integer, y As Integer)</p> <p>Handles a double click occurring at the passed <code>x</code>, <code>y</code> mouse coordinates.</p> <ol> <li>Double-clicking when not over a line highlights the last word of the last line. </li> <li>Double-clicking at the end of a line highlights the last word of that line. </li> <li>Double-clicking on whitespace highlights the run of whitespace. </li> <li>Double-clicking on a non-alphanumeric character highlights the character. </li> <li>Double-clicking within an alphanumeric word selects the word. </li> </ol> <p>HandleEscKey(shouldInvalidate As Boolean)</p> <p>Handles an Esc key press at the current caret position.</p> <p>HandleHorizontalScrollbarTrackClick(x As Integer, y As Integer)</p> <p>Handles a click in the horizontal scrollbar track.</p> <p>Assumes the click location has been verified prior to this with a call to <code>IsWithinHorizontalScrollbarTrack()</code>. We mimic Window's behaviour so if we left of the thumb we move the thumb up so its left edge is positioned at the mouse click. If we click to the right of the thumb we move the thumb rightwards so its right edge is positioned at the mouse click. Only valid on Windows and Linux.</p> <p>HandleReturnKey(allowUndo As Boolean, raiseContentsDidChange As Boolean)</p> <p>Handles a Return key press at the current caret position.</p> <p>If <code>allowUndo</code> is True then this action will be undoable. If <code>raiseContentsDidChange</code> is True then we will raise the <code>ContentsDidChange</code> event.</p> <p>Three Scenarios:</p> <ol> <li>The caret is at the end of the line (blank line inserted below with caret at its start). </li> <li>The caret is at the beginning of the line (blank line inserted above with caret at start of this line). </li> <li>The caret is in the middle of the line (line is broken and caret is placed at start of new line below). </li> </ol> <p>We then need to scroll to the current caret position.</p> <p>HandleTripleClick(x As Integer, y As Integer)</p> <p>Handles a triple click occurring at the passed <code>x</code>, <code>y</code> mouse coordinates. Selects the line under the click.</p> <p>This will always occur after a double click so <code>HandleDoubleClick</code> will have been called prior to this method.</p> <p>HandleVerticalScrollbarTrackClick(x As Integer, y As Integer)</p> <p>Handles a click in the vertical scrollbar track.</p> <p>Assumes the click location has been verified prior to this with a call to <code>IsWithinVerticalScrollbarTrack()</code>. We mimic Window's behaviour so if we click above the thumb we move the thumb up so its top is positioned at the mouse click. If we click below the thumb we move the thumb down so its bottom is positioned at the mouse click. Only valid on Windows and Linux.</p> <p>HideAutocompletePopup(shouldSetFocus As Boolean)</p> <p>Hides the autocomplete popup.</p> <p>Insert(s As String, pos As Integer, allowUndo As Boolean, shouldInvalidate As Boolean, raiseContentsDidChange As Boolean)</p> <p>Inserts <code>s</code> at the specified caret position.</p> <p>If <code>allowUndo</code> is True then this action will be undoable. If <code>raiseContentsDidChange</code> then we will also raise the <code>ContentsDidChange</code> event.</p> <p>InsertCharacter(char As String, raiseContentsDidChange As Boolean, range As TextRange)</p> <p>Inserts a single character at the current caret position.</p> <p>Assumes <code>char</code> is only one character. For longer strings, use <code>Insert()</code>.</p> <p>IsDoubleClick(x As Integer, y As Integer) As Boolean</p> <p>If a double click occurred, this method handles it and returns True. Otherwise it returns False.</p> <p>IsOverHorizontalScrollbar(x As Integer, y As Integer) As Boolean</p> <p>Returns True if <code>x, y</code> is over any part of the horizontal scrollbar (Windows &amp; Linux only).</p> <p>IsOverVerticalScrollbar(x As Integer, y As Integer) As Boolean</p> <p>Returns True if <code>x, y</code> is over any part of the vertical scrollbar (Windows &amp; Linux only).</p> <p>IsTripleClick(x As Integer, y As Integer) As Boolean</p> <p>If a triple click just happened, this method handles it and returns True. Otherwise it returns False.</p> <p>If a triple click occurs, calls the <code>HandleTripleClick()</code> method.</p> <p>IsWithinHorizontalScrollbarTrack(x As Integer, y As Integer) As Boolean</p> <p>Returns True if <code>x, y</code> is within a visible horizontal scrollbar track (not the thumb).</p> <p>IsWithinVerticalScrollbarTrack(x As Integer, y As Integer) As Boolean</p> <p>Returns True if <code>x, y</code> is within a visible vertical scrollbar track (not the thumb).</p> <p>LastVisibleLineNumber() As Integer</p> <p>The 1-based line number of the last visible line.</p> <p>The line may be only partially visible.</p> <p>LineFullyVisible(line As XUICELine) As Boolean</p> <p>Returns True if <code>line</code> is fully visible on the canvas.</p> <p>LineHeight() As Double</p> <p>The height (in pixels) of a line.</p> <p>LocationAtXY(x As Integer, y As Integer) As XUICELocation</p> <p>Returns the line location at coordinates <code>x</code>, <code>y</code> or <code>Nil</code> if there is no line at those coordinates.</p> <p>If <code>x</code> is beyond the end of a line then the last column for that line is specified in the returned line location.</p> <p>LocationToCaretPos(location As XUICELocation) As Integer</p> <p>Returns the caret position specified by the passed location.</p> <p>MaxVisibleLines(lineHeight As Double) As Integer</p> <p>The maximum number of lines that are visible in the canvas.</p> <p>Will never be more than the maximum number of lines in existence.</p> <p>MoveCaretDown()</p> <p>Moves the caret down a line.</p> <p>MoveCaretLeft()</p> <p>Moves the caret to the left one position.</p> <p>MoveCaretRight()</p> <p>Moves the caret one position to the right.</p> <p>MoveCaretToColumn(lineNumber As Integer, column As Integer, shouldInvalidate As Boolean)</p> <p>Moves the caret to the column on the specified line.</p> <p>If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>lineNumber</code> is out of range. If <code>column</code> is greater than the number of columns in the target line then it moves the caret to the end of the target line.</p> <p>MoveCaretToNextWordEnd()</p> <p>Moves the caret to the end of the next word.</p> <p>MoveCaretToPos(newPos As Integer, shouldInvalidate As Boolean)</p> <p>Moves the caret to the 0-based <code>newPos</code>, clamped between the start and end of the text.</p> <p>If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated. If <code>newPos &lt; 0</code> then the caret is moved to the start of the text. If <code>newPos</code> &gt; last valid caret position then the caret is moved to the end of the text.</p> <p>MoveCaretToPreviousWordStart()</p> <p>Moves the caret to the start of the previous word.</p> <p>MoveCaretUp()</p> <p>Moves the caret up a line.</p> <p>MoveDownAndModifySelection()</p> <p>Moves down and modifies the selection.</p> <p>MoveLeftAndModifySelection()</p> <p>Moves the caret one position to the left and modifies the current selection.</p> <p>The user has pressed Shift+Left arrow.</p> <p>MoveRightAndModifySelection()</p> <p>Moves the caret one position to the right and modifies the current selection.</p> <p>The user has pressed Shift+Right arrow.</p> <p>MoveToBeginningOfDocument()</p> <p>Moves the caret to the beginning of the document.</p> <p>MoveToBeginningOfLine()</p> <p>Moves the caret to the beginning of the line.</p> <p>MoveToDocumentBeginningAndModifySelection()</p> <p>Moves to the top of the beginning of the document and modifies the selection.</p> <p>MoveToDocumentEndAndModifySelection()</p> <p>Moves to the end of the document and modifies the selection.</p> <p>MoveToEndOfDocument()</p> <p>Moves the caret to the end of the document.</p> <p>MoveToEndOfLine()</p> <p>Moves the caret to the end of the line.</p> <p>MoveToLeftEndOfLineAndModifySelection()</p> <p>Moves the selection to the left end of the line.</p> <p>MoveToRightEndOfLineAndModifySelection()</p> <p>Moves the selection to the right end of the line.</p> <p>MoveUpAndModifySelection()</p> <p>Moves up and modifies the selection.</p> <p>MoveWordLeftAndModifySelection()</p> <p>Selects the text from the beginning of the word to the left of the caret to the current caret position.</p> <p>MoveWordRightAndModifySelection()</p> <p>Handles modifying the selection to the end of the word.</p> <p>On macOS this is <code>Shift+Opt+Right Arrow</code></p> <p>NotificationReceived(n As XUINotification)</p> <p>A notification has been received from the Notification Center.</p> <p>Part of the XUINotificationListener interface.</p> <p>PageDownAndModifySelection()</p> <p>Pages down and modifies the selection.</p> <p>PageUpAndModifySelection()</p> <p>Scrolls the page up and modifies the selection.</p> <p>PaintBlockCaret(g As Graphics, x As Double, y As Double)</p> <p>Paints the block caret on <code>g</code> at <code>x</code>, <code>y</code>.</p> <p>Assumes the drawing colour of <code>g</code> has been set to the correct colour for the caret. Assumes that the font properties of <code>g</code> object have been set to the correct style.</p> <p>PaintCaret(g As Graphics, pos As Integer)</p> <p>Paints the caret to <code>g</code> at the 0-based <code>pos</code>.</p> <p>ParseTimerAction(parseTimer As Timer)</p> <p>Checks to see if enough time has elapsed that we should invoke the formatter's <code>Parse()</code> method.</p> <p>RebuildBackBuffer()</p> <p>Rebuilds the entire back buffer by drawing all visible content to it.</p> <p>RebuildHorizontalScrollbar()</p> <p>Rebuilds the horizontal scroll bar or sets it to Nil if it's not needed.</p> <p>RebuildScrollbars()</p> <p>Rebuilds both the vertical and horizontal scrollbars or sets them to Nil if they aren't needed.</p> <p>RebuildVerticalScrollbar()</p> <p>Rebuilds the vertical scroll bar or sets it to Nil if it's not needed.</p> <p>RedrawDirtyLines()</p> <p>Redraws all dirty lines to the back buffer.</p> <p>Assumes that the back buffer exists and is the correct size.</p> <p>RegisterForNotifications()</p> <p>Registers the editor for desired notifications.</p> <p>ReplaceCurrentSelection(s As String)</p> <p>Replaces the current selection with <code>s</code>.</p> <p>RequiredBufferWidth() As Double</p> <p>Returns the width (in pixels) that the back buffer should be to accomodate the longest line, padding and gutter.</p> <p>Will always be at least as wide as the canvas' current width.</p> <p>RequiresHorizontalScrollbar() As Boolean</p> <p>Returns True if a horizontal scrollbar is required (inexpensive computation).</p> <p>RequiresVerticalScrollbar() As Boolean</p> <p>Returns True if a vertical scrollbar is required. Inexpensive computation.</p> <p>ScrollDown(linesToScroll As Integer, moveCaret As Boolean, shouldInvalidate As Boolean)</p> <p>Scrolls the canvas down <code>linesToScroll</code> lines.</p> <p>If <code>moveCaret</code> is True then the caret will be moved down by the number of lines we scroll down. If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated.</p> <p>ScrollPageDown(moveCaret As Boolean, shouldInvalidate As Boolean)</p> <p>Scrolls the canvas down a page and optionally moves the caret down as well.</p> <p>If <code>moveCaret</code> is True then the caret will be moved down by the number of lines we scroll down. If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated.</p> <p>ScrollPageUp(moveCaret As Boolean, shouldInvalidate As Boolean)</p> <p>Scrolls the canvas up a page and optionally moves the caret up as well.</p> <p>If <code>moveCaret</code> is True then the caret will be moved up by the number of lines we scroll up. If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated.</p> <p>ScrollToCaretPos(shouldInvalidate As Boolean)</p> <p>Scrolls the canvas (if necessary) to the current caret position.</p> <p>If <code>shouldInvalidate</code> is True then the canvas will immediately redraw.</p> <p>ScrollUp(linesToScroll As Integer, moveCaret As Boolean, shouldInvalidate As Boolean)</p> <p>Scrolls the canvas up <code>linesToScroll</code> lines.</p> <p>If <code>moveCaret</code> is True then the caret will be moved up by the number of lines we scroll up. If <code>shouldInvalidate</code> is False then the canvas will not be immediately invalidated.</p> <p>SelectAll(shouldInvalidate As Boolean)</p> <p>Selects everything in the editor.</p> <p>If <code>shouldInvalidate</code> is True then the editor will immediately refresh.</p> <p>SelectWhitespaceAroundCaret(shouldInvalidate As Boolean)</p> <p>Selects all whitespace around the current caret position on the caret's current line.</p> <p>If <code>shouldInvalidate</code> is True then the canvas will be invalidated. If False then it's merely marked for a full redraw.</p> <p>SelectWordAtCaret(shouldInvalidate As Boolean)</p> <p>Selects the word the caret is within and marks the canvas for redrawing.</p> <p>If <code>shouldInvalidate</code> is True then the canvas will be invalidated. If False then it is merely marked for a full redraw.</p> <p>SetGraphicsStyle(g As Graphics, style As XUICETokenStyle)</p> <p>Sets the font properties of <code>g</code> to the specified token <code>style</code>.</p> <p>ShowAutocompletePopup()</p> <p>Shows the autocomplete popup at the caret position.</p> <p>TabToSpaces() As String</p> <p>Returns a tab characters as a fixed width of space characters. Determined by <code>SpacesPerTab</code>.</p> <p>Typing() As Boolean</p> <p>True if the user is still thought to be typing.</p> <p>We make this decision based on the time the last key was depressed and released as well as an acceptable interval between depressions.</p> <p>XYAtCaretPos(caretPos As Integer, x As Double, y As Double)</p> <p>Computes (ByRef) the canvas x, y coordinates at the 0-based <code>caretPos</code>.</p>"},{"location":"XUI/XUICodeEditor/XUICodeEditor/#event-descriptions","title":"Event Descriptions","text":"<p>AutocompleteDataForPrefix(prefix As String, caretLine As Integer, caretColumn As Integer) As XUICEAutocompleteData The code editor is asking for autocompletion options for the specified <code>prefix</code> at <code>caretColumn</code> on line number <code>caretLine</code>. You should return Nil if there are none.</p> <p>ContentsDidChange() The text contents of the editor has changed.</p> <p>DidContextualClick(x As Integer, y As Integer) The user contexutal clicked (right clicked) inside the editor at the passed local coordinates.</p> <p>Opening() The editor is about to be displayed.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteData/","title":"XUICEAutocompleteData","text":""},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteData/#description","title":"Description","text":"<p>Contains the code editor autocomplete options for a given prefix. Returned by autocomplete engines when requested by the code editor.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteData/#properties","title":"Properties","text":"Name Type Read-Only LongestCommonPrefix <code>String</code> Options() <code>XUICEAutocompleteOption</code> Prefix <code>String</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteData/#methods","title":"Methods","text":"Name Parameters Returns LongestOptionValue <code>String</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteData/#property-descriptions","title":"Property Descriptions","text":"<p>LongestCommonPrefix As String</p> <p>The longest common prefix amongst all suggestions minus the triggering prefix.</p> <p>Options() As XUICEAutocompleteOption</p> <p>The autocomplete options available for the specified prefix.</p> <p>Prefix As String</p> <p>The prefix that the data contained within this instance is valid for.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteData/#method-descriptions","title":"Method Descriptions","text":"<p>LongestOptionValue() As String</p> <p>Returns the option with the longest value.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteOption/","title":"XUICEAutocompleteOption","text":""},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteOption/#description","title":"Description","text":"<p>Represents a single autocomplete option.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteOption/#properties","title":"Properties","text":"Name Type Read-Only Data <code>Variant</code> Value <code>String</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteOption/#methods","title":"Methods","text":"Name Parameters Returns Clone <code>XUICEAutocompleteOption</code> Constructor value As <code>String</code>, data As <code>Variant</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteOption/#property-descriptions","title":"Property Descriptions","text":"<p>Data As Variant</p> <p>Arbitrary data.</p> <p>Value As String</p> <p>The string visible to the user in the autocompletion list.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICEAutocompleteOption/#method-descriptions","title":"Method Descriptions","text":"<p>Clone() As XUICEAutocompleteOption</p> <p>Returns a clone of this option. Note that <code>Data</code> will only be shallow cloned.</p> <p>Constructor(value As String, data As Variant)</p> <p>Constructs a new autocomplete option with the user-facing <code>value</code> and optional <code>data</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICodeEditorAutocompletePopup/","title":"XUICodeEditorAutocompletePopup","text":"<p>Inherits <code>DesktopTextInputCanvas</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICodeEditorAutocompletePopup/#description","title":"Description","text":"<p>The customisable autocomplete popup that appears in the code editor when autocomplete  options are available.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICodeEditorAutocompletePopup/#properties","title":"Properties","text":"Name Type Read-Only mBuffer <code>Picture</code> mOwner <code>WeakRef</code> mScrollPosY <code>Integer</code> mSelectedIndex <code>Integer</code> Owner <code>XUICodeEditor</code> \u2714 ScrollPosY <code>Integer</code> SelectedIndex <code>Integer</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICodeEditorAutocompletePopup/#methods","title":"Methods","text":"Name Parameters Returns AutocompleteOptionHeight <code>Integer</code> Constructor owner As <code>XUICodeEditor</code> RebuildBuffer maxWidth As <code>Integer</code>, selectedIndex As <code>Integer</code> ScrollToSelectedIndex Update maxWidth As <code>Integer</code>, maxHeight As <code>Integer</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICodeEditorAutocompletePopup/#constants","title":"Constants","text":"Name Type SELECTED_OPTION_BORDER_RADIUS <code>Double</code> SELECTED_OPTION_H_PADDING <code>Double</code> <p>SELECTED_OPTION_BORDER_RADIUS As Double The border radius for the background of the currently selected autocomplete option in the popup.</p> <p>SELECTED_OPTION_H_PADDING As Double The number of pixels to pad to the left and right of a selected autocomplete option in the popup. </p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICodeEditorAutocompletePopup/#property-descriptions","title":"Property Descriptions","text":"<p>mBuffer As Picture</p> <p>The picture that represents the popup. Drawn in the <code>Paint()</code> event.</p> <p>mOwner As WeakRef</p> <p>The code editor that owns this popup.</p> <p>mScrollPosY As Integer</p> <p>The vertical scroll offset. 0 is baseline. Positive indicates scrolling down. Backs the <code>ScrollPosY</code> computed property.</p> <p>mSelectedIndex As Integer</p> <p>0-based index of the currently selected option in the popup.</p> <p>Owner As XUICodeEditor</p> <p>The code editor that owns this popup.</p> <p>ScrollPosY As Integer</p> <p>The vertical scroll offset. 0 is baseline. Positive indicates scrolling down. Refreshes the popup.</p> <p>SelectedIndex As Integer</p> <p>0-based index of the currently selected option in the popup.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Autocompletion/XUICodeEditorAutocompletePopup/#method-descriptions","title":"Method Descriptions","text":"<p>AutocompleteOptionHeight() As Integer</p> <p>Returns the height of an autocomplete option in the popup based on the owner's current theme.</p> <p>Constructor(owner As XUICodeEditor)</p> <p>Creates a new autocomplete popup canvas, with a weak reference to <code>owner</code>.</p> <p>RebuildBuffer(maxWidth As Integer, selectedIndex As Integer)</p> <p>Creates the buffer that represents the popup. Assigns the buffer to <code>mBuffer</code>.</p> <p>ScrollToSelectedIndex()</p> <p>Scrolls the popup to wholly display the selected index if it is not already. Refreshes the canvas.</p> <p>Assumes <code>SelectedIndex</code> is valid.</p> <p>Update(maxWidth As Integer, maxHeight As Integer)</p> <p>Resizes and redraws this autocomplete popup using the autocomplete data from its owner.</p> <p><code>maxwidth</code> is the maximum permissable width of the popup. <code>maxHeight</code> is the maximum permissable height of the popup.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEAbstractFormatter/","title":"XUICEAbstractFormatter","text":""},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEAbstractFormatter/#description","title":"Description","text":"<p>An abstract base class for several code formatters. Implements low level methods that are common to  several tokenisers.</p> <p>It it not intended that this class be instantiated.</p> <p>If you write your own formatters, you do not have to subclass this class.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEAbstractFormatter/#properties","title":"Properties","text":"Name Type Read-Only mCurrent <code>Integer</code> mFinalLineNumber <code>Integer</code> mLine <code>XUICELine</code> mLineManager <code>XUICELineManager</code> mLineNumber <code>Integer</code> mLines() <code>XUICELine</code> mLinesLastIndex <code>Integer</code> mTokenStartLocal <code>Integer</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEAbstractFormatter/#methods","title":"Methods","text":"Name Parameters Returns Advance count As <code>Integer</code> AtEnd <code>Boolean</code> AtLineEnd <code>Boolean</code> Constructor Consume <code>String</code> Initialise lines() As <code>XUICELine</code>, startLine As <code>Integer</code>, clearStartline As <code>Boolean</code> MakeGenericToken type As <code>String</code>, ParamArray keyValues() As <code>Pair</code> <code>XUICELineToken</code> MakeToken type As <code>String</code>, fallbackType As <code>String</code>, ParamArray keyValues() As <code>Pair</code> <code>XUICELineToken</code> MoveToLine lineNumber As <code>Integer</code>, clearLine As <code>Boolean</code> Peek places As <code>Integer</code> <code>String</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEAbstractFormatter/#property-descriptions","title":"Property Descriptions","text":"<p>mCurrent As Integer</p> <p>The 0-based index in <code>mCharacters</code> of the next character to evaluate.</p> <p>mFinalLineNumber As Integer</p> <p>The 1-based line number of the final line to be tokenised.</p> <p>mLine As XUICELine</p> <p>A reference to the line of source code in the editor currently being tokenised.</p> <p>mLineManager As XUICELineManager</p> <p>The line manager.</p> <p>mLineNumber As Integer</p> <p>The 1-based number of the line currently being tokenised.</p> <p>mLines() As XUICELine</p> <p>A reference to the lines to tokenise.</p> <p>mLinesLastIndex As Integer</p> <p>Caches value of <code>mLines.LastIndex</code>.</p> <p>mTokenStartLocal As Integer</p> <p>The 0-based position on the line being tokenised that the current token starts at.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEAbstractFormatter/#method-descriptions","title":"Method Descriptions","text":"<p>Advance(count As Integer)</p> <p>Advances the specified number of positions or to the end of the source code (whichever is sooner).</p> <p>AtEnd() As Boolean</p> <p>True if we've reached the end of the characters on the line.</p> <p>AtLineEnd() As Boolean</p> <p>True if we are currently pointing at the line end.</p> <p>Constructor()</p> <p>As this is an abstract class, the constructor is private to prevent instantiation.</p> <p>Consume() As String</p> <p>Consumes and returns the current character in the source. Returns \"\" if at the end of the source or &amp;u0A if at then end of the line.</p> <p>Initialise(lines() As XUICELine, startLine As Integer, clearStartline As Boolean)</p> <p>Initialises the abstract formatter.</p> <p>MakeGenericToken(type As String, ParamArray keyValues() As Pair) As XUICELineToken</p> <p>Creates a new generic token starting at <code>mTokenStartLocal</code> and ending at <code>mCurrent</code> with optional key-value data. Fallback is set to <code>type</code>.</p> <p>Optional key-values can be added to the token's data. Each item in <code>keyValues</code> is a <code>Pair</code> in the format:</p> <pre><code> `Left`  = `String` key\n `Right` = `Variant` value\n</code></pre> <p>We set <code>fallbackType</code> to the same value as <code>type</code>. This therefore assumes that <code>type</code> is a valid generic theme type (i.e. one that is guaranteed to be present in a valid <code>XUICETheme</code>.</p> <p>MakeToken(type As String, fallbackType As String, ParamArray keyValues() As Pair) As XUICELineToken</p> <p>Creates a new token starting at <code>mTokenStartLocal</code> and ending at <code>mCurrent</code> with optional key-value data.</p> <p>Optional key-values can be added to the token's data. Each item in <code>keyValues</code> is a <code>Pair</code> in the format:</p> <pre><code> `Left`  = `String` key\n `Right` = `Variant` value\n</code></pre> <p><code>fallbackType</code> is the style to use if the editor's theme doesn't define <code>type</code> as a style.</p> <p>MoveToLine(lineNumber As Integer, clearLine As Boolean)</p> <p>Moves the tokeniser to the start of line <code>lineNumber</code> and clears any tokens on it if <code>clearLine</code> is True. Assumes that <code>lineNumber</code> is valid.</p> <p>Peek(places As Integer) As String</p> <p>Returns the character <code>places</code> beyond the current character without consuming it. Returns \"\" if we've reached the end of the source code or &amp;u0A if at the end of a line.</p> <p>Assumes <code>places</code> &gt; 0.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEFormatter/","title":"XUICEFormatter","text":""},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEFormatter/#description","title":"Description","text":"<p>The tokenisation and syntax manipulation of text within the code editor is handled by  formatters. A formatter is a class that implements this interface. In theory, the  code editor can handle the styling of any language with the appropriate formatter.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEFormatter/#methods","title":"Methods","text":"Name Parameters Returns AllowsLeadingWhitespace <code>Boolean</code> IsCommentLine line As <code>XUICELine</code> <code>Boolean</code> Name <code>String</code> NearestDelimitersForCaretPos caretPos As <code>Integer</code> <code>XUICEDelimiter</code> Parse lines() As <code>XUICELine</code> SupportsDelimiterHighlighting <code>Boolean</code> SupportsUnmatchedBlockHighlighting <code>Boolean</code> TokenIsComment token As <code>XUICELineToken</code> <code>Boolean</code> Tokenise lines() As <code>XUICELine</code>, firstVisibleLineNumber As <code>Integer</code>, lastVisibleLineNumber As <code>Integer</code> TokeniseAll lines() As <code>XUICELine</code> TokenTypes <code>String()</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEFormatter/#method-descriptions","title":"Method Descriptions","text":"<p>AllowsLeadingWhitespace() As Boolean True if this formatter allows whitespace at the beginning of a line. If False, the editor will strip it when pasting and prevent it from being typed.</p> <p>IsCommentLine(line As XUICELine) As Boolean True if this entire line is a comment.</p> <p>Name() As String The name of this formatter.</p> <p>NearestDelimitersForCaretPos(caretPos As Integer) As XUICEDelimiter Returns the nearest delimiters at the given <code>caretPos</code>. May be Nil.</p> <p>Parse(lines() As XUICELine) Called periodically by the editor. An opportunity to parse the tokenised lines. Will always be called after the lines have been tokenised.</p> <p>SupportsDelimiterHighlighting() As Boolean True if this formatter supports highlighting the delimiters around the caret.</p> <p>SupportsUnmatchedBlockHighlighting() As Boolean True if this formatter highlights unmatched blocks.</p> <p>TokenIsComment(token As XUICELineToken) As Boolean True if <code>token</code> is considered to be a comment.</p> <p>Tokenise(lines() As XUICELine, firstVisibleLineNumber As Integer, lastVisibleLineNumber As Integer) Tokenises a portion of an array of lines.</p> <p>TokeniseAll(lines() As XUICELine) Tokenises an array of lines.</p> <p>TokenTypes() As String() Returns an array of all token types used by this formatter.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEMarkdownFormatter/","title":"XUICEMarkdownFormatter","text":"<p>Implements <code>MarkdownKit.MKRenderer</code>, <code>XUICEFormatter</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEMarkdownFormatter/#description","title":"Description","text":"<p>A CommonMark-compliant Markdown formatter for the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEMarkdownFormatter/#properties","title":"Properties","text":"Name Type Read-Only ATXHeadingLevel <code>Integer</code> InEmphasis <code>Boolean</code> InStrongEmphasis <code>Boolean</code> IsWithinATXHeading <code>Boolean</code> IsWithinCodeSpan <code>Boolean</code> IsWithinSetextHeading <code>Boolean</code> mDoc <code>MarkdownKit.MKDocument</code> mLines() <code>XUICELine</code> mParser <code>MarkdownKit.MKParser</code> SetextHeadingLevel <code>Integer</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEMarkdownFormatter/#methods","title":"Methods","text":"Name Parameters Returns AllowsLeadingWhitespace <code>Boolean</code> HandleReferenceLinkDefinitions doc As <code>MarkdownKit.MKDocument</code> IsCommentLine line As <code>XUICELine</code> <code>Boolean</code> Name <code>String</code> NearestDelimitersForCaretPos caretPos As <code>Integer</code> <code>XUICEDelimiter</code> Parse lines() As <code>XUICELine</code> SupportsDelimiterHighlighting <code>Boolean</code> SupportsUnmatchedBlockHighlighting <code>Boolean</code> TokenIsComment token As <code>XUICELineToken</code> <code>Boolean</code> Tokenise lines() As <code>XUICELine</code>, firstVisibleLineNumber As <code>Integer</code>, lastVisibleLineNumber As <code>Integer</code> TokeniseAll lines() As <code>XUICELine</code> TokenTypes <code>String()</code> VisitATXHeading atx As <code>MarkdownKit.MKATXHeadingBlock</code> <code>Variant</code> VisitBlock b As <code>MarkdownKit.MKBlock</code> <code>Variant</code> VisitBlockQuote bq As <code>MarkdownKit.MKBlockQuote</code> <code>Variant</code> VisitCodeSpan cs As <code>MarkdownKit.MKCodeSpan</code> <code>Variant</code> VisitDocument doc As <code>MarkdownKit.MKDocument</code> <code>Variant</code> VisitEmphasis e As <code>MarkdownKit.MKEmphasis</code> <code>Variant</code> VisitFencedCode fc As <code>MarkdownKit.MKFencedCodeBlock</code> <code>Variant</code> VisitHTMLBlock html As <code>MarkdownKit.MKHTMLBlock</code> <code>Variant</code> VisitIndentedCode ic As <code>MarkdownKit.MKIndentedCodeBlock</code> <code>Variant</code> VisitInlineHTML html As <code>MarkdownKit.MKInlineHTML</code> <code>Variant</code> VisitInlineImage image As <code>MarkdownKit.MKInlineImage</code> <code>Variant</code> VisitInlineLink link As <code>MarkdownKit.MKInlineLink</code> <code>Variant</code> VisitInlineText it As <code>MarkdownKit.MKInlineText</code> <code>Variant</code> VisitList list As <code>MarkdownKit.MKListBlock</code> <code>Variant</code> VisitListItem item As <code>MarkdownKit.MKListItemBlock</code> <code>Variant</code> VisitParagraph p As <code>MarkdownKit.MKParagraphBlock</code> <code>Variant</code> VisitSetextHeading stx As <code>MarkdownKit.MKSetextHeadingBlock</code> <code>Variant</code> VisitSoftBreak sb As <code>MarkdownKit.MKSoftBreak</code> <code>Variant</code> VisitStrongEmphasis se As <code>MarkdownKit.MKStrongEmphasis</code> <code>Variant</code> VisitTextBlock tb As <code>MarkdownKit.MKTextBlock</code> <code>Variant</code> VisitThematicBreak tb As <code>MarkdownKit.MKThematicBreak</code> <code>Variant</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEMarkdownFormatter/#constants","title":"Constants","text":"Name Type TOKEN_ATX_DELIMITER_LEVEL1 <code>String</code> TOKEN_ATX_DELIMITER_LEVEL2 <code>String</code> TOKEN_ATX_DELIMITER_LEVEL3 <code>String</code> TOKEN_ATX_DELIMITER_LEVEL4 <code>String</code> TOKEN_ATX_DELIMITER_LEVEL5 <code>String</code> TOKEN_ATX_DELIMITER_LEVEL6 <code>String</code> TOKEN_ATX_LEVEL1 <code>String</code> TOKEN_ATX_LEVEL2 <code>String</code> TOKEN_ATX_LEVEL3 <code>String</code> TOKEN_ATX_LEVEL4 <code>String</code> TOKEN_ATX_LEVEL5 <code>String</code> TOKEN_ATX_LEVEL6 <code>String</code> TOKEN_BLOCKQUOTE_DELIMITER <code>String</code> TOKEN_CODESPAN <code>String</code> TOKEN_CODESPAN_DELIMITER <code>String</code> TOKEN_CODE_LINE <code>String</code> TOKEN_DEFAULT <code>String</code> TOKEN_EMPHASIS <code>String</code> TOKEN_EMPHASIS_DELIMITER <code>String</code> TOKEN_FENCE_DELIMITER <code>String</code> TOKEN_INFO_STRING <code>String</code> TOKEN_INLINE_HTML <code>String</code> TOKEN_INLINE_LINK_LABEL <code>String</code> TOKEN_LINK_DESTINATION <code>String</code> TOKEN_LINK_DESTINATION_DELIMITER <code>String</code> TOKEN_LINK_LABEL_DELIMITER <code>String</code> TOKEN_LINK_TITLE <code>String</code> TOKEN_LINK_TITLE_DELIMITER <code>String</code> TOKEN_LIST_MARKER <code>String</code> TOKEN_SETEXTUNDERLINE_LEVEL1 <code>String</code> TOKEN_SETEXTUNDERLINE_LEVEL2 <code>String</code> TOKEN_SETEXT_LEVEL1 <code>String</code> TOKEN_SETEXT_LEVEL2 <code>String</code> TOKEN_STRONG <code>String</code> TOKEN_STRONG_AND_EMPHASIS <code>String</code> TOKEN_STRONG_DELIMITER <code>String</code> TOKEN_THEMATIC_BREAK <code>String</code> <p>TOKEN_ATX_DELIMITER_LEVEL1 As String The token type used for level 1 ATX heading delimiters.</p> <p>TOKEN_ATX_DELIMITER_LEVEL2 As String The token type used for level 2 ATX heading delimiters.</p> <p>TOKEN_ATX_DELIMITER_LEVEL3 As String The token type used for level 3 ATX heading delimiters.</p> <p>TOKEN_ATX_DELIMITER_LEVEL4 As String The token type used for level 4 ATX heading delimiters.</p> <p>TOKEN_ATX_DELIMITER_LEVEL5 As String The token type used for level 5 ATX heading delimiters.</p> <p>TOKEN_ATX_DELIMITER_LEVEL6 As String The token type used for level 6 ATX heading delimiters.</p> <p>TOKEN_ATX_LEVEL1 As String The token type used for level 1 ATX heading text.</p> <p>TOKEN_ATX_LEVEL2 As String The token type used for level 2 ATX heading text.</p> <p>TOKEN_ATX_LEVEL3 As String The token type used for level 3 ATX heading text.</p> <p>TOKEN_ATX_LEVEL4 As String The token type used for level 4 ATX heading text.</p> <p>TOKEN_ATX_LEVEL5 As String The token type used for level 5 ATX heading text.</p> <p>TOKEN_ATX_LEVEL6 As String The token type used for level 6 ATX heading text.</p> <p>TOKEN_BLOCKQUOTE_DELIMITER As String Used for block quote delimiters (<code>&gt;</code>).</p> <p>TOKEN_CODESPAN As String Used for text within a code span.</p> <p>TOKEN_CODESPAN_DELIMITER As String Used for codespan delimiters (<code>`</code>).</p> <p>TOKEN_CODE_LINE As String Used for code lines in indented and fenced code blocks.</p> <p>TOKEN_DEFAULT As String Used for default text.</p> <p>TOKEN_EMPHASIS As String Used for emphasis inline text.</p> <p>TOKEN_EMPHASIS_DELIMITER As String Used for emphasis delimiters (e.g: <code>*</code> and <code>_</code>).</p> <p>TOKEN_FENCE_DELIMITER As String Used for the delimiters around code fences (<code>```</code> and <code>~~~</code>).</p> <p>TOKEN_INFO_STRING As String Used for info strings in code fences.</p> <p>TOKEN_INLINE_HTML As String Used for inline HTML (e.g: <code>&lt;a&gt;</code>).</p> <p>TOKEN_INLINE_LINK_LABEL As String Used for the text of inline link and image labels. For example: <code>![linkLabel](destination)</code>.</p> <p>TOKEN_LINK_DESTINATION As String Used for inline and reference link destinations.</p> <p>TOKEN_LINK_DESTINATION_DELIMITER As String Used for the delimiters around the destination in inline links and images.</p> <p>TOKEN_LINK_LABEL_DELIMITER As String Used for the delimiters around inline and reference definition link labels (<code>[</code> and <code>]</code>).</p> <p>TOKEN_LINK_TITLE As String Used for inline link and image titles.</p> <p>TOKEN_LINK_TITLE_DELIMITER As String Used for the delimiters around link titles in inline links and images (<code>[</code> and <code>]</code>).</p> <p>TOKEN_LIST_MARKER As String Used for list markers (e.g: <code>-</code>, <code>1.</code>, <code>+</code>, etc).</p> <p>TOKEN_SETEXTUNDERLINE_LEVEL1 As String The token type used for the underlining of level 1 setext headings.</p> <p>TOKEN_SETEXTUNDERLINE_LEVEL2 As String The token type used for the underlining of level 2 setext headings.</p> <p>TOKEN_SETEXT_LEVEL1 As String The token type used for level 1 setext headings.</p> <p>TOKEN_SETEXT_LEVEL2 As String The token type used for level 2 setext headings.</p> <p>TOKEN_STRONG As String Used for strong emphasis inline text.</p> <p>TOKEN_STRONG_AND_EMPHASIS As String Used for combined strong emphasis and emphasis inline text (e.g: <code>***hello***</code>).</p> <p>TOKEN_STRONG_DELIMITER As String Used for strong emphasis delimiters (e.g: <code>**</code> and <code>__</code>).</p> <p>TOKEN_THEMATIC_BREAK As String Used for thematic breaks.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEMarkdownFormatter/#property-descriptions","title":"Property Descriptions","text":"<p>ATXHeadingLevel As Integer</p> <p>If the renderer is currently within an ATX heading, this is its level.</p> <p>InEmphasis As Boolean</p> <p>True if the renderer is currently within emphasis.</p> <p>InStrongEmphasis As Boolean</p> <p>True if the renderer is currently within strong emphasis.</p> <p>IsWithinATXHeading As Boolean</p> <p>True if the renderer is currently within an ATX heading.</p> <p>IsWithinCodeSpan As Boolean</p> <p>True if the renderer is currently within a code span.</p> <p>IsWithinSetextHeading As Boolean</p> <p>True if the renderer is currently within a setext heading.</p> <p>mDoc As MarkdownKit.MKDocument</p> <p>The last parsed Markdown document (AST).</p> <p>mLines() As XUICELine</p> <p>A reference to the lines to tokenise.</p> <p>mParser As MarkdownKit.MKParser</p> <p>Internal Markdown parser.</p> <p>SetextHeadingLevel As Integer</p> <p>If the renderer is currently within a setext heading, this is its level.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEMarkdownFormatter/#method-descriptions","title":"Method Descriptions","text":"<p>AllowsLeadingWhitespace() As Boolean</p> <p>True if this formatter allows whitespace at the beginning of a line. If False, the editor will strip it when pasting and prevent it from being typed.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>HandleReferenceLinkDefinitions(doc As MarkdownKit.MKDocument)</p> <p>Adds tokens for any reference link definitions in the document.</p> <p>IsCommentLine(line As XUICELine) As Boolean</p> <p>True if this entire line is a comment.</p> <p>There are no comment lines in the plain text formatter.</p> <p>Name() As String</p> <p>The name of this formatter.</p> <p>NearestDelimitersForCaretPos(caretPos As Integer) As XUICEDelimiter</p> <p>Does nothing in Markdown documents.</p> <p>Part of the <code>XUICEFormatter</code> interface. Used to return the nearest delimiters at the given <code>caretPos</code>. May be Nil.</p> <p>Parse(lines() As XUICELine)</p> <p>Called periodically by the editor. An opportunity to parse the tokenised lines. Will always be called after the lines have been tokenised.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>SupportsDelimiterHighlighting() As Boolean</p> <p>True if this formatter supports highlighting the delimiters around the caret.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>SupportsUnmatchedBlockHighlighting() As Boolean</p> <p>True if this formatter highlights unmatched blocks.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenIsComment(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is considered to be a comment.</p> <p>Tokenise(lines() As XUICELine, firstVisibleLineNumber As Integer, lastVisibleLineNumber As Integer)</p> <p>Tokenises a portion of <code>lines</code>.</p> <p>Note that we tokenise all lines, even though this method is passed the visible line numbers.</p> <p>Part of the <code>XUIFormatter</code> interface.</p> <p>TokeniseAll(lines() As XUICELine)</p> <p>Tokenises an array of lines.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenTypes() As String()</p> <p>Returns an array of all token types used by this formatter.</p> <p>VisitATXHeading(atx As MarkdownKit.MKATXHeadingBlock) As Variant</p> <p>The renderer is visiting an ATX heading.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitBlock(b As MarkdownKit.MKBlock) As Variant</p> <p>The renderer is visiting a block.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitBlockQuote(bq As MarkdownKit.MKBlockQuote) As Variant</p> <p>The renderer is visiting a block quote.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitCodeSpan(cs As MarkdownKit.MKCodeSpan) As Variant</p> <p>The renderer is visiting a code span.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitDocument(doc As MarkdownKit.MKDocument) As Variant</p> <p>The renderer is visiting a Markdown document.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitEmphasis(e As MarkdownKit.MKEmphasis) As Variant</p> <p>The renderer is visiting an emphasis node.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitFencedCode(fc As MarkdownKit.MKFencedCodeBlock) As Variant</p> <p>The renderer is visiting some fenced code.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitHTMLBlock(html As MarkdownKit.MKHTMLBlock) As Variant</p> <p>The renderer is visiting an HTML block.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitIndentedCode(ic As MarkdownKit.MKIndentedCodeBlock) As Variant</p> <p>The renderer is visiting some indented code.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitInlineHTML(html As MarkdownKit.MKInlineHTML) As Variant</p> <p>The renderer is visiting some inline HTML. code.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitInlineImage(image As MarkdownKit.MKInlineImage) As Variant</p> <p>The renderer is visiting an inline image.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>Link types:</p> <pre><code>Shortcut: `![foo]`\nCollapsed: `![foo][]`\nFull: `![foo](foo.com)`\n</code></pre> <p>VisitInlineLink(link As MarkdownKit.MKInlineLink) As Variant</p> <p>The renderer is visiting an inline link.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>Link types:</p> <pre><code>Shortcut: `[foo]`\nCollapsed: `[foo][]`\nFull: `[foo](foo.com)`\n</code></pre> <p>VisitInlineText(it As MarkdownKit.MKInlineText) As Variant</p> <p>The renderer is visiting some inline text.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitList(list As MarkdownKit.MKListBlock) As Variant</p> <p>The renderer is visiting a list.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitListItem(item As MarkdownKit.MKListItemBlock) As Variant</p> <p>The renderer is visiting a list item.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitParagraph(p As MarkdownKit.MKParagraphBlock) As Variant</p> <p>The renderer is visiting a paragraph block.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitSetextHeading(stx As MarkdownKit.MKSetextHeadingBlock) As Variant</p> <p>The renderer is visiting a setext heading.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitSoftBreak(sb As MarkdownKit.MKSoftBreak) As Variant</p> <p>The renderer is visiting a soft break.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitStrongEmphasis(se As MarkdownKit.MKStrongEmphasis) As Variant</p> <p>The renderer is visiting a strong emphasis node.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitTextBlock(tb As MarkdownKit.MKTextBlock) As Variant</p> <p>The renderer is visiting a text block.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p> <p>VisitThematicBreak(tb As MarkdownKit.MKThematicBreak) As Variant</p> <p>The renderer is visiting a thematic break.</p> <p>Part of the <code>MarkdownKit.MKRenderer</code> interface.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/","title":"XUICEObjoScriptFormatter","text":"<p>Inherits <code>XUICEAbstractFormatter</code></p> <p>Implements <code>XUICEFormatter</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/#description","title":"Description","text":"<p>A <code>XUICodeEditor</code> formatter for the Wren programming language.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/#properties","title":"Properties","text":"Name Type Read-Only Delimiters() <code>XUICELineToken</code> Keywords <code>Dictionary</code> \u2714 MatchedDelimiters <code>Dictionary</code> MatchedOpeningDelimiters() <code>XUICELineToken</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/#methods","title":"Methods","text":"Name Parameters Returns AddComment <code>Boolean</code> AddHexNumberToken AddIdentifierOrKeywordToken AddMatchingDelimiters openingDelimiter As <code>XUICELineToken</code>, closingDelimiter As <code>XUICELineToken</code> AddNumberToken AddStringToken AllowsLeadingWhitespace <code>Boolean</code> FirstNonCommentToken line As <code>XUICELine</code> <code>XUICELineToken</code> IndentLines InitialiseKeywordsDictionary <code>Dictionary</code> IsClosingDelimiter t As <code>XUICELineToken</code> <code>Boolean</code> IsCommentLine line As <code>XUICELine</code> <code>Boolean</code> IsCommentToken token As <code>XUICELineToken</code> <code>Boolean</code> IsLCurly t As <code>XUICELineToken</code> <code>Boolean</code> IsOpeningDelimiter t As <code>XUICELineToken</code> <code>Boolean</code> LastNonCommentToken line As <code>XUICELine</code> <code>XUICELineToken</code> Name <code>String</code> NearestDelimitersForCaretPos caretPos As <code>Integer</code> <code>XUICEDelimiter</code> NextToken Parse lines() As <code>XUICELine</code> ProcessDelimiters SetContinuationStatus line As <code>XUICELine</code>, previousLineLastToken As <code>XUICELineToken</code> SkipWhitespace SupportsDelimiterHighlighting <code>Boolean</code> SupportsUnmatchedBlockHighlighting <code>Boolean</code> TokenIsComment token As <code>XUICELineToken</code> <code>Boolean</code> Tokenise lines() As <code>XUICELine</code>, firstVisibleLineNumber As <code>Integer</code>, lastVisibleLineNumber As <code>Integer</code> TokeniseAll lines() As <code>XUICELine</code> TokenTypes <code>String()</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/#constants","title":"Constants","text":"Name Type TOKEN_ESCAPE <code>String</code> <p>TOKEN_ESCAPE As String Used for escape sequences.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/#enumerations","title":"Enumerations","text":"<p>CommentTypes</p> <p>Used internally. The different types of supported comments.</p> Name Block SingleLine"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/#property-descriptions","title":"Property Descriptions","text":"<p>Delimiters() As XUICELineToken</p> <p>A sorted array of all delimiter tokens in the source code.</p> <p>Keywords As Dictionary</p> <p>Case sensitive dictionary of keywords. Key = Keyword, Value = Nil.</p> <p>MatchedDelimiters As Dictionary</p> <p>All matched delimiters in the source code. Key = <code>Delimiter A</code> (<code>XUICELineToken</code>), Value = Delimiter matching <code>Delimiter A</code> (<code>XUICELineToken</code>).</p> <p>MatchedOpeningDelimiters() As XUICELineToken</p> <p>An array of all opening delimiters that have a matching closing delimiter sorted by their position in the source code (index 0 = first matched delimiter in the source code).</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEObjoScriptFormatter/#method-descriptions","title":"Method Descriptions","text":"<p>AddComment() As Boolean</p> <p>Attempts to add a comment beginning from the current position. Returns True if successful.</p> <p>Assumes the pointer is yet to consume the opening delimiter.</p> <p>Comments start with <code>//</code> and end at the end of the line:</p> <pre><code>// This is comment.\nvar age = 40 // This is also a comment.\n</code></pre> <p>AddHexNumberToken()</p> <p>Consumes and adds a hex number token starting at <code>mCurrent</code>.</p> <p>Assumes that <code>mCurrent</code> points at the first hex digit (which has been verified to exist).</p> <pre><code>0xFF\n  ^\n</code></pre> <p>AddIdentifierOrKeywordToken()</p> <p>Adds either an identifier or keyword beginning at <code>mTokenStartLocal</code>.</p> <p>Assumes that <code>mTokenStartLocal</code> is a valid identifier or keyword starting character and that <code>mCurrent</code> is pointing to the character immediately following the starting character.</p> <p>AddMatchingDelimiters(openingDelimiter As XUICELineToken, closingDelimiter As XUICELineToken)</p> <p>Adds the passed matching delimiters the <code>MatchedDelimiters</code> dictionary and the <code>SortedMatchedDelimiters</code> array.</p> <p>We add both delimiters as keys so we can find either.</p> <p>AddNumberToken()</p> <p>Consumes and adds a number token starting at <code>mCurrent</code>.</p> <p>Assumes that <code>mCurrent</code> points at a digit.</p> <p>AddStringToken()</p> <p>Attempts to consume and add a string token starting at <code>mCurrent</code>.</p> <p>Assumes we have just consumed a double quote (<code>\"</code>):</p> <pre><code>name = \"Hello\"\n        ^\n</code></pre> <p>A successful string will have separate tokens for its opening and closing delimiters. This allows us to tokenise escaped quotes differently from the rest of the string.</p> <p>AllowsLeadingWhitespace() As Boolean</p> <p>True if this formatter allows whitespace at the beginning of a line. If False, the editor will strip it when pasting and prevent it from being typed.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>FirstNonCommentToken(line As XUICELine) As XUICELineToken</p> <p>Returns the first token on <code>line</code> that is not a comment or Nil if the line there are none.</p> <p>Assumes <code>line</code> is not Nil.</p> <p>IndentLines()</p> <p>Sets the indentation and continuation levels for each line.</p> <p>Assumes <code>ProcessDelimiters()</code> has been called prior to this method.</p> <p>InitialiseKeywordsDictionary() As Dictionary</p> <p>Returns a case-sensitive dictionary of ObjoScript's keywords / reserved words.</p> <p>IsClosingDelimiter(t As XUICELineToken) As Boolean</p> <p>True if <code>t</code> is a closing delimiter like <code>}</code>, <code>)</code> or <code>]</code>.</p> <p>Assumes <code>t</code> is not Nil.</p> <p>IsCommentLine(line As XUICELine) As Boolean</p> <p>True if this entire line is a comment.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>IsCommentToken(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is a comment.</p> <p>Assumes <code>token</code> is not Nil.</p> <p>IsLCurly(t As XUICELineToken) As Boolean</p> <p>True if <code>t</code> is a left curly bracket.</p> <p>Assumes <code>t</code> is not Nil.</p> <p>IsOpeningDelimiter(t As XUICELineToken) As Boolean</p> <p>True if <code>t</code> is an opening delimiter like <code>{</code>, <code>(</code> or <code>[</code>.</p> <p>Assumes <code>t</code> is not Nil.</p> <p>LastNonCommentToken(line As XUICELine) As XUICELineToken</p> <p>Returns the last token on <code>line</code> that is not a comment or Nil if the line there are none.</p> <p>Assumes <code>line</code> is not Nil.</p> <p>Name() As String</p> <p>The name of this formatter.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>NearestDelimitersForCaretPos(caretPos As Integer) As XUICEDelimiter</p> <p>Returns the nearest delimiters at the given <code>caretPos</code>. May be Nil.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>NextToken()</p> <p>Generates the next token and appends it to <code>mLine.Tokens</code>.</p> <p>Parse(lines() As XUICELine)</p> <p>Called periodically by the editor. An opportunity to parse the tokenised lines. Will always be called after the lines have been tokenised.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>ProcessDelimiters()</p> <p>Finds the locations of matching delimiters (e.g: braces, parentheses, etc) and adds them to <code>MatchedDelimiters</code>.</p> <p>SetContinuationStatus(line As XUICELine, previousLineLastToken As XUICELineToken)</p> <p>Sets <code>line.IsContinuation</code> based on the last token of the previous line.</p> <p>Assumes <code>line</code> is not Nil. <code>previousLineLastToken</code> may be Nil.</p> <p>SkipWhitespace()</p> <p>Advances past whitespace.</p> <p>SupportsDelimiterHighlighting() As Boolean</p> <p>Returns True as this formatter supports highlighting the delimiters around the caret.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>SupportsUnmatchedBlockHighlighting() As Boolean</p> <p>True if this formatter highlights unmatched blocks.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenIsComment(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is considered to be a comment.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>Tokenise(lines() As XUICELine, firstVisibleLineNumber As Integer, lastVisibleLineNumber As Integer)</p> <p>Tokenises a portion of <code>lines</code>.</p> <p>Note that we tokenise all lines, even though this method is passed the visible line numbers.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokeniseAll(lines() As XUICELine)</p> <p>Tokenises an array of lines.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenTypes() As String()</p> <p>Returns an array of all token types used by this formatter.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICETextFormatter/","title":"XUICETextFormatter","text":"<p>Implements <code>XUICEFormatter</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICETextFormatter/#description","title":"Description","text":"<p>A plain text formatter for the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICETextFormatter/#methods","title":"Methods","text":"Name Parameters Returns AllowsLeadingWhitespace <code>Boolean</code> IsCommentLine line As <code>XUICELine</code> <code>Boolean</code> Name <code>String</code> NearestDelimitersForCaretPos caretPos As <code>Integer</code> <code>XUICEDelimiter</code> Parse lines() As <code>XUICELine</code> SupportsDelimiterHighlighting <code>Boolean</code> SupportsUnmatchedBlockHighlighting <code>Boolean</code> TokenIsComment token As <code>XUICELineToken</code> <code>Boolean</code> Tokenise lines() As <code>XUICELine</code>, firstVisibleLineNumber As <code>Integer</code>, lastVisibleLineNumber As <code>Integer</code> TokeniseAll lines() As <code>XUICELine</code> TokeniseLine line As <code>XUICELine</code> TokenTypes <code>String()</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICETextFormatter/#constants","title":"Constants","text":"Name Type TOKEN_DEFAULT <code>String</code> <p>TOKEN_DEFAULT As String The <code>default</code> token (the only token generated by this formatter).</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICETextFormatter/#method-descriptions","title":"Method Descriptions","text":"<p>AllowsLeadingWhitespace() As Boolean</p> <p>True if this formatter allows whitespace at the beginning of a line. If False, the editor will strip it when pasting and prevent it from being typed.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>IsCommentLine(line As XUICELine) As Boolean</p> <p>True if this entire line is a comment.</p> <p>There are no comment lines in the plain text formatter.</p> <p>Name() As String</p> <p>The name of this formatter.</p> <p>NearestDelimitersForCaretPos(caretPos As Integer) As XUICEDelimiter</p> <p>Returns the nearest delimiters at the given <code>caretPos</code>. Always returns Nil as this formatter doesn't support this feature.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>Parse(lines() As XUICELine)</p> <p>Called periodically by the editor. An opportunity to parse the tokenised lines. Will always be called after the lines have been tokenised.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>SupportsDelimiterHighlighting() As Boolean</p> <p>Whether this formatter supports highlighting the delimiters around the caret. Always returns False.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>SupportsUnmatchedBlockHighlighting() As Boolean</p> <p>True if this formatter highlights unmatched blocks.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenIsComment(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is considered to be a comment.</p> <p>Tokenise(lines() As XUICELine, firstVisibleLineNumber As Integer, lastVisibleLineNumber As Integer)</p> <p>Tokenises a portion of <code>lines</code>.</p> <p>Note that we tokenise all lines, even though this method is passed the visible line numbers.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokeniseAll(lines() As XUICELine)</p> <p>Tokenises an array of lines.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokeniseLine(line As XUICELine)</p> <p>Tokenises a single line.</p> <p>TokenTypes() As String()</p> <p>Returns an array of all token types used by this formatter.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/","title":"XUICEWrenFormatter","text":"<p>Inherits <code>XUICEAbstractFormatter</code></p> <p>Implements <code>XUICEFormatter</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/#description","title":"Description","text":"<p>A <code>XUICodeEditor</code> formatter for the Wren programming language.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/#properties","title":"Properties","text":"Name Type Read-Only Delimiters() <code>XUICELineToken</code> Keywords <code>Dictionary</code> \u2714 MatchedDelimiters <code>Dictionary</code> MatchedOpeningDelimiters() <code>XUICELineToken</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/#methods","title":"Methods","text":"Name Parameters Returns AddComment <code>Boolean</code> AddHexNumberToken AddIdentifierOrKeywordToken AddMatchingDelimiters openingDelimiter As <code>XUICELineToken</code>, closingDelimiter As <code>XUICELineToken</code> AddMultilineTokens type As <code>String</code>, startLine As <code>Integer</code>, startLocal As <code>Integer</code>, endLine As <code>Integer</code>, endPosLocal As <code>Integer</code>, fallbackType As <code>String</code> <code>XUICELineToken</code> AddNumberToken AddRawStringToken AddStringToken AllowsLeadingWhitespace <code>Boolean</code> FirstNonCommentToken line As <code>XUICELine</code> <code>XUICELineToken</code> HandleStringEscapeSequence stringStartLine As <code>Integer</code> <code>Boolean</code> HandleStringInterpolation stringStartLine As <code>Integer</code> <code>Boolean</code> IndentLines InitialiseKeywordsDictionary <code>Dictionary</code> IsClosingDelimiter t As <code>XUICELineToken</code> <code>Boolean</code> IsCommentLine line As <code>XUICELine</code> <code>Boolean</code> IsCommentToken token As <code>XUICELineToken</code> <code>Boolean</code> IsOpeningDelimiter t As <code>XUICELineToken</code> <code>Boolean</code> LastNonCommentToken line As <code>XUICELine</code> <code>XUICELineToken</code> Name <code>String</code> NearestDelimitersForCaretPos caretPos As <code>Integer</code> <code>XUICEDelimiter</code> NextToken Parse lines() As <code>XUICELine</code> ProcessDelimiters SetContinuationStatus line As <code>XUICELine</code>, previousLineLastToken As <code>XUICELineToken</code> SkipWhitespace SupportsDelimiterHighlighting <code>Boolean</code> SupportsUnmatchedBlockHighlighting <code>Boolean</code> TokenIsComment token As <code>XUICELineToken</code> <code>Boolean</code> Tokenise lines() As <code>XUICELine</code>, firstVisibleLineNumber As <code>Integer</code>, lastVisibleLineNumber As <code>Integer</code> TokeniseAll lines() As <code>XUICELine</code> TokenTypes <code>String()</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/#constants","title":"Constants","text":"Name Type TOKEN_ESCAPE <code>String</code> TOKEN_INTERPOLATION <code>String</code> <p>TOKEN_ESCAPE As String Used for escape sequences.</p> <p>TOKEN_INTERPOLATION As String Used for string interpolations (e.g: <code>%(name)</code>).</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/#enumerations","title":"Enumerations","text":"<p>CommentTypes</p> <p>Used internally. The different types of supported comments.</p> Name Block SingleLine"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/#property-descriptions","title":"Property Descriptions","text":"<p>Delimiters() As XUICELineToken</p> <p>A sorted array of all delimiter tokens in the source code.</p> <p>Keywords As Dictionary</p> <p>Case sensitive dictionary of keywords. Key = Keyword, Value = Nil.</p> <p>MatchedDelimiters As Dictionary</p> <p>All matched delimiters in the source code. Key = <code>Delimiter A</code> (<code>XUICELineToken</code>), Value = Delimiter matching <code>Delimiter A</code> (<code>XUICELineToken</code>).</p> <p>MatchedOpeningDelimiters() As XUICELineToken</p> <p>An array of all opening delimiters that have a matching closing delimiter sorted by their position in the source code (index 0 = first matched delimiter in the source code).</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEWrenFormatter/#method-descriptions","title":"Method Descriptions","text":"<p>AddComment() As Boolean</p> <p>Attempts to add a comment beginning from the current position. Returns True if successful.</p> <p>Assumes the pointer is yet to consume the opening delimiter.</p> <p>Single line comments start with <code>//</code> and end at the end of the line:</p> <pre><code>// This is comment.\nvar age = 40 // This is also a comment.\n</code></pre> <p>Block comments start with <code>\\*</code> and end with <code>*/</code>. They can span multiple lines:</p> <pre><code>  /* This\n     a\n  multi-line\n  comment. */\n</code></pre> <p>They can also be nested:</p> <pre><code>  /* This is /* a nested */ comment. */\n</code></pre> <p>AddHexNumberToken()</p> <p>Consumes and adds a hex number token starting at <code>mCurrent</code>.</p> <p>Assumes that <code>mCurrent</code> points at the first hex digit (which has been verified to exist).</p> <pre><code>0xFF\n  ^\n</code></pre> <p>AddIdentifierOrKeywordToken()</p> <p>Adds either an identifier or keyword beginning at <code>mTokenStartLocal</code>.</p> <p>Assumes that <code>mTokenStartLocal</code> is a valid identifier or keyword starting character and that <code>mCurrent</code> is pointing to the character immediately following the starting character.</p> <p>AddMatchingDelimiters(openingDelimiter As XUICELineToken, closingDelimiter As XUICELineToken)</p> <p>Adds the passed matching delimiters the <code>MatchedDelimiters</code> dictionary and the <code>SortedMatchedDelimiters</code> array.</p> <p>We add both delimiters as keys so we can find either.</p> <p>AddMultilineTokens(type As String, startLine As Integer, startLocal As Integer, endLine As Integer, endPosLocal As Integer, fallbackType As String) As XUICELineToken</p> <p>Adds contiguous tokens of <code>type</code> beginning at <code>startLine</code> and <code>startLocal</code> all the way to <code>endLine</code> <code>endPosLocal</code>. Returns the last token added. the last token.</p> <p>Assumes that all arguments are valid. <code>fallbackType</code> is the generic fallback token style to use if the editor's current theme doesn't define a style named <code>type</code>. Assumes <code>fallbackType</code> is a valid fallback type (i.e. one of the constants in <code>XUICELineToken</code>).</p> <p>AddNumberToken()</p> <p>Consumes and adds a number token starting at <code>mCurrent</code>.</p> <p>Assumes that <code>mCurrent</code> points at a digit.</p> <p>AddRawStringToken()</p> <p>Attempts to consume and add a raw string token.</p> <p>Assumes that <code>mCurrent</code> points here:</p> <pre><code>\"\"\"Hello \"\"\"\n   ^\n\n\"\"\"\n   ^\nMultiline\n\"\"\"\n</code></pre> <p>AddStringToken()</p> <p>Attempts to consume and add a string token starting at <code>mCurrent</code>.</p> <p>Assumes we have just consumed a double quote (<code>\"</code>):</p> <pre><code>name = \"Hello\"\n        ^\n</code></pre> <p>If the string is successfully added then the closing delimiter will be assigned a data key <code>\"isClosingDelimiter\"</code> with a value of <code>True</code>. This is used later when parsing.</p> <p>AllowsLeadingWhitespace() As Boolean</p> <p>True if this formatter allows whitespace at the beginning of a line. If False, the editor will strip it when pasting and prevent it from being typed.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>FirstNonCommentToken(line As XUICELine) As XUICELineToken</p> <p>Returns the first token on <code>line</code> that is not a comment or Nil if the line there are none.</p> <p>Assumes <code>line</code> is not Nil.</p> <p>HandleStringEscapeSequence(stringStartLine As Integer) As Boolean</p> <p>Determines if there is a valid string escape sequence. Adds the relevant token(s) if so and returns True, otherwise returns False.</p> <p>Assumes were are within a string and have peeked to see <code>\\</code>:</p> <pre><code>System.write(\"age \\tcool\")\n                  ^\n</code></pre> <p><code>stringStartLine</code> is the number of the line that the preceding open string begins at. <code>mTokenStartLocal</code> points to the local position of the start of the preceding string.</p> <p>HandleStringInterpolation(stringStartLine As Integer) As Boolean</p> <p>Determines if there is a valid string interpolation. Adds the token(s) if so and returns True, otherwise returns False.</p> <p>Assumes were are within a string and have peeked to see <code>%(</code>:</p> <pre><code>System.write(\"age %(25 + 15)\"\n                  ^\n</code></pre> <p><code>stringStartLine</code> is the number of the line that the preceding open string begins at. <code>mTokenStartLocal</code> points to the local position of the start of the preceding string.</p> <p>IndentLines()</p> <p>Sets the indentation and continuation levels for each line.</p> <p>Assumes <code>ProcessDelimiters()</code> has been called prior to this method.</p> <p>InitialiseKeywordsDictionary() As Dictionary</p> <p>Returns a case-sensitive dictionary of Wren's keywords / reserved words.</p> <p>IsClosingDelimiter(t As XUICELineToken) As Boolean</p> <p>True if <code>t</code> is a closing delimiter like <code>}</code>, <code>)</code> or <code>]</code>.</p> <p>Assumes <code>t</code> is not Nil.</p> <p>IsCommentLine(line As XUICELine) As Boolean</p> <p>True if this entire line is a comment.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>IsCommentToken(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is a comment.</p> <p>Assumes <code>token</code> is not Nil.</p> <p>IsOpeningDelimiter(t As XUICELineToken) As Boolean</p> <p>True if <code>t</code> is an opening delimiter like <code>{</code>, <code>(</code> or <code>[</code>.</p> <p>Assumes <code>t</code> is not Nil.</p> <p>LastNonCommentToken(line As XUICELine) As XUICELineToken</p> <p>Returns the last token on <code>line</code> that is not a comment or Nil if the line there are none.</p> <p>Assumes <code>line</code> is not Nil.</p> <p>Name() As String</p> <p>The name of this formatter.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>NearestDelimitersForCaretPos(caretPos As Integer) As XUICEDelimiter</p> <p>Returns the nearest delimiters at the given <code>caretPos</code>. May be Nil.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>NextToken()</p> <p>Generates the next token and appends it to <code>mLine.Tokens</code>.</p> <p>Parse(lines() As XUICELine)</p> <p>Called periodically by the editor. An opportunity to parse the tokenised lines. Will always be called after the lines have been tokenised.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>ProcessDelimiters()</p> <p>Finds the locations of matching delimiters (e.g: braces, parentheses, etc) and adds them to <code>MatchedDelimiters</code>.</p> <p>SetContinuationStatus(line As XUICELine, previousLineLastToken As XUICELineToken)</p> <p>Sets <code>line.IsContinuation</code> based on the last token of the previous line.</p> <p>Assumes <code>line</code> is not Nil. <code>previousLineLastToken</code> may be Nil.</p> <p>SkipWhitespace()</p> <p>Advances past whitespace.</p> <p>SupportsDelimiterHighlighting() As Boolean</p> <p>Returns True as this formatter supports highlighting the delimiters around the caret.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>SupportsUnmatchedBlockHighlighting() As Boolean</p> <p>True if this formatter highlights unmatched blocks.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenIsComment(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is considered to be a comment.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>Tokenise(lines() As XUICELine, firstVisibleLineNumber As Integer, lastVisibleLineNumber As Integer)</p> <p>Tokenises a portion of <code>lines</code>.</p> <p>Note that we tokenise all lines, even though this method is passed the visible line numbers.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokeniseAll(lines() As XUICELine)</p> <p>Tokenises an array of lines.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenTypes() As String()</p> <p>Returns an array of all token types used by this formatter.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/","title":"XUICEXojoFormatter","text":"<p>Inherits <code>XUICEAbstractFormatter</code></p> <p>Implements <code>XUICEFormatter</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/#description","title":"Description","text":"<p>A formatter for the Xojo language. In addition to tokenising the language components you'd expect (keywords,  operators, etc) it also tokenises the components of <code>Color</code> literals (like the Xojo IDE) and escaped double quotes within strings.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/#properties","title":"Properties","text":"Name Type Read-Only BlockBoundaries() <code>XUICELineToken</code> Keywords <code>Dictionary</code> \u2714 MatchedLeftParentheses() <code>XUICELineToken</code> MatchedParentheses <code>Dictionary</code> Parentheses() <code>XUICELineToken</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/#methods","title":"Methods","text":"Name Parameters Returns AddComment <code>Boolean</code> AddIdentifierOrKeywordToken AddMatchingParentheses lparen As <code>XUICELineToken</code>, rparen As <code>XUICELineToken</code> AddNumberToken AddPragmaToken AddStringToken AllowsLeadingWhitespace <code>Boolean</code> CanCloseBlock blockStart As <code>XojoKeywords</code>, blockEnd As <code>XojoKeywords</code> <code>Boolean</code> ClosestCodeLineAbove lines() As <code>XUICELine</code>, lineNumber As <code>Integer</code> <code>XUICELine</code> FirstNonCommentToken line As <code>XUICELine</code> <code>XUICELineToken</code> IndentLines lines() As <code>XUICELine</code> IsCommentLine line As <code>XUICELine</code> <code>Boolean</code> IsCommentToken token As <code>XUICELineToken</code> <code>Boolean</code> IsSingleLineIfStatement line As <code>XUICELine</code> <code>Boolean</code> LastNonCommentToken line As <code>XUICELine</code> <code>XUICELineToken</code> Name <code>String</code> NearestDelimitersForCaretPos caretPos As <code>Integer</code> <code>XUICEDelimiter</code> NextToken Parse lines() As <code>XUICELine</code> ProcessParentheses SkipWhitespace SupportsDelimiterHighlighting <code>Boolean</code> SupportsUnmatchedBlockHighlighting <code>Boolean</code> TokenIsComment token As <code>XUICELineToken</code> <code>Boolean</code> Tokenise lines() As <code>XUICELine</code>, firstVisibleLineNumber As <code>Integer</code>, lastVisibleLineNumber As <code>Integer</code> TokeniseAll lines() As <code>XUICELine</code> TokenTypes <code>String()</code> TryAddBinaryLiteral <code>Boolean</code> TryAddColorLiteral <code>Boolean</code> TryAddHexLiteral <code>Boolean</code> TryAddOctalLiteral <code>Boolean</code> TryAddUnicodeLiteral <code>Boolean</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/#constants","title":"Constants","text":"Name Type TOKEN_ALPHA_COMPONENT <code>String</code> TOKEN_BLUE_COMPONENT <code>String</code> TOKEN_COLOR_PREFIX <code>String</code> TOKEN_ESCAPE <code>String</code> TOKEN_GREEN_COMPONENT <code>String</code> TOKEN_PRAGMA <code>String</code> TOKEN_RED_COMPONENT <code>String</code> <p>TOKEN_ALPHA_COMPONENT As String The alpha component of a color literal.</p> <p>TOKEN_BLUE_COMPONENT As String The blue component of a color literal.</p> <p>TOKEN_COLOR_PREFIX As String Used for the <code>&amp;c</code> prefix in Color literals.</p> <p>TOKEN_ESCAPE As String Used for escape sequences.</p> <p>TOKEN_GREEN_COMPONENT As String The green component of a color literal.</p> <p>TOKEN_PRAGMA As String Used for the pragma keyword.</p> <p>TOKEN_RED_COMPONENT As String The red component of a color literal.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/#enumerations","title":"Enumerations","text":"<p>XojoKeywords</p> <p>Xojo's keywords.</p> Name AddHandler_ AddressOf_ Array_ As_ Assigns_ Break_ ByRef_ ByVal_ Call_ Case_ Catch_ Class_ Const_ Continue_ CType_ Declare_ Dim_ Do_ DownTo_ Each_ Else_ ElseIf_ End_ Event_ Exception_ Exit_ Extends_ Finally_ For_ Function_ GetTypeInfo_ Global_ GoTo_ If_ Implements_ Inherits_ Interface_ Loop_ Module_ Next_ Optional_ ParamArray_ Private_ Property_ Protected_ Public_ Raise_ RaiseEvent_ Redim_ RemoveHandler_ Return_ Select_ Self_ Shared_ Static_ Sub_ Super_ Then_ Try_ Until_ Using_ Var_ While_ Wend_"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/#property-descriptions","title":"Property Descriptions","text":"<p>BlockBoundaries() As XUICELineToken</p> <p>A sorted array of all tokens that mark the start or end of a block.</p> <p>Keywords As Dictionary</p> <p>Case insensitive dictionary of keywords. Key = Keyword, Value = XojoKeywords enumeration.</p> <p>MatchedLeftParentheses() As XUICELineToken</p> <p>An array of all left parentheses with a matching right parenthesis sorted by their position in the source code (index 0 = first matched pair of parentheses in the source code).</p> <p>MatchedParentheses As Dictionary</p> <p>All pairs of matching parentheses in the source code. Key = Left parenthesis (<code>XUICELineToken</code>), Value = Matching right parenthesis (<code>XUICELineToken</code>).</p> <p>Parentheses() As XUICELineToken</p> <p>A sorted array of all parenthesis tokens in the source code.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Formatters/XUICEXojoFormatter/#method-descriptions","title":"Method Descriptions","text":"<p>AddComment() As Boolean</p> <p>Attempts to add a comment beginning from the current position. Returns True if successful.</p> <p>Assumes the pointer is yet to consume the opening delimiter.</p> <p>Comments start with <code>//</code> , <code>'</code> or <code>rem</code> and end at the end of the line:</p> <pre><code>// This is comment.\nvar age = 40 ' This is also a comment.\nrem This is also a comment\n</code></pre> <p>AddIdentifierOrKeywordToken()</p> <p>Adds either an identifier or keyword beginning at <code>mTokenStartLocal</code>.</p> <p>Assumes that <code>mTokenStartLocal</code> is a valid identifier or keyword starting character and that <code>mCurrent</code> is pointing to the character immediately following the starting character.</p> <p>AddMatchingParentheses(lparen As XUICELineToken, rparen As XUICELineToken)</p> <p>Adds the passed matching parentheses to the <code>MatchedParentheses</code> dictionary and the <code>MatchedOpeningParentheses</code> array.</p> <p>We add both parentheses as keys so we can find either.</p> <p>AddNumberToken()</p> <p>Consumes and adds a number token starting at <code>mCurrent</code>.</p> <p>Assumes that <code>mCurrent</code> points at a digit.</p> <p>AddPragmaToken()</p> <p>Attempts to consume and add a pragma token starting at <code>mCurrent</code>.</p> <p>Assumes we have just consumed the <code>#</code> character.</p> <pre><code>#Pragma Something\n ^\n</code></pre> <p>AddStringToken()</p> <p>Attempts to consume and add a string token starting at <code>mCurrent</code>.</p> <p>Assumes we have just consumed a double quote (<code>\"</code>):</p> <pre><code>name = \"Hello\"\n        ^\n</code></pre> <p>A successful string will have seaprate tokens for its opening and closing delimiters. This allows us to tokenise escaped quotes differently from the rest of the string.</p> <p>AllowsLeadingWhitespace() As Boolean</p> <p>True if this formatter allows whitespace at the beginning of a line. If False, the editor will strip it when pasting and prevent it from being typed.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>CanCloseBlock(blockStart As XojoKeywords, blockEnd As XojoKeywords) As Boolean</p> <p>Returns True if <code>blockEnd</code> can close <code>blockStart</code>.</p> <p>ClosestCodeLineAbove(lines() As XUICELine, lineNumber As Integer) As XUICELine</p> <p>Returns the line above <code>lineNumber</code> that is not blank not just a comment line. May return Nil.</p> <p>FirstNonCommentToken(line As XUICELine) As XUICELineToken</p> <p>Returns the first token on <code>line</code> that is not a comment or Nil if there are none.</p> <p>Assumes <code>line</code> is not Nil.</p> <p>IndentLines(lines() As XUICELine)</p> <p>Sets the indentation / continuation status of the passed <code>lines</code>.</p> <p>IsCommentLine(line As XUICELine) As Boolean</p> <p>True if this entire line is a comment.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>IsCommentToken(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is a comment.</p> <p>Assumes <code>token</code> is not Nil.</p> <p>IsSingleLineIfStatement(line As XUICELine) As Boolean</p> <p>True if <code>line</code> is a single line if statement.</p> <p>LastNonCommentToken(line As XUICELine) As XUICELineToken</p> <p>Returns the last token on <code>line</code> that is not a comment or Nil if there is none.</p> <p>Assumes <code>line</code> is not Nil.</p> <p>Name() As String</p> <p>The name of this formatter.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>NearestDelimitersForCaretPos(caretPos As Integer) As XUICEDelimiter</p> <p>Returns the nearest delimiters at the given <code>caretPos</code>. May be Nil.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>NextToken()</p> <p>Generates the next token and appends it to <code>mLine.Tokens</code>.</p> <p>Parse(lines() As XUICELine)</p> <p>Called periodically by the editor. An opportunity to parse the tokenised lines. Will always be called after the lines have been tokenised.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>ProcessParentheses()</p> <p>Finds the locations of parentheses and adds them to <code>MatchedParentheses</code>.</p> <p>SkipWhitespace()</p> <p>Advances past whitespace.</p> <p>SupportsDelimiterHighlighting() As Boolean</p> <p>Returns True as this formatter supports highlighting the parentheses around the caret.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>SupportsUnmatchedBlockHighlighting() As Boolean</p> <p>True if this formatter highlights unmatched blocks.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenIsComment(token As XUICELineToken) As Boolean</p> <p>True if <code>token</code> is considered to be a comment.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>Tokenise(lines() As XUICELine, firstVisibleLineNumber As Integer, lastVisibleLineNumber As Integer)</p> <p>Tokenises a portion of <code>lines</code>.</p> <p>Note that we tokenise all lines, even though this method is passed the visible line numbers.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokeniseAll(lines() As XUICELine)</p> <p>Tokenises an array of lines.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TokenTypes() As String()</p> <p>Returns an array of any non standard token types used by this formatter.</p> <p>Part of the <code>XUICEFormatter</code> interface.</p> <p>TryAddBinaryLiteral() As Boolean</p> <p>Tries to consume and add a binary literal token. Returns True if successful.</p> <p>Assumes that <code>mCurrent</code> points here:</p> <pre><code>&amp;b0110\n  ^\n</code></pre> <p>TryAddColorLiteral() As Boolean</p> <p>Tries to consume and add a Color literal token. Returns True if successful.</p> <p>Assumes that <code>mCurrent</code> points here:</p> <pre><code>&amp;c123456\n  ^\n</code></pre> <p>Valid tokens (where R, G, B &amp; A are hex digits):</p> <pre><code>&amp;cRGB\n&amp;cRRGGBB\n&amp;cRRGGBBAA\n</code></pre> <p>TryAddHexLiteral() As Boolean</p> <p>Tries to consume and add a hexadecimal literal token. Returns True if successful.</p> <p>Assumes that <code>mCurrent</code> points here:</p> <pre><code>&amp;hAB19\n  ^\n</code></pre> <p>TryAddOctalLiteral() As Boolean</p> <p>Tries to consume and add an octal literal token. Returns True if successful.</p> <p>Assumes that <code>mCurrent</code> points here:</p> <pre><code>&amp;o0134\n  ^\n</code></pre> <p>TryAddUnicodeLiteral() As Boolean</p> <p>Tries to consume and add a unicode literal token. Returns True if successful.</p> <p>Assumes that <code>mCurrent</code> points here:</p> <pre><code>&amp;u13\n  ^\n</code></pre>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableDelete/","title":"XUICEUndoableDelete","text":"<p>Implements <code>XUIUndoableAction</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableDelete/#description","title":"Description","text":"<p>Stores the data required to undo / redo a deletion within the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableDelete/#properties","title":"Properties","text":"Name Type Read-Only mDeletedText <code>String</code> mDescription <code>String</code> mEditor <code>XUICodeEditor</code> mID <code>Integer</code> mSelection <code>XUITextSelection</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableDelete/#methods","title":"Methods","text":"Name Parameters Returns Constructor editor As <code>XUICodeEditor</code>, id As <code>Integer</code>, description As <code>String</code>, deletedText As <code>String</code>, selection As <code>XUITextSelection</code> Description <code>String</code> ID <code>Integer</code> ID Assigns value As <code>Integer</code> Redo Undo"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableDelete/#property-descriptions","title":"Property Descriptions","text":"<p>mDeletedText As String</p> <p>The text that was deleted from the editor by the original deletion action.</p> <p>mDescription As String</p> <p>A description of this action.</p> <p>mEditor As XUICodeEditor</p> <p>The editor where the deletion occurred.</p> <p>mID As Integer</p> <p>Internal cache of this action's ID.</p> <p>mSelection As XUITextSelection</p> <p>The original selection containing the text that was deleted.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableDelete/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(editor As XUICodeEditor, id As Integer, description As String, deletedText As String, selection As XUITextSelection)</p> <p>Default constructor.</p> <ul> <li><code>editor</code> is the <code>XUICodeEditor</code> to perform this action on. </li> <li><code>id</code> is the unique ID for this action. </li> <li><code>description</code> is a human-radable description of this action for displaying in menubars and contextual menus. </li> <li><code>deletedText</code> is the text that was just deleted in the code editor. </li> <li><code>selection</code> is selection within the code editor at the time of the deletion. </li> </ul> <p>Description() As String</p> <p>A description of this undoable action.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID() As Integer</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID(Assigns value As Integer)</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Redo()</p> <p>Redo the deletion of a selection in the editor canvas.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Undo()</p> <p>Undo the deletion of a selection in the editor canvas.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLine/","title":"XUICEUndoableInsertLine","text":"<p>Implements <code>XUIUndoableAction</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLine/#description","title":"Description","text":"<p>Stores the data required to undo / redo the insertion of a line within  the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLine/#properties","title":"Properties","text":"Name Type Read-Only mCaretPos <code>Integer</code> mContents <code>String</code> mDescription <code>String</code> mEditor <code>XUICodeEditor</code> mID <code>Integer</code> mLineNumber <code>Integer</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLine/#methods","title":"Methods","text":"Name Parameters Returns Constructor editor As <code>XUICodeEditor</code>, id As <code>Integer</code>, description As <code>String</code>, lineNumber As <code>Integer</code>, caretPos As <code>Integer</code>, contents As <code>String</code> Description <code>String</code> ID <code>Integer</code> ID Assigns value As <code>Integer</code> Redo Undo"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLine/#property-descriptions","title":"Property Descriptions","text":"<p>mCaretPos As Integer</p> <p>The caret position that the new line insertion occurred at.</p> <p>mContents As String</p> <p>The contents of the newly inserted line.</p> <p>mDescription As String</p> <p>A description of this action.</p> <p>mEditor As XUICodeEditor</p> <p>The editor where the new line insertion occurred.</p> <p>mID As Integer</p> <p>Internal cache of this action's ID.</p> <p>mLineNumber As Integer</p> <p>The 1-based line number that the new line was inserted at.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLine/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(editor As XUICodeEditor, id As Integer, description As String, lineNumber As Integer, caretPos As Integer, contents As String)</p> <p>Default constructor.</p> <ul> <li><code>editor</code> is the <code>XUICodeEditor</code> to perform this action on. </li> <li><code>id</code> is the unique ID for this action. </li> <li><code>description</code> is a human-radable description of this action for displaying in menubars and contextual menus. </li> <li><code>lineNumber</code> is the 1-based line number that the new line was inserted at. </li> <li><code>caretPos</code> is the caret position that the new line insertion occurred at. </li> <li><code>contents</code> is the contents of the newly inserted line. </li> </ul> <p>Description() As String</p> <p>A description of this undoable action.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID() As Integer</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID(Assigns value As Integer)</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Redo()</p> <p>Redo the insertion of a line at the specified line number.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Undo()</p> <p>Undo the insertion of a line at the specified line number.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLineBreak/","title":"XUICEUndoableInsertLineBreak","text":"<p>Implements <code>XUIUndoableAction</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLineBreak/#description","title":"Description","text":"<p>Stores the data required to undo / redo the insertion of a line break within  the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLineBreak/#properties","title":"Properties","text":"Name Type Read-Only mCaretPos <code>Integer</code> mDescription <code>String</code> mEditor <code>XUICodeEditor</code> mID <code>Integer</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLineBreak/#methods","title":"Methods","text":"Name Parameters Returns Constructor editor As <code>XUICodeEditor</code>, id As <code>Integer</code>, description As <code>String</code>, caretPos As <code>Integer</code> Description <code>String</code> ID <code>Integer</code> ID Assigns value As <code>Integer</code> Redo Undo"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLineBreak/#property-descriptions","title":"Property Descriptions","text":"<p>mCaretPos As Integer</p> <p>The caret position where the line break occurred.</p> <p>mDescription As String</p> <p>A description of this action.</p> <p>mEditor As XUICodeEditor</p> <p>The editor where the line break occurred.</p> <p>mID As Integer</p> <p>Internal cache of this action's ID.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertLineBreak/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(editor As XUICodeEditor, id As Integer, description As String, caretPos As Integer)</p> <p>Default constructor.</p> <ul> <li><code>editor</code> is the <code>XUICodeEditor</code> to perform this action on. </li> <li><code>id</code> is the unique ID for this action. </li> <li><code>description</code> is a human-radable description of this action for displaying in menubars and contextual menus. </li> <li><code>caretPos</code> is the caret position that the new line insertion occurred at. </li> </ul> <p>Description() As String</p> <p>A description of this undoable action.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID() As Integer</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID(Assigns value As Integer)</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Redo()</p> <p>Redo the creation of a line break.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Undo()</p> <p>Undo the creation of a line break.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertText/","title":"XUICEUndoableInsertText","text":"<p>Implements <code>XUIUndoableAction</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertText/#description","title":"Description","text":"<p>Stores the data required to undo / redo the insertion of a text within  the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertText/#properties","title":"Properties","text":"Name Type Read-Only mCaretPos <code>Integer</code> mDescription <code>String</code> mEditor <code>XUICodeEditor</code> mID <code>Integer</code> mText <code>String</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertText/#methods","title":"Methods","text":"Name Parameters Returns Constructor editor As <code>XUICodeEditor</code>, id As <code>Integer</code>, description As <code>String</code>, caretPos As <code>Integer</code>, s As <code>String</code> Description <code>String</code> ID <code>Integer</code> ID Assigns value As <code>Integer</code> Redo Undo"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertText/#property-descriptions","title":"Property Descriptions","text":"<p>mCaretPos As Integer</p> <p>The original caret position where the text was inserted at.</p> <p>mDescription As String</p> <p>A description of this action.</p> <p>mEditor As XUICodeEditor</p> <p>The editor where the text insertion occurred.</p> <p>mID As Integer</p> <p>Internal cache of this action's ID.</p> <p>mText As String</p> <p>The text inserted at <code>mCaretPos</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableInsertText/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(editor As XUICodeEditor, id As Integer, description As String, caretPos As Integer, s As String)</p> <p>Default constructor.</p> <ul> <li><code>editor</code> is the <code>XUICodeEditor</code> to perform this action on. </li> <li><code>id</code> is the unique ID for this action. </li> <li><code>description</code> is a human-radable description of this action for displaying in menubars and contextual menus. </li> <li><code>caretPos</code> is the original caret position where the text was inserted at. </li> <li><code>s</code> is the text inserted. </li> </ul> <p>Description() As String</p> <p>A description of this action.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID() As Integer</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID(Assigns value As Integer)</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Redo()</p> <p>Redo the insertion of the text in the editor.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Undo()</p> <p>Undo the insertion of the text that was inserted at <code>mCaretPos</code>.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableReplaceLineContents/","title":"XUICEUndoableReplaceLineContents","text":"<p>Implements <code>XUIUndoableAction</code></p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableReplaceLineContents/#description","title":"Description","text":"<p>Stores the data required to undo / redo the replacement of a line of text within  the <code>XUICodeEditor</code>.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableReplaceLineContents/#properties","title":"Properties","text":"Name Type Read-Only mCaretPos <code>Integer</code> mDescription <code>String</code> mEditor <code>XUICodeEditor</code> mID <code>Integer</code> mLineNumber <code>Integer</code> mNewContents <code>String</code> mOriginalContents <code>String</code>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableReplaceLineContents/#methods","title":"Methods","text":"Name Parameters Returns Constructor editor As <code>XUICodeEditor</code>, id As <code>Integer</code>, description As <code>String</code>, lineNumber As <code>Integer</code>, originalContents As <code>String</code>, newContents As <code>String</code>, caretPos As <code>Integer</code> Description <code>String</code> ID <code>Integer</code> ID Assigns value As <code>Integer</code> Redo Undo"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableReplaceLineContents/#property-descriptions","title":"Property Descriptions","text":"<p>mCaretPos As Integer</p> <p>The caret position where the replacement occurred.</p> <p>mDescription As String</p> <p>A description of this action.</p> <p>mEditor As XUICodeEditor</p> <p>The editor where the line contents replacement occurred.</p> <p>mID As Integer</p> <p>Internal cache of this action's ID.</p> <p>mLineNumber As Integer</p> <p>The 1-based number of the line that was modified.</p> <p>mNewContents As String</p> <p>The new contents of the line.</p> <p>mOriginalContents As String</p> <p>The original contents of the line.</p>"},{"location":"XUI/XUICodeEditor/Code%20Editor%20Undo/XUICEUndoableReplaceLineContents/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(editor As XUICodeEditor, id As Integer, description As String, lineNumber As Integer, originalContents As String, newContents As String, caretPos As Integer)</p> <p>Default constructor.</p> <ul> <li><code>editor</code> is the <code>XUICodeEditor</code> to perform this action on. </li> <li><code>id</code> is the unique ID for this action. </li> <li><code>description</code> is a human-radable description of this action for displaying in menubars and contextual menus. </li> <li><code>lineNumber</code> is the 1-based number of the line that was modified. </li> <li><code>originalContents</code> is the original contents of the line. </li> <li><code>newContents</code> is the new contents of the line. </li> </ul> <p>Description() As String</p> <p>A description of this undoable action.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID() As Integer</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>ID(Assigns value As Integer)</p> <p>This action's unique ID.</p> <p>Part of the <code>XUIUndoableAction</code> interface.</p> <p>Redo()</p> <p>Redo the replacement of the contents of the specified line.</p> <p>Assumes that there are no new lines in <code>mNewContents</code>. Part of the <code>XUIUndoableAction</code> interface.</p> <p>Undo()</p> <p>Undo the replacement of the contents of this line.</p> <p>Assumes that there are no new lines in <code>mOriginalContents</code>. Part of the <code>XUIUndoableAction</code> interface.</p>"},{"location":"XUI/XUIColorPicker/XUIColorPicker/","title":"XUIColorPicker","text":""},{"location":"XUI/XUIColorPicker/XUIColorPicker/#description","title":"Description","text":"<p>A beautiful colour picker tool.</p>"},{"location":"XUI/XUIColorPicker/XUIColorPicker/#properties","title":"Properties","text":"Name Type Read-Only CurrentColor <code>Color</code> mCurrentColor <code>Color</code> mStartingColor <code>Color</code>"},{"location":"XUI/XUIColorPicker/XUIColorPicker/#methods","title":"Methods","text":"Name Parameters Returns AppearanceChanged ColorComponentSliderPressed slider As <code>XUIColorComponentSlider</code>, newColor As <code>Color</code> Constructor startingColor As <code>Color</code> ConstructPalettes DraggingColorComponentSliderScrubber slider As <code>XUIColorComponentSlider</code> NotificationReceived n As <code>XUINotification</code> RefreshCMYSlidersPanel RefreshHSVSlidersPanel RefreshRGBASlidersPanel RegisterForNotifications SwitchMainPanel panelIndex As <code>Integer</code> Update"},{"location":"XUI/XUIColorPicker/XUIColorPicker/#events","title":"Events","text":"Name Parameters Returns ColorChanged newColor As <code>Color</code>"},{"location":"XUI/XUIColorPicker/XUIColorPicker/#constants","title":"Constants","text":"Name Type HEIGHT_SLIDERS <code>Double</code> HEIGHT_SWATCHES <code>Double</code> PANEL_MAIN_SLIDERS <code>Double</code> PANEL_MAIN_SWATCHES <code>Double</code> PANEL_SLIDERS_CMY <code>Double</code> PANEL_SLIDERS_HSV <code>Double</code> PANEL_SLIDERS_RGB <code>Double</code> <p>HEIGHT_SLIDERS As Double The height the picker window should be when displaying the sliders panel.</p> <p>HEIGHT_SWATCHES As Double The height the picker window should be when displaying the swatches panel.</p> <p>PANEL_MAIN_SLIDERS As Double Index of the panel containing the sliders.</p> <p>PANEL_MAIN_SWATCHES As Double Index of the panel containing the main swatches.</p> <p>PANEL_SLIDERS_CMY As Double Index of the panel containing the RGB sliders.</p> <p>PANEL_SLIDERS_HSV As Double Index of the panel containing the RGB sliders.</p> <p>PANEL_SLIDERS_RGB As Double Index of the panel containing the RGB sliders.</p>"},{"location":"XUI/XUIColorPicker/XUIColorPicker/#property-descriptions","title":"Property Descriptions","text":"<p>CurrentColor As Color</p> <p>The currently selected colour.</p> <p>mCurrentColor As Color</p> <p>The currently selected colour.</p> <p>mStartingColor As Color</p> <p>The starting color when the picker first opens.</p>"},{"location":"XUI/XUIColorPicker/XUIColorPicker/#method-descriptions","title":"Method Descriptions","text":"<p>AppearanceChanged()</p> <p>Handles an OS appearance change (e.g. light to dark mode switch).</p> <p>ColorComponentSliderPressed(slider As XUIColorComponentSlider, newColor As Color)</p> <p>Delegate for handling the pressing of a colour component slider.</p> <p>Constructor(startingColor As Color)</p> <p>Default constructor. Takes a Color.</p> <p>ConstructPalettes() Adds the colour dots and their palettes.</p> <p>DraggingColorComponentSliderScrubber(slider As XUIColorComponentSlider)</p> <p>Delegate for handling the dragging of a colour component slider scrubber.</p> <p>NotificationReceived(n As XUINotification)</p> <p>A notification has been received from the Notification Center.</p> <p>Part of the XUINotificationListener interface.</p> <p>RefreshCMYSlidersPanel()</p> <p>Refreshes all the controls on the CMY sliders panel to reflect <code>mCurrentColor</code>.</p> <p>RefreshHSVSlidersPanel()</p> <p>Refreshes all the controls on the HSV sliders panel to reflect <code>mCurrentColor</code>.</p> <p>RefreshRGBASlidersPanel()</p> <p>Refreshes all the controls on the RGBA sliders panel to reflect <code>mCurrentColor</code>.</p> <p>RegisterForNotifications()</p> <p>Registers the color picker for desired notifications.</p> <p>SwitchMainPanel(panelIndex As Integer)</p> <p>Switches to the specified main panel.</p> <p>Update()</p> <p>Updates all controls to match the current colour.</p>"},{"location":"XUI/XUIColorPicker/XUIColorPicker/#event-descriptions","title":"Event Descriptions","text":"<p>ColorChanged(newColor As Color) The selected colour in the picker has changed.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/","title":"XUIColorComponentSlider","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#description","title":"Description","text":"<p>e it in your own projects as a highly customisable slider that represents the component of a colour. although you can us</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#properties","title":"Properties","text":"Name Type Read-Only ColorMode <code>XUIColorComponentSlider.ColorModes</code> CompleteColor <code>Color</code> ComponentType <code>XUIColorComponentSlider.ComponentTypes</code> ComponentValue <code>Double</code> mClickedScrubberOnMouseDown <code>Boolean</code> mCompleteColor <code>Color</code> mComponentValue <code>Double</code> mIsDragging <code>Boolean</code> mLinearBrush <code>LinearGradientBrush</code> mMouseDownTicks <code>Double</code> mMouseDownX <code>Integer</code> mMouseDownY <code>Integer</code> mNeedsFullRedraw <code>Boolean</code> mScrubberBounds <code>Rect</code> mScrubberColor <code>ColorGroup</code> mScrubberShadowBrush <code>ShadowBrush</code> mSliderBorderColor <code>ColorGroup</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#methods","title":"Methods","text":"Name Parameters Returns ComponentValueToXCoord graphicsWidth As <code>Double</code>, scrubberDiameter As <code>Double</code> <code>Double</code> Constructor UpdateComponentValueFromXCoord x As <code>Integer</code> UpdateLinearBrush g As <code>Graphics</code> UpdateLinearBrushCMY startPoint As <code>Point</code>, endPoint As <code>Point</code> UpdateLinearBrushHSV startPoint As <code>Point</code>, endPoint As <code>Point</code> UpdateLinearBrushRGB startPoint As <code>Point</code>, endPoint As <code>Point</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#events","title":"Events","text":"Name Parameters Returns FinishedDraggingScrubber IsDraggingScrubber PressedSlider newColor As <code>Color</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#constants","title":"Constants","text":"Name Type DRAG_THRESHOLD_DISTANCE <code>Double</code> DRAG_THRESHOLD_TICKS <code>Double</code> <p>DRAG_THRESHOLD_DISTANCE As Double The number of pixels difference between the current mouse position and the last to trigger a drag operation.</p> <p>DRAG_THRESHOLD_TICKS As Double The number of ticks that must have elapsed between the last drag operation to trigger another drag.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#enumerations","title":"Enumerations","text":"<p>ColorModes</p> <p>Determines whether this slider is displaying <code>RGB</code>, <code>CMY</code> or <code>HSV</code> colour information.</p> Name RGB CMY HSV <p>ComponentTypes</p> <p>Represents the various different colour components.</p> Name Alpha Blue Green Red Hue Saturation Value Cyan Magenta Yellow"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#property-descriptions","title":"Property Descriptions","text":"<p>ColorMode As XUIColorComponentSlider.ColorModes</p> <p>The colour mode the slider is currently in.</p> <p>CompleteColor As Color</p> <p>The complete colour that this component represents part of.</p> <p>ComponentType As XUIColorComponentSlider.ComponentTypes</p> <p>This slider's component type.</p> <p>ComponentValue As Double</p> <p>The value of this component.</p> <p>mClickedScrubberOnMouseDown As Boolean</p> <p>True if the scrubber was clicked during the last <code>MouseDown</code> event.</p> <p>mCompleteColor As Color</p> <p>The complete colour that this component represents part of.</p> <p>mComponentValue As Double</p> <p>The value of this component.</p> <p>mIsDragging As Boolean</p> <p>True if the scrubber is currently being dragged.</p> <p>mLinearBrush As LinearGradientBrush</p> <p>The linear brush to use for the current <code>CompleteColor</code> slider gradient in the <code>Paint</code> event. Computed in <code>UpdateLinearBrush()</code>.</p> <p>mMouseDownTicks As Double</p> <p>The ticks when the last <code>MouseDown</code> or \"actioned\" <code>MouseDrag</code> event occurred.</p> <p>mMouseDownX As Integer</p> <p>The <code>X</code> coordinate in the last <code>MouseDown</code> event. Set to <code>-1</code> in the <code>MouseUp</code> event.</p> <p>mMouseDownY As Integer</p> <p>The <code>Y</code> coordinate in the last <code>MouseDown</code> event. Set to <code>-1</code> in the <code>MouseUp</code> event.</p> <p>mNeedsFullRedraw As Boolean</p> <p>True if the slider needs a full redraw.</p> <p>mScrubberBounds As Rect</p> <p>The bounds of the scrubber, local to this canvas.</p> <p>mScrubberColor As ColorGroup</p> <p>The colour of the scrubber.</p> <p>mScrubberShadowBrush As ShadowBrush</p> <p>The shadow brush to use when drawing the scrubber.</p> <p>mSliderBorderColor As ColorGroup</p> <p>The colour of the slider border.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#method-descriptions","title":"Method Descriptions","text":"<p>ComponentValueToXCoord(graphicsWidth As Double, scrubberDiameter As Double) As Double</p> <p>Returns the X coordinate along the slider to use for this slider's current component value.</p> <p>Constructor()</p> <p>Default constructor.</p> <p>UpdateComponentValueFromXCoord(x As Integer)</p> <p>Sets the component value based on the local X coordinate passed.</p> <p>UpdateLinearBrush(g As Graphics)</p> <p>Updates our cached linear brush <code>mLinearBrush</code> for the current <code>CompleteColor</code> depending on the slider's ColorMode.</p> <p>UpdateLinearBrushCMY(startPoint As Point, endPoint As Point)</p> <p>Updates our cached linear brush <code>mLinearBrush</code> for the current <code>CompleteColor</code> for CMY component sliders.</p> <p>UpdateLinearBrushHSV(startPoint As Point, endPoint As Point)</p> <p>Updates our cached linear brush <code>mLinearBrush</code> for the current <code>CompleteColor</code> for HSV component sliders.</p> <p>UpdateLinearBrushRGB(startPoint As Point, endPoint As Point)</p> <p>Updates our cached linear brush <code>mLinearBrush</code> for the current <code>CompleteColor</code> for RGB component sliders.</p> <p>The gradient runs from <code>&amp;h00</code> on the left to <code>&amp;hFF</code> on the right of this slider's component type.</p> <p>For example, if the current colour is <code>&amp;c48ADEF</code> and this is a red component slider then the left hand gradient will be <code>&amp;c00ADEF</code> and the right hand gradient will be <code>&amp;cFFADEF</code>.</p> <p>So for a red component slider, we vary the red component between <code>&amp;h00</code> and <code>&amp;hFF</code> but keep the green, blue and alpha components the same.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorComponentSlider/#event-descriptions","title":"Event Descriptions","text":"<p>FinishedDraggingScrubber() The scrubber has finished being dragged.</p> <p>IsDraggingScrubber() The slider's scrubber is being dragged.</p> <p>PressedSlider(newColor As Color) The user has pressed the slider (not the scrubber), changing its color.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDot/","title":"XUIColorPickerColorDot","text":""},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDot/#description","title":"Description","text":"<p>Represents a coloured dot on the ColorPicker swatches panel.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDot/#properties","title":"Properties","text":"Name Type Read-Only Bounds <code>Rect</code> Colour <code>Color</code> Name <code>String</code> Palette() <code>Color</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDot/#methods","title":"Methods","text":"Name Parameters Returns Constructor colour As <code>Color</code>, name As <code>String</code>, ParamArray palette() As <code>Color</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDot/#property-descriptions","title":"Property Descriptions","text":"<p>Bounds As Rect</p> <p>The dot's bounds, local to the XUIColorPickerColorDotCanvas this dot appears on. Used for hit detection.</p> <p>Colour As Color</p> <p>This dot's colour.</p> <p>Name As String</p> <p>This dot's name.</p> <p>Palette() As Color</p> <p>This dot's associated palette of colours.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDot/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(colour As Color, name As String, ParamArray palette() As Color)</p> <p>Default constructor.</p> <ul> <li><code>colour</code> is the colour of this dot. </li> <li><code>name</code> is this dot's name. </li> <li><code>palette</code> contains this dot's palette colours. </li> </ul>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/","title":"XUIColorPickerColorDotCanvas","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#description","title":"Description","text":"<p>A canvas that contains a row of XUIColorPickerColorDots.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#properties","title":"Properties","text":"Name Type Read-Only DotDiameter <code>Integer</code> GapWidth <code>Integer</code> mDidMouseDownOverColorDot <code>Boolean</code> mDotDiameter <code>Integer</code> mDots() <code>XUIColorPickerColorDot</code> mGapWidth <code>Integer</code> mSelectedDotCentreColor <code>ColorGroup</code> mSelectedDotShadowBrush <code>ShadowBrush</code> mSelectedIndex <code>Integer</code> mShouldRecomputeBounds <code>Boolean</code> SelectedIndex <code>Integer</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#methods","title":"Methods","text":"Name Parameters Returns AddDot dot As <code>XUIColorPickerColorDot</code> ComputeBounds g As <code>Graphics</code> Constructor RemoveAllDots SelectedDot <code>XUIColorPickerColorDot</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#events","title":"Events","text":"Name Parameters Returns PressedColorDot dot As <code>XUIColorPickerColorDot</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#constants","title":"Constants","text":"Name Type SELECTION_DOT_DIAMETER <code>Double</code> <p>SELECTION_DOT_DIAMETER As Double The diameter of the dot drawn in the centre of the selected dot.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#property-descriptions","title":"Property Descriptions","text":"<p>DotDiameter As Integer</p> <p>The diameter of each colour dot.</p> <p>GapWidth As Integer</p> <p>The gap between the color dots.</p> <p>mDidMouseDownOverColorDot As Boolean</p> <p>True if the user clicked over a color dot during the last <code>MouseDown</code> event.</p> <p>mDotDiameter As Integer</p> <p>The diameter of each colour dot.</p> <p>mDots() As XUIColorPickerColorDot</p> <p>Available color dots. Left = Color, Right = Name</p> <p>mGapWidth As Integer</p> <p>The gap between the color dots.</p> <p>mSelectedDotCentreColor As ColorGroup</p> <p>The colour to use for the selection marker in the centre of selected dots.</p> <p>mSelectedDotShadowBrush As ShadowBrush</p> <p>A precomputed shadow brush for the selected colour dot.</p> <p>mSelectedIndex As Integer</p> <p>The index of the currently selected dot.</p> <p>mShouldRecomputeBounds As Boolean</p> <p>If True then the bounds of the colour dots will be recomputed during the next <code>Paint</code> event.</p> <p>SelectedIndex As Integer</p> <p>The index of the currently selected colour dot.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#method-descriptions","title":"Method Descriptions","text":"<p>AddDot(dot As XUIColorPickerColorDot)</p> <p>Adds a new color dot to the canvas.</p> <p>ComputeBounds(g As Graphics)</p> <p>Computes the bounds of each of the colour dots.</p> <p>Constructor()</p> <p>Default constructor.</p> <p>RemoveAllDots()</p> <p>Removes all the dots from the canvas.</p> <p>SelectedDot() As XUIColorPickerColorDot</p> <p>Returns the currently selected colour dot. This should be considered read only. Returns Nil if nothing selected.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerColorDotCanvas/#event-descriptions","title":"Event Descriptions","text":"<p>PressedColorDot(dot As XUIColorPickerColorDot) The user just pressed a color dot.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/","title":"XUIColorPickerSwatchCanvas","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#description","title":"Description","text":"<p>This class draws the colour swatches available for selection for a given colour shade dot in  the <code>XUIColorPicker</code>.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#properties","title":"Properties","text":"Name Type Read-Only mDidMouseDownOverSwatch <code>Boolean</code> mPalette() <code>Pair</code> mSelectedIndex <code>Integer</code> mShouldRecomputeBounds <code>Boolean</code> mSwatchBorderColor <code>ColorGroup</code> mSwatchHeight <code>Integer</code> mSwatchVerticalPadding <code>Integer</code> SelectedColor <code>Color</code> \u2714 SelectedIndex <code>Integer</code> SwatchHeight <code>Integer</code> SwatchVerticalPadding <code>Integer</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#methods","title":"Methods","text":"Name Parameters Returns AddColor c As <code>Color</code>, shouldRefresh As <code>Boolean</code> AddColors colours() As <code>Color</code> ComputeBounds g As <code>Graphics</code> Constructor RemoveAllColors"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#events","title":"Events","text":"Name Parameters Returns PressedSwatch selectedColor As <code>Color</code>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#constants","title":"Constants","text":"Name Type SELECTION_DOT_DIAMETER <code>Double</code> <p>SELECTION_DOT_DIAMETER As Double The diameter of the dot drawn in the centre of the selected swatch.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#property-descriptions","title":"Property Descriptions","text":"<p>mDidMouseDownOverSwatch As Boolean</p> <p>True if the user clicked a colour swatch during the last <code>MouseDown</code> event.</p> <p>mPalette() As Pair</p> <p>The colours to draw as swatches. Left = Color, Right = Bounds.</p> <p>mSelectedIndex As Integer</p> <p>The currently selected swatch index.</p> <p>mShouldRecomputeBounds As Boolean</p> <p>If True then the bounds of the swatches in the palette will be recomputed during the next <code>Paint</code> event.</p> <p>mSwatchBorderColor As ColorGroup</p> <p>The colour to use for the border of the swatches.</p> <p>mSwatchHeight As Integer</p> <p>The height of a swatch.</p> <p>mSwatchVerticalPadding As Integer</p> <p>The amount of padding between swatches.</p> <p>SelectedColor As Color</p> <p>The currently selected colour.</p> <p>SelectedIndex As Integer</p> <p>The index of the currently selected swatch.</p> <p>SwatchHeight As Integer</p> <p>The height of a swatch.</p> <p>SwatchVerticalPadding As Integer</p> <p>The amount of padding between swatches.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#method-descriptions","title":"Method Descriptions","text":"<p>AddColor(c As Color, shouldRefresh As Boolean)</p> <p>Adds a new colour to the canvas. By default the canvas is refreshed.</p> <p>AddColors(colours() As Color)</p> <p>Adds multiple colours to the canvas. The canvas is automatically refreshed.</p> <p>ComputeBounds(g As Graphics)</p> <p>Computes the bounds of each of the colour swatches</p> <p>Constructor()</p> <p>Default constructor.</p> <p>RemoveAllColors()</p> <p>Removes all colours from the canvas.</p>"},{"location":"XUI/XUIColorPicker/ColorPicker%20Components/XUIColorPickerSwatchCanvas/#event-descriptions","title":"Event Descriptions","text":"<p>PressedSwatch(selectedColor As Color) The user clicked a colour swatch.</p>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/","title":"XUIColorSwatch","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/#description","title":"Description","text":"<p>A powerful colour swatch control that displays a colour and allows the user to click the control to change the colour. Works in tandem with the <code>XUIColorPicker</code>.</p> <p>The control's appearance is very customisable through the use of different renderers. Several are provided with XUI that mimic the colour swatch control on macOS, Windows and Linux but you  can create your own too.</p>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/#properties","title":"Properties","text":"Name Type Read-Only IsActive <code>Boolean</code> \u2714 mColorPickerVisible <code>Boolean</code> mIsActive <code>Boolean</code> mRenderer <code>XUIColorSwatchRenderer</code> mValue <code>Color</code> Renderer <code>XUIColorSwatchRenderer</code> Value <code>Color</code>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/#methods","title":"Methods","text":"Name Parameters Returns Constructor PickerClosing picker As <code>XUIColorPicker</code> PickerColorChanged picker As <code>XUIColorPicker</code>, newColor As <code>Color</code>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/#events","title":"Events","text":"Name Parameters Returns ColorChanged newColor As <code>Color</code>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/#property-descriptions","title":"Property Descriptions","text":"<p>IsActive As Boolean</p> <p>True if the swatch is currently active (i.e. pressed and the color picker is visible). Read only.</p> <p>mColorPickerVisible As Boolean</p> <p>True if the color picker is visible.</p> <p>mIsActive As Boolean</p> <p>True if the swatch is currently active (i.e. pressed and the color picker is visible).</p> <p>mRenderer As XUIColorSwatchRenderer</p> <p>This colour swatch's renderer. Responsible for actualy drawing the control.</p> <p>mValue As Color</p> <p>The colour of the swatch.</p> <p>Renderer As XUIColorSwatchRenderer</p> <p>This colour swatch's renderer. Responsible for actualy drawing the control.</p> <p>Value As Color</p> <p>The colour of the swatch.</p>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Default constructor.</p> <p>PickerClosing(picker As XUIColorPicker)</p> <p>Delegate called when this swatch's color picker is closing.</p> <p>PickerColorChanged(picker As XUIColorPicker, newColor As Color)</p> <p>Delegate that is called when this swatch's color picker's colour is changed.</p>"},{"location":"XUI/XUIColorSwatch/XUIColorSwatch/#event-descriptions","title":"Event Descriptions","text":"<p>ColorChanged(newColor As Color) The swatch's colour has changed.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRenderer/","title":"XUIColorSwatchRenderer","text":""},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRenderer/#description","title":"Description","text":"<p>Colour swatches on different platforms have widely differing appearances. <code>XUIColorSwatch</code> handles this by using Renderers. A renderer is a class that implements this interface. It exposes methods called by <code>XUIColorSwatch</code> to alter its appearance. Several examples are provided with XUI.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRenderer/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUIColorSwatch</code> Owner <code>XUIColorSwatch</code> RecommendedHeight <code>Double</code> RecommendedWidth <code>Double</code> Render g As <code>Graphics</code>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRenderer/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUIColorSwatch) <code>owner</code> is the <code>XUIColorSwatch</code> that owns this renderer.</p> <p>Owner() As XUIColorSwatch This renderer's owning ColorSwatch.</p> <p>RecommendedHeight() As Double The recommended height (in pixels) the colour swatch should be.</p> <p>RecommendedWidth() As Double The recommended width (in pixels) the colour swatch should be.</p> <p>Render(g As Graphics) Renders the swatch to the passed graphics context.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererGnome/","title":"XUIColorSwatchRendererGnome","text":"<p>Implements <code>XUIColorSwatchRenderer</code></p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererGnome/#description","title":"Description","text":"<p>Renders a color swatch mimicking Gnome (e.g. as used by Ubuntu, Fedora, etc).</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererGnome/#properties","title":"Properties","text":"Name Type Read-Only mActiveBackgroundColor <code>ColorGroup</code> mBackgroundColor <code>ColorGroup</code> mBorderColor <code>ColorGroup</code> mOwner <code>WeakRef</code>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererGnome/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUIColorSwatch</code> InitialiseColorGroups Owner <code>XUIColorSwatch</code> RecommendedHeight <code>Double</code> RecommendedWidth <code>Double</code> Render g As <code>Graphics</code>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererGnome/#constants","title":"Constants","text":"Name Type ACTIVE_BACKGROUND_COLOR_DARK <code>Color</code> ACTIVE_BACKGROUND_COLOR_LIGHT <code>Color</code> BACKGROUND_COLOR_DARK <code>Color</code> BACKGROUND_COLOR_LIGHT <code>Color</code> BORDER_COLOR_DARK <code>Color</code> BORDER_COLOR_LIGHT <code>Color</code> <p>ACTIVE_BACKGROUND_COLOR_DARK As Color The dark mode colour for the background when the colour swatch is active.</p> <p>ACTIVE_BACKGROUND_COLOR_LIGHT As Color The light mode colour for the background when the colour swatch is active.</p> <p>BACKGROUND_COLOR_DARK As Color The dark mode colour for the background.</p> <p>BACKGROUND_COLOR_LIGHT As Color The light mode colour for the background.</p> <p>BORDER_COLOR_DARK As Color The dark mode colour for the border.</p> <p>BORDER_COLOR_LIGHT As Color The light mode colour for the border.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererGnome/#property-descriptions","title":"Property Descriptions","text":"<p>mActiveBackgroundColor As ColorGroup</p> <p>The colour to use for the swatch background when active.</p> <p>mBackgroundColor As ColorGroup</p> <p>The colour to use for the swatch's background when non-active.</p> <p>mBorderColor As ColorGroup</p> <p>The colour to use for the inner and outer borders.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the owning ColorSwatch.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererGnome/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUIColorSwatch)</p> <p>Default constructor.</p> <ul> <li><code>owner</code> is the <code>XUIColorSwatch</code> that owns this renderer. A new <code>WeakRef</code> to it will be created. </li> </ul> <p>InitialiseColorGroups()</p> <p>Initialises the ColorGroup properties from our built-in constants.</p> <p>Owner() As XUIColorSwatch</p> <p>This renderer's owning ColorSwatch.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>RecommendedHeight() As Double</p> <p>The recommended height (in pixels) the colour swatch should be.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>RecommendedWidth() As Double</p> <p>The recommended width (in pixels) the colour swatch should be.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>Render(g As Graphics)</p> <p>Renders the swatch to the passed graphics context.</p> <p>Part of the XUIColorSwatchRenderer interface.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererMacOS/","title":"XUIColorSwatchRendererMacOS","text":"<p>Implements <code>XUIColorSwatchRenderer</code></p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererMacOS/#description","title":"Description","text":"<p>Renders a color swatch mimicking macOS.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererMacOS/#properties","title":"Properties","text":"Name Type Read-Only mActiveBackgroundColor <code>ColorGroup</code> mBackgroundColor <code>ColorGroup</code> mInnerBorderColor <code>ColorGroup</code> mOuterBorderColor <code>ColorGroup</code> mOwner <code>WeakRef</code>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererMacOS/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUIColorSwatch</code> InitialiseColorGroups Owner <code>XUIColorSwatch</code> RecommendedHeight <code>Double</code> RecommendedWidth <code>Double</code> Render g As <code>Graphics</code>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererMacOS/#constants","title":"Constants","text":"Name Type ACTIVE_BACKGROUND_COLOR_DARK <code>Color</code> ACTIVE_BACKGROUND_COLOR_LIGHT <code>Color</code> BACKGROUND_COLOR_DARK <code>Color</code> BACKGROUND_COLOR_LIGHT <code>Color</code> INNER_BORDER_COLOR_DARK <code>Color</code> INNER_BORDER_COLOR_LIGHT <code>Color</code> OUTER_BORDER_COLOR_DARK <code>Color</code> OUTER_BORDER_COLOR_LIGHT <code>Color</code> <p>ACTIVE_BACKGROUND_COLOR_DARK As Color The dark mode colour for the background when the colour swatch is active.</p> <p>ACTIVE_BACKGROUND_COLOR_LIGHT As Color The light mode colour for the background when the colour swatch is active.</p> <p>BACKGROUND_COLOR_DARK As Color The dark mode colour for the background.</p> <p>BACKGROUND_COLOR_LIGHT As Color The light mode colour for the background.</p> <p>INNER_BORDER_COLOR_DARK As Color The dark mode colour for the inner border.</p> <p>INNER_BORDER_COLOR_LIGHT As Color The light mode colour for the inner border.</p> <p>OUTER_BORDER_COLOR_DARK As Color The dark mode colour for the outer border.</p> <p>OUTER_BORDER_COLOR_LIGHT As Color The light mode colour for the outer border.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererMacOS/#property-descriptions","title":"Property Descriptions","text":"<p>mActiveBackgroundColor As ColorGroup</p> <p>The colour to use for the swatch background when active.</p> <p>mBackgroundColor As ColorGroup</p> <p>The colour to use for the swatch's background when non-active.</p> <p>mInnerBorderColor As ColorGroup</p> <p>The colour to use for the inner border.</p> <p>mOuterBorderColor As ColorGroup</p> <p>The colour to use for the outer border.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the owning ColorSwatch.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererMacOS/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUIColorSwatch)</p> <p>Default constructor.</p> <ul> <li><code>owner</code> is the <code>XUIColorSwatch</code> that owns this renderer. A new <code>WeakRef</code> to it will be created. </li> </ul> <p>InitialiseColorGroups()</p> <p>Initialises the ColorGroup properties from our built-in constants.</p> <p>Owner() As XUIColorSwatch</p> <p>This renderer's owning ColorSwatch.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>RecommendedHeight() As Double</p> <p>The recommended height (in pixels) the colour swatch should be.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>RecommendedWidth() As Double</p> <p>The recommended width (in pixels) the colour swatch should be.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>Render(g As Graphics)</p> <p>Renders the swatch to the passed graphics context.</p> <p>Part of the XUIColorSwatchRenderer interface.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererWindows11/","title":"XUIColorSwatchRendererWindows11","text":"<p>Implements <code>XUIColorSwatchRenderer</code></p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererWindows11/#description","title":"Description","text":"<p>Renders a color swatch mimicking Windows 11.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererWindows11/#properties","title":"Properties","text":"Name Type Read-Only mActiveBorderColor <code>ColorGroup</code> mOwner <code>WeakRef</code>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererWindows11/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUIColorSwatch</code> InitialiseColorGroups Owner <code>XUIColorSwatch</code> RecommendedHeight <code>Double</code> RecommendedWidth <code>Double</code> Render g As <code>Graphics</code>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererWindows11/#constants","title":"Constants","text":"Name Type ACTIVE_BORDER_COLOR_DARK <code>Color</code> ACTIVE_BORDER_COLOR_LIGHT <code>Color</code> <p>ACTIVE_BORDER_COLOR_DARK As Color The dark mode colour for the border when active.</p> <p>ACTIVE_BORDER_COLOR_LIGHT As Color The light mode colour for the border when active.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererWindows11/#property-descriptions","title":"Property Descriptions","text":"<p>mActiveBorderColor As ColorGroup</p> <p>The colour to use for the swatch border when active.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the owning ColorSwatch.</p>"},{"location":"XUI/XUIColorSwatch/ColorSwatch%20Renderers/XUIColorSwatchRendererWindows11/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUIColorSwatch)</p> <p>Default constructor.</p> <ul> <li><code>owner</code> is the <code>XUIColorSwatch</code> that owns this renderer. A new <code>WeakRef</code> to it will be created. </li> </ul> <p>InitialiseColorGroups()</p> <p>Initialises the ColorGroup properties from our built-in constants.</p> <p>Owner() As XUIColorSwatch</p> <p>This renderer's owning ColorSwatch.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>RecommendedHeight() As Double</p> <p>The recommended height (in pixels) the colour swatch should be.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>RecommendedWidth() As Double</p> <p>The recommended width (in pixels) the colour swatch should be.</p> <p>Part of the XUIColorSwatchRenderer interface.</p> <p>Render(g As Graphics)</p> <p>Renders the swatch to the passed graphics context.</p> <p>Part of the XUIColorSwatchRenderer interface.</p>"},{"location":"XUI/XUIInspector/XUIInspector/","title":"XUIInspector","text":"<p>Inherits <code>NSScrollViewCanvas</code></p>"},{"location":"XUI/XUIInspector/XUIInspector/#description","title":"Description","text":"<p>An inspector control that is capable of displaying multiple items, separated into sections. Items are very customisable, ranging from text fields to checkboxes.</p>"},{"location":"XUI/XUIInspector/XUIInspector/#properties","title":"Properties","text":"Name Type Read-Only AllowInertialScrolling <code>Boolean</code> CaretVisible <code>Boolean</code> Data <code>Variant</code> HasBottomBorder <code>Boolean</code> HasLeftBorder <code>Boolean</code> HasRightBorder <code>Boolean</code> HasTopBorder <code>Boolean</code> ItemWithFocus <code>XUIInspectorItem</code> LastClickWasContextual <code>Boolean</code> \u2714 LastMouseDownX <code>Integer</code> \u2714 LastMouseDownY <code>Integer</code> \u2714 mBackBuffer <code>Picture</code> mCachedRequiredHeight <code>Double</code> mCaretBlinkerTimer <code>Timer</code> mHasBottomBorder <code>Boolean</code> mHasLeftBorder <code>Boolean</code> mHasRightBorder <code>Boolean</code> mHasTopBorder <code>Boolean</code> mItemWithFocus <code>XUIInspectorItem</code> mLastClickTicks <code>Integer</code> mLastClickType <code>XUI.ClickTypes</code> mLastClickWasContextual <code>Boolean</code> mLastMouseDownX <code>Integer</code> mLastMouseDownY <code>Integer</code> mLastMouseUpX <code>Integer</code> mLastMouseUpY <code>Integer</code> mLastMovedItem <code>XUIInspectorItem</code> mLastTripleClickTicks <code>Integer</code> mNeedsFullRedraw <code>Boolean</code> mPopup <code>XUIInspectorItemPopupMenu</code> mRefreshTimer <code>Timer</code> mScrollOffsetY <code>Integer</code> mSections() <code>XUIInspectorSection</code> ScrollOffsetY <code>Integer</code> SectionWithFocus <code>XUIInspectorSection</code> \u2714 Style <code>XUIInspectorStyle</code>"},{"location":"XUI/XUIInspector/XUIInspector/#methods","title":"Methods","text":"Name Parameters Returns AddSection section As <code>XUIInspectorSection</code> AddSectionAt index As <code>Integer</code>, section As <code>XUIInspectorSection</code> CaretBlinkerTimerAction sender As <code>Timer</code> Constructor ExpandAllSections HandleNewPopupMenu popupMenu As <code>XUIInspectorItemPopupMenu</code> HandlePopupMenuClick x As <code>Double</code>, y As <code>Double</code> IsDoubleClick x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> IsTripleClick x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> MoveFocusToFirstItem MoveFocusToNextItem MoveFocusToPreviousItem RebuildBackBuffer RedrawImmediately RefreshTimerAction sender As <code>Timer</code> RemoveAllSections RemoveSection section As <code>XUIInspectorSection</code> RemoveSectionNamed name As <code>String</code> <code>XUIInspectorSection</code> RenderDisclosureWidget g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, colour As <code>Color</code>, expanded As <code>Boolean</code>, bold As <code>Boolean</code> <code>Rect</code> RequiredHeight <code>Double</code> SectionNamed name As <code>String</code> <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/XUIInspector/#constants","title":"Constants","text":"Name Type CAPTION_CONTROL_PADDING <code>Double</code> CONTROL_BORDER_PADDING <code>Double</code> NOTIFICATION_ITEM_CHANGED <code>String</code> VSCROLL_SENSITIVITY <code>Double</code> WIDGET_HEIGHT_COLLAPSED <code>Double</code> WIDGET_HEIGHT_EXPANDED <code>Double</code> WIDGET_WIDTH_COLLAPSED <code>Double</code> WIDGET_WIDTH_EXPANDED <code>Double</code> <p>CAPTION_CONTROL_PADDING As Double The number of pixels to pad between a caption and an adjacent control.</p> <p>CONTROL_BORDER_PADDING As Double The nuimber of pixels to pad between a control and the inspector's border.</p> <p>NOTIFICATION_ITEM_CHANGED As String An item has changed in someway.</p> <p>VSCROLL_SENSITIVITY As Double Higher number = more lines scrolled when quickly scrolling vertically. Values between 1 - 3 work well.</p> <p>WIDGET_HEIGHT_COLLAPSED As Double The height in pixels of the collapsed (rightwards-facing) disclosure widget.</p> <p>WIDGET_HEIGHT_EXPANDED As Double The height of the expanded (downwards-facing) disclosure widget.</p> <p>WIDGET_WIDTH_COLLAPSED As Double The width in pixels of the collapsed (rightwards-facing) disclosure widget.</p> <p>WIDGET_WIDTH_EXPANDED As Double The width of the expanded (downwards-facing) disclosure widget.</p>"},{"location":"XUI/XUIInspector/XUIInspector/#property-descriptions","title":"Property Descriptions","text":"<p>AllowInertialScrolling As Boolean</p> <p>If True then the inspector will vertically scroll faster if the mouse wheel is moved faster.</p> <p>CaretVisible As Boolean</p> <p>If True and a text field is in focus then the csaret is visible, otherwise the caret is hidden.</p> <p>Data As Variant</p> <p>Arbitrary data associated with this inspector.</p> <p>HasBottomBorder As Boolean</p> <p>If True then the inspector has a bottom border.</p> <p>HasLeftBorder As Boolean</p> <p>If True then the inspector has a left border.</p> <p>HasRightBorder As Boolean</p> <p>If True then the inspector has a left border.</p> <p>HasTopBorder As Boolean</p> <p>If True then the inspector has a top border.</p> <p>ItemWithFocus As XUIInspectorItem</p> <p>The item that currently has the focus. May be Nil.</p> <p>LastClickWasContextual As Boolean</p> <p>True if the mouse click that just occurred in the <code>MouseDown</code> event was a contextual click.</p> <p>LastMouseDownX As Integer</p> <p>The X coordinate of the last <code>MouseDown</code> event.</p> <p>LastMouseDownY As Integer</p> <p>The Y coordinate of the last <code>MouseDown</code> event (already adjusted for scrolling).</p> <p>mBackBuffer As Picture</p> <p>The internal picture that is rendered to the inspector's canvas.</p> <p>mCachedRequiredHeight As Double</p> <p>A cache of the height required to draw the inspector in full given the collapsed status of all sections computed in the last <code>Paint()</code> event.</p> <p>mCaretBlinkerTimer As Timer</p> <p>Handles blinking the caret of any active text field in the inspector.</p> <p>mHasBottomBorder As Boolean</p> <p>True if the inspector should draw a bottom border.</p> <p>mHasLeftBorder As Boolean</p> <p>True if the inspector should draw a left border.</p> <p>mHasRightBorder As Boolean</p> <p>True if the inspector should draw a right border.</p> <p>mHasTopBorder As Boolean</p> <p>True if the inspector should draw a top border.</p> <p>mItemWithFocus As XUIInspectorItem</p> <p>The current item with the focus. May be Nil.</p> <p>mLastClickTicks As Integer</p> <p>The ticks that the last mouse click occurred at.</p> <p>mLastClickType As XUI.ClickTypes</p> <p>The type of click that occurred in the last <code>MouseUp</code> event.</p> <p>mLastClickWasContextual As Boolean</p> <p>True if the mouse click that just occurred in the <code>MouseDown</code> event was a contextual click.</p> <p>mLastMouseDownX As Integer</p> <p>The X coordinate of the last <code>MouseDown</code> event. Not adjusted for any scrolling.</p> <p>mLastMouseDownY As Integer</p> <p>The Y coordinate of the last <code>MouseDown</code> event. Not adjusted for any scrolling.</p> <p>mLastMouseUpX As Integer</p> <p>The X mouse coordinate from the previous <code>MouseUp</code> event, adjusted for scrolling.</p> <p>mLastMouseUpY As Integer</p> <p>The Y mouse coordinate from the previous <code>MouseUp</code> event, adjusted for scrolling.</p> <p>mLastMovedItem As XUIInspectorItem</p> <p>The last item moved over by the mouse. May be Nil.</p> <p>mLastTripleClickTicks As Integer</p> <p>The ticks that the last triple click occurred at.</p> <p>mNeedsFullRedraw As Boolean</p> <p>If True then the back buffer will be recreated at the next Paint event.</p> <p>mPopup As XUIInspectorItemPopupMenu</p> <p>The currently displayed popup menu. Will be Nil if there isn't one.</p> <p>mRefreshTimer As Timer</p> <p>Responsible for regularly repainting the inspector.</p> <p>mScrollOffsetY As Integer</p> <p>The number of pixels we've scrolled vertically. &gt;0 means the canvas has scrolled down.</p> <p>mSections() As XUIInspectorSection</p> <p>The sections within this inspector.</p> <p>ScrollOffsetY As Integer</p> <p>The number of pixels we've scrolled vertically. &gt;0 means the canvas has scrolled down.</p> <p>SectionWithFocus As XUIInspectorSection</p> <p>The current section in focus. May be Nil.</p> <p>Style As XUIInspectorStyle</p> <p>This inspector's drawing style.</p>"},{"location":"XUI/XUIInspector/XUIInspector/#method-descriptions","title":"Method Descriptions","text":"<p>AddSection(section As XUIInspectorSection)</p> <p>Appends <code>section</code> to the inspector.</p> <p>AddSectionAt(index As Integer, section As XUIInspectorSection)</p> <p>Adds <code>section</code> to this inspector at <code>index</code>. Raises an <code>OutOfBoundsException</code> if <code>index</code> is invalid.</p> <p>CaretBlinkerTimerAction(sender As Timer)</p> <p>Called whenever <code>mCaretBlinkerTimer.Action</code> fires.</p> <p>Constructor()</p> <p>Constructs a new inspector control.</p> <p>ExpandAllSections()</p> <p>Expands all sections in the inspector.</p> <p>HandleNewPopupMenu(popupMenu As XUIInspectorItemPopupMenu)</p> <p>Sets <code>popupMenu</code> to be the currently active popup menu in the inspector. Handles closing an existing popup menu (if any). Redraws the inspector.</p> <p>HandlePopupMenuClick(x As Double, y As Double)</p> <p>Handles a mouse up within <code>mPopup</code>.</p> <p>IsDoubleClick(x As Integer, y As Integer) As Boolean</p> <p>Returns True if a double click just occurred. Assumes <code>x</code> and <code>y</code> are adjusted for scrolling.</p> <p>IsTripleClick(x As Integer, y As Integer) As Boolean</p> <p>Returns True if a triple click just happened. Assumes <code>x</code> and <code>y</code> are adjusted for scrolling.</p> <p>MoveFocusToFirstItem()</p> <p>Moves the focus to the first visible item in the inspector that can accept tab focus.</p> <p>MoveFocusToNextItem()</p> <p>Moves the focus to the next item that can accept the tab focus.</p> <p>MoveFocusToPreviousItem()</p> <p>Moves the focus to the previous item that can accept the tab focus.</p> <p>RebuildBackBuffer()</p> <p>Rebuilds the internal picture that is rendered to the inspector's graphics context.</p> <p>RedrawImmediately()</p> <p>Redraws the inspector immediately.</p> <p>RefreshTimerAction(sender As Timer)</p> <p>Called whenever <code>mRefreshTimer.Action</code> fires.</p> <p>RemoveAllSections()</p> <p>Removes all sections from the inspector.</p> <p>RemoveSection(section As XUIInspectorSection)</p> <p>Removes <code>section</code> (if found) from this inspector.</p> <p>RemoveSectionNamed(name As String) As XUIInspectorSection</p> <p>Removes and returns the first section named <code>name</code>. Case-insensitive search. If the section is not found then Nil is returned.</p> <p>RenderDisclosureWidget(g As Graphics, x As Double, y As Double, colour As Color, expanded As Boolean, bold As Boolean) As Rect This method is shared.</p> <p>Renders a disclosure widget to <code>g</code> and returns its hit bounds. Preserves the state of <code>g</code>.</p> <p>x: The left edge of the widget. y: The top edge of the widget. expanded: True = downwards facing, False = right-facing. bold: If True then the widget is thicker.</p> <p>RequiredHeight() As Double</p> <p>Returns the max height required to draw the inspector in full given the collapsed status of all sections. Will always be as tall as the height of the inspector.</p> <p>SectionNamed(name As String) As XUIInspectorSection</p> <p>Returns the first section named <code>name</code>. Case-insensitive search. May return Nil.</p>"},{"location":"XUI/XUIInspector/XUIInspectorSection/","title":"XUIInspectorSection","text":""},{"location":"XUI/XUIInspector/XUIInspectorSection/#description","title":"Description","text":"<p>Represents a section in the inspector.</p>"},{"location":"XUI/XUIInspector/XUIInspectorSection/#properties","title":"Properties","text":"Name Type Read-Only Bounds <code>Rect</code> Collapsible <code>Boolean</code> Data <code>Variant</code> DisclosureBounds <code>Rect</code> Expanded <code>Boolean</code> mCollapsible <code>Boolean</code> mExpanded <code>Boolean</code> mItems() <code>XUIInspectorItem</code> mOwner <code>WeakRef</code> Name <code>String</code> Owner <code>XUIInspector</code>"},{"location":"XUI/XUIInspector/XUIInspectorSection/#methods","title":"Methods","text":"Name Parameters Returns AddItem item As <code>XUIInspectorItem</code> AddItemAt index As <code>Integer</code>, item As <code>XUIInspectorItem</code> Constructor name As <code>String</code>, collapsible As <code>Boolean</code>, expanded As <code>Boolean</code> FirstItemThatCanAcceptTabFocus <code>XUIInspectorItem</code> Height style As <code>XUIInspectorStyle</code> <code>Double</code> LastItemThatCanAcceptTabFocus <code>XUIInspectorItem</code> MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> MoveFocusToNextItem currentItemWithFocus As <code>XUIInspectorItem</code> <code>XUIInspectorItem</code> MoveFocusToPreviousItem currentItemWithFocus As <code>XUIInspectorItem</code> <code>XUIInspectorItem</code> Remove item As <code>XUIInspectorItem</code> RemoveAt index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> RenderDisclosureWidget sectionTop As <code>Double</code>, g As <code>Graphics</code>, style As <code>XUIInspectorStyle</code> <code>Rect</code> RenderItems g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code>"},{"location":"XUI/XUIInspector/XUIInspectorSection/#constants","title":"Constants","text":"Name Type DISCLOSURE_OFFSET_FROM_BOTTOM <code>Double</code> DISCLOSURE_RPADDING <code>Double</code> DOWN_DISCLOSURE_OFFSET_FROM_BOTTOM <code>Double</code> HEADER_BOTTOM_PADDING <code>Double</code> HEADER_HEIGHT <code>Double</code> HEADER_HPADDING <code>Double</code> <p>DISCLOSURE_OFFSET_FROM_BOTTOM As Double The number of pixels the bottom of the disclosure widget is offset from the bottom edge of the section header.</p> <p>DISCLOSURE_RPADDING As Double The number of pixels to pad the right edge of the disclosure widget from the right edge of the section.</p> <p>DOWN_DISCLOSURE_OFFSET_FROM_BOTTOM As Double The number of pixels the bottom of the down disclosure widget is offset from the bottom edge of the section header.</p> <p>HEADER_BOTTOM_PADDING As Double The number of pixels to padd between the bottom of the section header and the top of the first item.</p> <p>HEADER_HEIGHT As Double The height of a section's header.</p> <p>HEADER_HPADDING As Double The horizontal padding within a section's header.</p>"},{"location":"XUI/XUIInspector/XUIInspectorSection/#property-descriptions","title":"Property Descriptions","text":"<p>Bounds As Rect</p> <p>The bounds of this section within the inspector.</p> <p>Collapsible As Boolean</p> <p>If True then this section can be expanded and collapsed. If False then the section is always expanded.</p> <p>Data As Variant</p> <p>Arbitrary data associated with this section.</p> <p>DisclosureBounds As Rect</p> <p>The bounds of this section's disclosure widget for expanding / collapsing the section. Will be Nil if the section is not collapsible.</p> <p>Expanded As Boolean</p> <p>Whether or not this section is expanded or collapsed.</p> <p>mCollapsible As Boolean</p> <p>If True then this section can be expanded and collapsed. If False then the section is always expanded.</p> <p>mExpanded As Boolean</p> <p>Whether or not this section is expanded or collapsed.</p> <p>mItems() As XUIInspectorItem</p> <p>The items within this section. They are rendered in index order. That is <code>Items(0)</code> is rendered first, at the top of the section.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the inspector that owns this section.</p> <p>Name As String</p> <p>The name of this section.</p> <p>Owner As XUIInspector</p> <p>A weak reference to the inspector that owns this section. May be Nil.</p>"},{"location":"XUI/XUIInspector/XUIInspectorSection/#method-descriptions","title":"Method Descriptions","text":"<p>AddItem(item As XUIInspectorItem)</p> <p>Appends <code>item</code> to the end of this section.</p> <p>AddItemAt(index As Integer, item As XUIInspectorItem)</p> <p>Adds <code>item</code> at the specified index. Raises an <code>OutOfBoundsException</code> if <code>index</code> is out of bounds.</p> <p>Constructor(name As String, collapsible As Boolean, expanded As Boolean)</p> <p>Constructs a new section.</p> <p>FirstItemThatCanAcceptTabFocus() As XUIInspectorItem</p> <p>Returns the first item in this section that can accept tab focus or Nil if none are able to.</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>Returns the current height of the section, factoring in whether it is collapsed or expanded.</p> <p>LastItemThatCanAcceptTabFocus() As XUIInspectorItem</p> <p>Returns the last item in this section that can accept tab focus or Nil if none are able to.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the section that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the the click didn't happen in this section.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this section. Returns Nil if no items were moved over otherwise returns data about the item moved over.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the section that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the the click didn't happen in this section.</p> <p>MoveFocusToNextItem(currentItemWithFocus As XUIInspectorItem) As XUIInspectorItem</p> <p>Returns the next item that can receive tab focus given <code>currentItemWithFocus</code> or Nil if there is no item in this section after <code>currentItemWithFocus</code> that can receive tab focus.</p> <p>MoveFocusToPreviousItem(currentItemWithFocus As XUIInspectorItem) As XUIInspectorItem</p> <p>Returns the previous item that can receive tab focus given <code>currentItemWithFocus</code> or Nil if there is no item in this section after <code>currentItemWithFocus</code> that can receive tab focus.</p> <p>Remove(item As XUIInspectorItem)</p> <p>Removes <code>item</code> from this section if found.</p> <p>RemoveAt(index As Integer)</p> <p>Removes the item at <code>index</code>. Raises an <code>OutOfBoundsException</code> if <code>index</code> in invalid.</p> <p>Render(g As Graphics, x As Double, y As Double, style As XUIInspectorStyle) As Double</p> <p>Renders this section to <code>g</code> with its top-left corner at x, y. Returns the location to draw the next section's top-left corner.</p> <p>Assumes the owning inspector is not Nil.</p> <p>RenderDisclosureWidget(sectionTop As Double, g As Graphics, style As XUIInspectorStyle) As Rect</p> <p>Renders the section disclosure widget to <code>g</code> in the header and returns its hit bounds.</p> <p>RenderItems(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>Renders this section's items to <code>g</code>. The first item's top-left corner is at x, y. Returns the y position of the bottom of the last item.</p>"},{"location":"XUI/XUIInspector/XUIInspectorStyle/","title":"XUIInspectorStyle","text":""},{"location":"XUI/XUIInspector/XUIInspectorStyle/#description","title":"Description","text":"<p><code>XUIInspector</code> is highly customisable. This class contains the various properties that can be  styled in an inspector that should be honoured by well behaved XUIInspectorItems.</p>"},{"location":"XUI/XUIInspector/XUIInspectorStyle/#properties","title":"Properties","text":"Name Type Read-Only AccentColor <code>ColorGroup</code> BackgroundColor <code>ColorGroup</code> BorderColor <code>ColorGroup</code> ControlBackgroundColor <code>ColorGroup</code> ControlBorderColor <code>ColorGroup</code> FocusColor <code>ColorGroup</code> FontName <code>String</code> FontSize <code>Double</code> ItemDisclosureWidgetColor <code>ColorGroup</code> Name <code>String</code> PlaceholderTextColor <code>ColorGroup</code> SectionBackColor <code>ColorGroup</code> SectionBorderColor <code>ColorGroup</code> SectionDisclosureWidgetColor <code>ColorGroup</code> SelectionColor <code>ColorGroup</code> SwitchColor <code>ColorGroup</code> TextColor <code>ColorGroup</code> TextFieldCaptionBackgroundColor <code>ColorGroup</code> TextFieldCaptionTextColor <code>ColorGroup</code>"},{"location":"XUI/XUIInspector/XUIInspectorStyle/#methods","title":"Methods","text":"Name Parameters Returns Constructor Default <code>XUIInspectorStyle</code>"},{"location":"XUI/XUIInspector/XUIInspectorStyle/#property-descriptions","title":"Property Descriptions","text":"<p>AccentColor As ColorGroup</p> <p>The accent colour.</p> <p>BackgroundColor As ColorGroup</p> <p>The preferred background colour.</p> <p>BorderColor As ColorGroup</p> <p>The colour of the inspector's borders.</p> <p>ControlBackgroundColor As ColorGroup</p> <p>The background colour for controls.</p> <p>ControlBorderColor As ColorGroup</p> <p>The colour to use for control borders.</p> <p>FocusColor As ColorGroup</p> <p>The colour used to emphasise focus.</p> <p>FontName As String</p> <p>The name of the font to use.</p> <p>FontSize As Double</p> <p>The desired font size for text.</p> <p>ItemDisclosureWidgetColor As ColorGroup</p> <p>The colour of item disclosure widgets.</p> <p>Name As String</p> <p>This style's name.</p> <p>PlaceholderTextColor As ColorGroup</p> <p>The colour of placeholder text.</p> <p>SectionBackColor As ColorGroup</p> <p>The background colour of section headings.</p> <p>SectionBorderColor As ColorGroup</p> <p>The section border colour.</p> <p>SectionDisclosureWidgetColor As ColorGroup</p> <p>The colour of the section disclosure widget.</p> <p>SelectionColor As ColorGroup</p> <p>The selection colour.</p> <p>SwitchColor As ColorGroup</p> <p>The colour to use for the circle in a toggle switch.</p> <p>TextColor As ColorGroup</p> <p>The preferred text colour.</p> <p>TextFieldCaptionBackgroundColor As ColorGroup</p> <p>The background colour of the optional caption in a text field.</p> <p>TextFieldCaptionTextColor As ColorGroup</p> <p>The colour to use for the optional caption displayed in text fields.</p>"},{"location":"XUI/XUIInspector/XUIInspectorStyle/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Initialise all ColorGroups to prevent Nil object exceptions in subclasses that don't initialise them.</p> <p>Default() As XUIInspectorStyle This method is shared.</p> <p>Returns the default style for the inspector.</p> <p>Feel free to create your own.</p>"},{"location":"XUI/XUIInspector/XUIInspectorTextFieldRenderer/","title":"XUIInspectorTextFieldRenderer","text":""},{"location":"XUI/XUIInspector/XUIInspectorTextFieldRenderer/#description","title":"Description","text":"<p>Handles rendering a text field to a graphics context.</p>"},{"location":"XUI/XUIInspector/XUIInspectorTextFieldRenderer/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaretPosition <code>Integer</code> Contents <code>String</code> Height <code>Double</code> mBuffer <code>Picture</code> mCachedVisibleWidth <code>Double</code> mCaretPosition <code>Integer</code> mCaretVisible <code>Boolean</code> mCharacters() <code>String</code> mCurrentSelection <code>XUITextSelection</code> mHasFocus <code>Boolean</code> mOwningItem <code>WeakRef</code> mScrollOffset <code>Integer</code> mStyle <code>XUIInspectorStyle</code> Placeholder <code>String</code> TextSelected <code>Boolean</code> \u2714 Width <code>Double</code>"},{"location":"XUI/XUIInspector/XUIInspectorTextFieldRenderer/#methods","title":"Methods","text":"Name Parameters Returns CaretAtEnd <code>Boolean</code> CaretXCoordinate <code>Integer</code> CharacterAtCaret <code>String</code> CharsToCaret <code>String</code> ClearSelection Constructor owningItem As <code>XUIInspectorItem</code>, placeholder As <code>String</code>, caption As <code>String</code> DeleteBackward DeleteForward DeleteSelection DoubleClick x As <code>Integer</code>, y As <code>Integer</code> InsertCharacter char As <code>String</code>, range As <code>TextRange</code> MoveCaretLeft MoveCaretRight MoveCaretToNextWordEnd MoveCaretToPreviousWordStart MoveDownAndModifySelection MoveLeftAndModifySelection MoveRightAndModifySelection MoveToBeginningOfLine MoveToEndOfLine MoveToLeftEndOfLineAndModifySelection MoveToRightEndOfLineAndModifySelection MoveUpAndModifySelection MoveWordLeftAndModifySelection NextWordEnd caretPos As <code>Integer</code> <code>Integer</code> OwningItem <code>XUIInspectorItem</code> PaintCaret style As <code>XUIInspectorStyle</code> PaintSelection selectionColor As <code>ColorGroup</code> PreviousWordStart caretPos As <code>Integer</code> <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, height As <code>Double</code>, style As <code>XUIInspectorStyle</code>, hasFocus As <code>Boolean</code> ReplaceSelection s As <code>String</code> ScrollToCaret visibleWidth As <code>Double</code> SelectAll SelectedText <code>String</code> SelectWhitespaceAroundCaret SelectWordAtCaret TripleClick x As <code>Integer</code>, y As <code>Integer</code> UpdateCaretPosition x As <code>Double</code>, y As <code>Double</code> WidthToColumn column As <code>Integer</code>, g As <code>Graphics</code> <code>Double</code>"},{"location":"XUI/XUIInspector/XUIInspectorTextFieldRenderer/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> LEFT_SCROLL_PADDING <code>Double</code> RIGHT_SCROLL_PADDING <code>Double</code> VPADDING <code>Double</code> <p>HPADDING As Double The number of pixels to pad the contents left and right.</p> <p>LEFT_SCROLL_PADDING As Double The number of pixels to pad left when scrolling leftwards.</p> <p>RIGHT_SCROLL_PADDING As Double Fudge factor for padding the right of the line when horizontal scrolling.</p> <p>VPADDING As Double The number of pixels to pad the contents top and bottom.</p>"},{"location":"XUI/XUIInspector/XUIInspectorTextFieldRenderer/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>Optional caption to display within the text field at the inner left edge.</p> <p>CaretPosition As Integer</p> <p>The current caret position. <code>0</code> is before the first character.</p> <p>Contents As String</p> <p>The contents of this text field.</p> <p>Height As Double</p> <p>The height of the text field.</p> <p>mBuffer As Picture</p> <p>The buffer picture representing this text field in its entirety (excluding borders and focus ring).</p> <p>mCachedVisibleWidth As Double</p> <p>Cached reference to the <code>width</code> parameter passed tot he <code>Render</code> method.</p> <p>mCaretPosition As Integer</p> <p>The current caret position. <code>0</code> is before the first character.</p> <p>mCaretVisible As Boolean</p> <p>If True then the caret will be drawn.</p> <p>mCharacters() As String</p> <p>The raw characters of this text field.</p> <p>mCurrentSelection As XUITextSelection</p> <p>Backing field for the <code>CurrentSelection</code> computed property.</p> <p>mHasFocus As Boolean</p> <p>If True then this text field has the focus.</p> <p>mOwningItem As WeakRef</p> <p>A weak reference to the inspector item this renderer belongs to.</p> <p>mScrollOffset As Integer</p> <p>The X scroll offset. 0 is baseline. Positive values indicate scrolling to the right.</p> <p>mStyle As XUIInspectorStyle</p> <p>Cached reference to the last style used in the <code>Render</code> method.</p> <p>Placeholder As String</p> <p>Optional placeholder text.</p> <p>TextSelected As Boolean</p> <p>True if there is any text currently selected.</p> <p>Width As Double</p> <p>The width of the text field.</p>"},{"location":"XUI/XUIInspector/XUIInspectorTextFieldRenderer/#method-descriptions","title":"Method Descriptions","text":"<p>CaretAtEnd() As Boolean</p> <p>True if the caret is at the end of the text.</p> <p>CaretXCoordinate() As Integer</p> <p>Returns the number of pixels from the left edge of the textfield the caret currently is.</p> <p>CharacterAtCaret() As String</p> <p>Returns the caret immediately in front of the caret. May return \"\".</p> <p>CharsToCaret() As String</p> <p>Returns the characters up to the caret.</p> <p>ClearSelection()</p> <p>Clears the selection (if there is one).</p> <p>Constructor(owningItem As XUIInspectorItem, placeholder As String, caption As String)</p> <p>Constructs a new inspector text field renderer.</p> <p>DeleteBackward()</p> <p>Deletes the character before the caret.</p> <p>DeleteForward()</p> <p>Deletes the character immediately in front of the caret.</p> <p>DeleteSelection()</p> <p>Deletes the text in the current selection.</p> <p>DoubleClick(x As Integer, y As Integer)</p> <p>Handle a double click at <code>x, y</code>.</p> <p>InsertCharacter(char As String, range As TextRange)</p> <p>Inserts a single character at the current caret position.</p> <p>MoveCaretLeft()</p> <p>Moves the caret to the left one position.</p> <p>MoveCaretRight()</p> <p>Moves the caret one position to the right.</p> <p>MoveCaretToNextWordEnd()</p> <p>Moves the caret to the end of the next word.</p> <p>MoveCaretToPreviousWordStart()</p> <p>Moves the caret to the start of the previous word.</p> <p>MoveDownAndModifySelection()</p> <p>Moves down and modifies the selection.</p> <p>MoveLeftAndModifySelection()</p> <p>Moves the caret one position to the left and modifies the current selection.</p> <p>The user has pressed Shift+Left arrow.</p> <p>MoveRightAndModifySelection()</p> <p>Moves the caret one position to the right and modifies the current selection.</p> <p>The user has pressed Shift+Right arrow.</p> <p>MoveToBeginningOfLine()</p> <p>Moves the caret to the beginning of the line.</p> <p>MoveToEndOfLine()</p> <p>Moves the caret to the end of the line.</p> <p>MoveToLeftEndOfLineAndModifySelection()</p> <p>Moves the selection to the left end of the line.</p> <p>MoveToRightEndOfLineAndModifySelection()</p> <p>Moves the selection to the right end of the line.</p> <p>MoveUpAndModifySelection()</p> <p>Moves up and modifies the selection.</p> <p>MoveWordLeftAndModifySelection()</p> <p>Selects the text from the beginning of the word to the left of the caret to the current caret position.</p> <p>NextWordEnd(caretPos As Integer) As Integer</p> <p>Returns the caret position of the end of the word after the <code>caretPos</code>.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range for this line.</p> <p>OwningItem() As XUIInspectorItem</p> <p>A weak reference to the inspector item this renderer belongs to.</p> <p>PaintCaret(style As XUIInspectorStyle)</p> <p>Paints the caret (if visible) at the current caret position.</p> <p>Assumes <code>mBuffer</code> is not Nil.</p> <p>PaintSelection(selectionColor As ColorGroup)</p> <p>Paints the selection background to <code>mBuffer</code> if there is a selection.</p> <p>Assumes <code>mBuffer</code> is not Nil.</p> <p>PreviousWordStart(caretPos As Integer) As Integer</p> <p>Returns the caret pos of the start of the word before the <code>caretPos</code>.</p> <p>Raises an <code>InvalidArgumentException</code> if <code>caretPos</code> is out of range.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, height As Double, style As XUIInspectorStyle, hasFocus As Boolean)</p> <p>Render this text field to <code>g</code> at <code>x, y</code> with the specified <code>width</code> and <code>height</code>.</p> <p>ReplaceSelection(s As String)</p> <p>Replaces the current selection with <code>s</code>.</p> <p>ScrollToCaret(visibleWidth As Double)</p> <p>Computes the required scroll offset to ensure that the caret is visible within <code>visibleWidth</code>.</p> <p>Assumes <code>mBuffer</code> is not Nil.</p> <p>SelectAll()</p> <p>Select the entire contents of the text field.</p> <p>SelectedText() As String</p> <p>Returns the currently selected text or \"\" if there is no selection.</p> <p>SelectWhitespaceAroundCaret()</p> <p>Selects all whitespace around the current caret position on the caret's current line.</p> <p>SelectWordAtCaret()</p> <p>Selects the word the caret is within.</p> <p>TripleClick(x As Integer, y As Integer)</p> <p>Handles a triple click at <code>x, y</code>.</p> <p>UpdateCaretPosition(x As Double, y As Double)</p> <p>Updates the current caret position based on a click at <code>x, y</code>.</p> <p><code>x, y</code> does not factor in scrolling. Assumes <code>mBuffer</code> is not Nil. Assumes <code>Render</code> has been called at least once prior to this as we rely on it caching the style.</p> <p>WidthToColumn(column As Integer, g As Graphics) As Double</p> <p>The width in pixels from the start of the line to <code>column</code>. Does not accoutn for any horizontal padding. Assumes <code>g</code> is the context that will be drawn to and that the font properties have already been set.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorCheckBoxItem/","title":"XUIInspectorCheckBoxItem","text":"<p>Implements <code>XUIInspectorItem</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorCheckBoxItem/#description","title":"Description","text":"<p>Used to display a checkbox with a caption in the inspector.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorCheckBoxItem/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaptionWidth <code>Integer</code> mBounds <code>Rect</code> mCaption <code>String</code> mCheckboxBounds <code>Rect</code> mData <code>Variant</code> mID <code>String</code> mSection <code>WeakRef</code> mValue <code>Boolean</code> Value <code>Boolean</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorCheckBoxItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptTab <code>Boolean</code> Constructor ID As <code>String</code>, caption As <code>String</code>, captionWidth As <code>Integer</code>, value As <code>Boolean</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus DrawCheckbox g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, style As <code>XUIInspectorStyle</code> FromTOML toml As <code>String</code> <code>XUIInspectorCheckBoxItem</code> Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PopupDismissed PopupItemSelected index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorCheckBoxItem/#constants","title":"Constants","text":"Name Type CHECKBOX_SIZE <code>Double</code> HPADDING <code>Double</code> VPADDING <code>Double</code> <p>CHECKBOX_SIZE As Double The size of the checkbox square.</p> <p>HPADDING As Double The number of pixels to pad the item's content left and right.</p> <p>VPADDING As Double The number of pixels to pad the item's content above and below.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorCheckBoxItem/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>The caption to display besides the checkbox.</p> <p>CaptionWidth As Integer</p> <p>The width the caption should be constrained to.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mCaption As String</p> <p>The caption to display besides the checkbox.</p> <p>mCheckboxBounds As Rect</p> <p>The bounds of the checkbox. Used for hit-testing.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p> <p>mValue As Boolean</p> <p>The checkbox value. True = checked, False = unchecked.</p> <p>Value As Boolean</p> <p>The checkbox value. True = checked, False = unchecked.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorCheckBoxItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(ID As String, caption As String, captionWidth As Integer, value As Boolean)</p> <p>Constructs a new checkbox item. <code>captionWidth</code> is the desired width of the caption and <code>value</code> is the initial checkbox state.</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>DrawCheckbox(g As Graphics, x As Double, y As Double, style As XUIInspectorStyle)</p> <p>Draws the checkbox to the passed graphics context at the precomputed x, y position.</p> <p>FromTOML(toml As String) As XUIInspectorCheckBoxItem</p> <p>Returns a new checkbox item from a TOML string.</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <pre><code>|------------------|\n| CAPTION       [] |\n|------------------|\n</code></pre> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/","title":"XUIInspectorColorGroupItem","text":"<p>Implements <code>XUIInspectorItem</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/#description","title":"Description","text":"<p>An item containing a two colour swatches and a caption. Used to set ColorGroups for light and dark mode applications.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaptionWidth <code>Integer</code> DarkColorLabelText <code>String</code> LightColorLabelText <code>String</code> mActiveSwatch <code>ActiveSwatches</code> mBounds <code>Rect</code> mCaption <code>String</code> mColorPickerVisible <code>Boolean</code> mDarkSwatchBounds <code>Rect</code> mData <code>Variant</code> mID <code>String</code> mLightSwatchBounds <code>Rect</code> mSection <code>WeakRef</code> mValue <code>ColorGroup</code> Value <code>ColorGroup</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptTab <code>Boolean</code> Constructor ID As <code>String</code>, caption As <code>String</code>, captionWidth As <code>Integer</code>, value As <code>ColorGroup</code>, lightColorLabelText As <code>String</code>, darkColorLabelText As <code>String</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus DrawSwatchesAndSetBounds g As <code>Graphics</code>, x As <code>Double</code>, lightY As <code>Double</code>, darkY As <code>Double</code>, w As <code>Double</code>, h As <code>Double</code> DrawSwatchLabels x As <code>Double</code>, lightY As <code>Double</code>, darkY As <code>Double</code>, w As <code>Double</code>, h As <code>Double</code>, lightBaseline As <code>Double</code>, darkBaseline As <code>Double</code>, g As <code>Graphics</code>, style As <code>XUIInspectorStyle</code> Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PickerClosing picker As <code>XUIColorPicker</code> PopupDismissed PopupItemSelected index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code> SwatchHeight style As <code>XUIInspectorStyle</code> <code>Double</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> SWATCH_CAPTION_INTERNAL_PADDING <code>Double</code> SWATCH_VPADDING <code>Double</code> VPADDING <code>Double</code> <p>HPADDING As Double The number of pixels to pad the item's content left and right.</p> <p>SWATCH_CAPTION_INTERNAL_PADDING As Double The number of pixels to pad the left and right of a swatch caption from its borders.</p> <p>SWATCH_VPADDING As Double The height of the swatch is the height of the caption plus this value.</p> <p>VPADDING As Double The number of pixels to pad the item's content above and below.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/#enumerations","title":"Enumerations","text":"<p>ActiveSwatches</p> <p>The type of currently active swatch.</p> Name None Light Dark"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>The caption to display besides the colour swatches.</p> <p>CaptionWidth As Integer</p> <p>The width the caption should be constrained to.</p> <p>DarkColorLabelText As String</p> <p>The label text to use to indicate the dark colour swatch.</p> <p>LightColorLabelText As String</p> <p>The label text to use to indicate the light colour swatch.</p> <p>mActiveSwatch As ActiveSwatches</p> <p>The currently active swatch.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mCaption As String</p> <p>The caption to display besides the colour swatches.</p> <p>mColorPickerVisible As Boolean</p> <p>True if the color picker is visible.</p> <p>mDarkSwatchBounds As Rect</p> <p>The bounds of the dark mode colour swatch. Used for hit-testing.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mLightSwatchBounds As Rect</p> <p>The bounds of the light mode colour swatch. Used for hit-testing.</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p> <p>mValue As ColorGroup</p> <p>The value as a ColorGroup.</p> <p>Value As ColorGroup</p> <p>The value as a ColorGroup.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorGroupItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(ID As String, caption As String, captionWidth As Integer, value As ColorGroup, lightColorLabelText As String, darkColorLabelText As String)</p> <p>Constructs a new item containing a colour swatch which can be altered by clicking it. <code>value</code> is the initial ColorGroup.</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>DrawSwatchesAndSetBounds(g As Graphics, x As Double, lightY As Double, darkY As Double, w As Double, h As Double)</p> <p>Draws the colour swatches <code>g</code> and updates their bounds. <code>lightY</code> is the Y coordinate of the top swatch (the light swatch). <code>darkY</code> is the Y coordinate of the bottom swatch (the dark swatch).</p> <p>DrawSwatchLabels(x As Double, lightY As Double, darkY As Double, w As Double, h As Double, lightBaseline As Double, darkBaseline As Double, g As Graphics, style As XUIInspectorStyle)</p> <p>Draw the swatch labels to <code>g</code>. <code>lightY</code> is the Y coordinate for the light label and <code>darkY</code> is the Y coordinate for the dark label.</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PickerClosing(picker As XUIColorPicker)</p> <p>Delegate called when a color swatch's color picker is closing.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <pre><code>|-----------------------------|\n| CAPTION   L [ LIGHT COLOR ] |\n|           D [ DARK COLOR  ] |\n|-----------------------------|\n\n```nohighlight\n</code></pre> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p> <p>SwatchHeight(style As XUIInspectorStyle) As Double</p> <p>The height of the swatch given the current style.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorItem/","title":"XUIInspectorColorItem","text":"<p>Implements <code>XUIInspectorItem</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorItem/#description","title":"Description","text":"<p>An item containing a single colour swatch and a caption.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorItem/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaptionWidth <code>Integer</code> mBounds <code>Rect</code> mCaption <code>String</code> mColorPickerVisible <code>Boolean</code> mData <code>Variant</code> mID <code>String</code> mSection <code>WeakRef</code> mSwatchBounds <code>Rect</code> mValue <code>Color</code> Value <code>Color</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptTab <code>Boolean</code> Constructor ID As <code>String</code>, caption As <code>String</code>, captionWidth As <code>Integer</code>, value As <code>Color</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus DrawColorSwatch g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, style As <code>XUIInspectorStyle</code>, w As <code>Double</code>, h As <code>Double</code> Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PickerClosing picker As <code>XUIColorPicker</code> PopupDismissed PopupItemSelected index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code> SwatchHeight style As <code>XUIInspectorStyle</code> <code>Double</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorItem/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> SWATCH_VPADDING <code>Double</code> VPADDING <code>Double</code> <p>HPADDING As Double The number of pixels to pad the item's content left and right.</p> <p>SWATCH_VPADDING As Double The height of the swatch is the height of the caption plus this value.</p> <p>VPADDING As Double The number of pixels to pad the item's content above and below.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorItem/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>The caption to display besides the colour swatch.</p> <p>CaptionWidth As Integer</p> <p>The width the caption should be constrained to.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mCaption As String</p> <p>The caption to display besides the colour swatch.</p> <p>mColorPickerVisible As Boolean</p> <p>True if the color picker is visible.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p> <p>mSwatchBounds As Rect</p> <p>The bounds of the colour swatch. Used for hit-testing.</p> <p>mValue As Color</p> <p>The swatch colour.</p> <p>Value As Color</p> <p>The swatch colour.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorColorItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(ID As String, caption As String, captionWidth As Integer, value As Color)</p> <p>Constructs a new item containing a colour swatch which can be altered by clicking it. <code>value</code> is the initial colour.</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>DrawColorSwatch(g As Graphics, x As Double, y As Double, style As XUIInspectorStyle, w As Double, h As Double)</p> <p>Draws the color to the passed graphics context at the precomputed x, y position of width <code>w</code> and height <code>h</code> and updates its bounds.</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PickerClosing(picker As XUIColorPicker)</p> <p>Delegate called when this swatch's color picker is closing.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <pre><code>|----------------------|\n| CAPTION     [      ] |\n|----------------------|\n</code></pre> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p> <p>SwatchHeight(style As XUIInspectorStyle) As Double</p> <p>The height of the swatch given the current style.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorDualTextFieldItem/","title":"XUIInspectorDualTextFieldItem","text":"<p>Implements <code>XUIInspectorItem</code>, <code>XUIInspectorItemKeyHandler</code>, <code>XUIInspectorItemWithMultipleTabFocusControls</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorDualTextFieldItem/#description","title":"Description","text":"<p>An item with two text fields, one above the other.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorDualTextFieldItem/#properties","title":"Properties","text":"Name Type Read-Only BottomCaption <code>String</code> BottomHasFocus <code>Boolean</code> BottomPlaceholder <code>String</code> Caption <code>String</code> CaptionWidth <code>Integer</code> mBottomContentsWhenActivated <code>String</code> mBottomTextField <code>XUIInspectorTextFieldRenderer</code> mBottomTextFieldBounds <code>Rect</code> mBounds <code>Rect</code> mCaption <code>String</code> mData <code>Variant</code> mID <code>String</code> mLastNewlineEvent <code>Double</code> mMaxTextFieldCaptionWidth <code>Double</code> mSection <code>WeakRef</code> mTextFieldWidth <code>Integer</code> mTopContentsWhenActivated <code>String</code> mTopTextField <code>XUIInspectorTextFieldRenderer</code> mTopTextFieldBounds <code>Rect</code> TopCaption <code>String</code> TopHasFocus <code>Boolean</code> TopPlaceholder <code>String</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorDualTextFieldItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptAnotherTabFocus <code>Boolean</code> CanAcceptBackTab <code>Boolean</code> CanAcceptTab <code>Boolean</code> Constructor id As <code>String</code>, caption As <code>String</code>, captionWidth As <code>Integer</code>, topCaption As <code>String</code>, bottomCaption As <code>String</code>, topContents As <code>String</code>, bottomContents As <code>String</code>, topPlaceHolder As <code>String</code>, bottomPlaceHolder As <code>String</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus DoCommand command As <code>String</code> DrawTextFieldCaption s As <code>String</code>, baseline As <code>Double</code>, x As <code>Double</code>, y As <code>Double</code>, w As <code>Double</code>, h As <code>Double</code>, g As <code>Graphics</code>, style As <code>XUIInspectorStyle</code> HandleNewline Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> InsertCharacter char As <code>String</code>, range As <code>TextRange</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PopupDismissed PopupItemSelected index As <code>Integer</code> RectForRange range As <code>TextRange</code> <code>Xojo.Rect</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorDualTextFieldItem/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> NEWLINE_EVENT_DELAY <code>Double</code> TEXTFIELD_CAPTION_INTERNAL_PADDING <code>Double</code> TEXTFIELD_CONTENT_VPADDING <code>Double</code> TEXTFIELD_VPADDING <code>Double</code> VPADDING <code>Double</code> <p>HPADDING As Double The number of pixels to pad the item's content left and right.</p> <p>NEWLINE_EVENT_DELAY As Double The number of microseconds to wait between accepting two consecutive newline insertion events.</p> <p>TEXTFIELD_CAPTION_INTERNAL_PADDING As Double The number of pixels to pad the left and right of a text field caption from its borders.</p> <p>TEXTFIELD_CONTENT_VPADDING As Double The number of pixels to pad the contents of the text field from the text field borders.</p> <p>TEXTFIELD_VPADDING As Double The number of pixels to pad vertically between the two textfields.</p> <p>VPADDING As Double The number of pixels to pad the text field above and below.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorDualTextFieldItem/#property-descriptions","title":"Property Descriptions","text":"<p>BottomCaption As String</p> <p>The bottom textfield's caption.</p> <p>BottomHasFocus As Boolean</p> <p>If True then the bottom text field has the focus.</p> <p>BottomPlaceholder As String</p> <p>Optional placeholder for the bottom text field.</p> <p>Caption As String</p> <p>The caption to display next to the text field.</p> <p>CaptionWidth As Integer</p> <p>The desired width of the caption.</p> <p>mBottomContentsWhenActivated As String</p> <p>The contents of the bottom text field when last activated.</p> <p>mBottomTextField As XUIInspectorTextFieldRenderer</p> <p>The bottom text field.</p> <p>mBottomTextFieldBounds As Rect</p> <p>The bounds of the bottom text field.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mCaption As String</p> <p>The caption to display next to the text field.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mLastNewlineEvent As Double</p> <p>When the last newline insertion event was handled.</p> <p>mMaxTextFieldCaptionWidth As Double</p> <p>The width of the widest text field caption. Computed in <code>Render</code>.</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p> <p>mTextFieldWidth As Integer</p> <p>The width of the text field.</p> <p>mTopContentsWhenActivated As String</p> <p>The contents of the top text field when last activated.</p> <p>mTopTextField As XUIInspectorTextFieldRenderer</p> <p>The top text field.</p> <p>mTopTextFieldBounds As Rect</p> <p>The bounds of the top text field.</p> <p>TopCaption As String</p> <p>The top textfield's caption.</p> <p>TopHasFocus As Boolean</p> <p>If True then the top text field has the focus.</p> <p>TopPlaceholder As String</p> <p>Optional placeholder for the top text field.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorDualTextFieldItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>CanAcceptAnotherTabFocus() As Boolean</p> <p>Returns True if pressing the tab key should move the focus to another control within this item.</p> <p>Part of the <code>XUIInspectorItemWithMultipleTabFocusControls</code> interface.</p> <p>CanAcceptBackTab() As Boolean</p> <p>Returns True if pressing the \"back tab\" key combo should move the focus to a previous control within this item.</p> <p>Part of the <code>XUIInspectorItemWithMultipleTabFocusControls</code> interface.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(id As String, caption As String, captionWidth As Integer, topCaption As String, bottomCaption As String, topContents As String, bottomContents As String, topPlaceHolder As String, bottomPlaceHolder As String)</p> <p>Constructs a new item with two editable text fields. Each text field can have an optional fixed caption beside it and optional placeholder text.</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>DoCommand(command As String)</p> <p>A key command has occurred.</p> <p>Part of the <code>XUIInspectorItemKeyHandler</code> interface.</p> <p>DrawTextFieldCaption(s As String, baseline As Double, x As Double, y As Double, w As Double, h As Double, g As Graphics, style As XUIInspectorStyle)</p> <p>Draws a text field caption <code>s</code> to <code>g</code> at <code>x, y</code> with width <code>w</code> and height <code>h</code>. If <code>s</code> is empty then nothing is drawn.</p> <p>HandleNewline()</p> <p>Handle the insertion of a newline (i.e the return key).</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>InsertCharacter(char As String, range As TextRange)</p> <p>The user is attempting to insert a single character into this item.</p> <p>Part of the <code>XUIInspectorItemKeyHandler</code> interface.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't occur in this item.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't occur in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>RectForRange(range As TextRange) As Xojo.Rect</p> <p>Return a range for macOS to display the character picker.</p> <p>I'm being lazy here and returning an arbitrary width and height because for our purposes we are only interested in the popup being positioned at the correct location. This will likely mean that I'm not fully supporting advanced uses of this event but since I don't actually understand the event, that's OK by me.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <pre><code>|----------------------------|\n| CAPTION   T [ TEXT FIELD ] |\n|           B [ TEXT FIELD ] |\n|----------------------------|\n\n```nohighlight\n\nT: Top caption.\nB: Bottom caption.\n</code></pre> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorFullWidthButtonItem/","title":"XUIInspectorFullWidthButtonItem","text":"<p>Implements <code>XUIInspectorItem</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorFullWidthButtonItem/#description","title":"Description","text":"<p>Used to display a full width button in the inspector.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorFullWidthButtonItem/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> mBounds <code>Rect</code> mButtonBounds <code>Rect</code> mCaption <code>String</code> mData <code>Variant</code> mID <code>String</code> mMouseIsOver <code>Boolean</code> mSection <code>WeakRef</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorFullWidthButtonItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptTab <code>Boolean</code> Constructor id As <code>String</code>, buttonCaption As <code>String</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PopupDismissed PopupItemSelected index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorFullWidthButtonItem/#constants","title":"Constants","text":"Name Type BUTTON_HEIGHT <code>Double</code> HPADDING <code>Double</code> VPADDING <code>Double</code> <p>BUTTON_HEIGHT As Double The height of the button.</p> <p>HPADDING As Double The number of pixels to pad the button to the left and right.</p> <p>VPADDING As Double The number of pixels to pad the button above and below.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorFullWidthButtonItem/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>The caption to display in the button.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mButtonBounds As Rect</p> <p>The bounds of the button. Computed in <code>Render()</code>.</p> <p>mCaption As String</p> <p>The caption to display in the button.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mMouseIsOver As Boolean</p> <p>True if the mouse is over the button.</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorFullWidthButtonItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(id As String, buttonCaption As String)</p> <p>Constructs a new item containing a full width button.</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItem/","title":"XUIInspectorItem","text":""},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItem/#description","title":"Description","text":"<p>A class interface that all inspector items must implement.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptTab <code>Boolean</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PopupDismissed PopupItemSelected index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect The bounds of this item within the inspector.</p> <p>Bounds(Assigns b As Rect) Sets the bounds of this item in the inspector.</p> <p>CanAcceptTab() As Boolean Returns True if this item is able to accept the focus via the tab key.</p> <p>Data() As Variant Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant) Arbitrary data associated with this item.</p> <p>DidReceiveBackTab() This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>DidReceiveTabFocus() This item has just received the focus via the tab key.</p> <p>Height(style As XUIInspectorStyle) As Double The height of this item given the desired style.</p> <p>ID() As String Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>LostFocus() This item has just lost the focus.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>MouseExit() As Boolean Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>Owner() As XUIInspector A weak reference to the inspector this item belongs to.</p> <p>PopupDismissed() Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>PopupItemSelected(index As Integer) The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Section() As XUIInspectorSection A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection) The section this item is within to. A weak reference will be created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemKeyHandler/","title":"XUIInspectorItemKeyHandler","text":""},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemKeyHandler/#description","title":"Description","text":"<p>Items that handle key strokes should implement this interface.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemKeyHandler/#methods","title":"Methods","text":"Name Parameters Returns DoCommand command As <code>String</code> InsertCharacter char As <code>String</code>, range As <code>TextRange</code> RectForRange range As <code>TextRange</code> <code>Xojo.Rect</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemKeyHandler/#method-descriptions","title":"Method Descriptions","text":"<p>DoCommand(command As String) A key command has occurred.</p> <p>InsertCharacter(char As String, range As TextRange) The user is attempting to insert a single character into this item.</p> <p>RectForRange(range As TextRange) As Xojo.Rect Return a range for macOS to display the character picker.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemWithMultipleTabFocusControls/","title":"XUIInspectorItemWithMultipleTabFocusControls","text":""},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemWithMultipleTabFocusControls/#description","title":"Description","text":"<p>Items implementing this interface contain more than one control that can accept the focus via the tab key.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemWithMultipleTabFocusControls/#methods","title":"Methods","text":"Name Parameters Returns CanAcceptAnotherTabFocus <code>Boolean</code> CanAcceptBackTab <code>Boolean</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorItemWithMultipleTabFocusControls/#method-descriptions","title":"Method Descriptions","text":"<p>CanAcceptAnotherTabFocus() As Boolean Returns True if pressing the tab key should move the focus to another control within this item.</p> <p>CanAcceptBackTab() As Boolean Returns True if pressing the \"back tab\" key combo should move the focus to a previous control within this item.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorPopupItem/","title":"XUIInspectorPopupItem","text":"<p>Implements <code>XUIInspectorItem</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorPopupItem/#description","title":"Description","text":"<p>An item containing a popup menu and caption.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorPopupItem/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaptionWidth <code>Integer</code> mBounds <code>Rect</code> mCaption <code>String</code> mClosedPopupBottomEdge <code>Double</code> mClosedPopupRightEdge <code>Double</code> mClosedPopupTopEdge <code>Double</code> mData <code>Variant</code> mID <code>String</code> mItems() <code>String</code> mOpen <code>Boolean</code> mPopupBounds <code>Rect</code> mPopupWidth <code>Double</code> mSection <code>WeakRef</code> mSelectedIndex <code>Integer</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorPopupItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptTab <code>Boolean</code> Constructor ID As <code>String</code>, caption As <code>String</code>, captionWidth As <code>Integer</code>, items() As <code>String</code> CreatePopupMenu <code>XUIInspectorItemPopupMenu</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus DrawPopupBox x As <code>Double</code>, y As <code>Double</code>, g As <code>Graphics</code>, style As <code>XUIInspectorStyle</code> Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> Items <code>String()</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PopupDismissed PopupItemSelected index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorPopupItem/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> ITEM_WIDGET_PADDING <code>Double</code> ITEM_WIDGET_WIDTH <code>Double</code> POPUP_CONTENTS_HPADDING <code>Double</code> POPUP_INTERNAL_VPADDING <code>Double</code> VPADDING <code>Double</code> WIDGET_HEIGHT <code>Double</code> WIDGET_RPADDING <code>Double</code> WIDGET_WIDTH <code>Double</code> <p>HPADDING As Double The number of pixels to pad the item's content left and right.</p> <p>ITEM_WIDGET_PADDING As Double The number of pixels between the popup item text and the left-edge of the arrow widget.</p> <p>ITEM_WIDGET_WIDTH As Double The width of the arrow widget.</p> <p>POPUP_CONTENTS_HPADDING As Double The number of pixels to pad either side of each item in the popup menu.</p> <p>POPUP_INTERNAL_VPADDING As Double The number of pixels to pad the contents of the popup box above and below.</p> <p>VPADDING As Double The number of pixels to pad the item's content above and below.</p> <p>WIDGET_HEIGHT As Double The height of the downwards facing disclosure widget.</p> <p>WIDGET_RPADDING As Double The number of pixels to pad the right edge of the disclosure widget from the right edge of the popup menu.</p> <p>WIDGET_WIDTH As Double The width of the downwards facing disclosure widget.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorPopupItem/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>The caption to display besides the checkbox.</p> <p>CaptionWidth As Integer</p> <p>The desired width of the caption.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mCaption As String</p> <p>The caption to display besides the checkbox.</p> <p>mClosedPopupBottomEdge As Double</p> <p>Cached Y position of the bottom edge of the closed popup box. Required to draw the open popup box. This is computed in <code>Render()</code>.</p> <p>mClosedPopupRightEdge As Double</p> <p>Cached X position of the right edge of the closed popup box. Required to draw the open popup box. This is computed in <code>Render()</code>.</p> <p>mClosedPopupTopEdge As Double</p> <p>Cached Y position of the top edge of the closed popup box. Required to draw the open popup box. This is computed in <code>Render()</code>.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mItems() As String</p> <p>The items in the popup.</p> <p>mOpen As Boolean</p> <p>True if the popup is currently open.</p> <p>mPopupBounds As Rect</p> <p>The hit bounds for the popup.</p> <p>mPopupWidth As Double</p> <p>The last computed width of the popup menu (cached in <code>PopupWidth()</code>).</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p> <p>mSelectedIndex As Integer</p> <p>The index of the item in <code>mItems</code> that is currently selected.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorPopupItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(ID As String, caption As String, captionWidth As Integer, items() As String)</p> <p>Constructs a new item containing a popup menu and a caption. <code>items()</code> are the popup menu items.</p> <p>CreatePopupMenu() As XUIInspectorItemPopupMenu</p> <p>Returns the data needed by the inspector to create a popup menu anchored to the right of this item, lined up with the edge of the closed popup box.</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>DrawPopupBox(x As Double, y As Double, g As Graphics, style As XUIInspectorStyle)</p> <p>Draws the popup box to the context <code>g</code>.</p> <p>x: The left border of the popup menu. y: The top of the item bounds.</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Items() As String()</p> <p>Returns a clone of this popup item's items.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't occur in this item.</p> <p>Note: A click in this item when it has a popup menu displayed will be handled in <code>PopupItemSelected</code>()`.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't occur in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <pre><code>|-------------------------|\n| CAPTION      [ OPTION ] |\n|-------------------------|\n</code></pre> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorSwitchItem/","title":"XUIInspectorSwitchItem","text":"<p>Implements <code>XUIInspectorItem</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorSwitchItem/#description","title":"Description","text":"<p>An item containing an on-off switch and caption.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorSwitchItem/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaptionWidth <code>Integer</code> mBounds <code>Rect</code> mCaption <code>String</code> mData <code>Variant</code> mID <code>String</code> mSection <code>WeakRef</code> mSwitchBounds <code>Rect</code> mValue <code>Boolean</code> Value <code>Boolean</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorSwitchItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptTab <code>Boolean</code> Constructor ID As <code>String</code>, caption As <code>String</code>, captionWidth As <code>Integer</code>, value As <code>Boolean</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus DrawSwitch g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, style As <code>XUIInspectorStyle</code> Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PopupDismissed PopupItemSelected index As <code>Integer</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorSwitchItem/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> SWITCH_HEIGHT <code>Double</code> SWITCH_WIDTH <code>Double</code> VPADDING <code>Double</code> <p>HPADDING As Double The number of pixels to pad the item's content left and right.</p> <p>SWITCH_HEIGHT As Double The height of the switch.</p> <p>SWITCH_WIDTH As Double The width of the switch.</p> <p>VPADDING As Double The number of pixels to pad the item's content above and below.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorSwitchItem/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>The caption to display besides the switch.</p> <p>CaptionWidth As Integer</p> <p>The width the caption should be constrained to.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mCaption As String</p> <p>The caption to display besides the switch.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p> <p>mSwitchBounds As Rect</p> <p>The bounds of the switch. Used for hit-testing.</p> <p>mValue As Boolean</p> <p>The switch value. True = on, False = off.</p> <p>Value As Boolean</p> <p>The switch value. True = on, False = off.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorSwitchItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(ID As String, caption As String, captionWidth As Integer, value As Boolean)</p> <p>Constructs a new item containing a switch which can be toggled on and off. <code>value</code> is the initial switch state (<code>True</code> is \"on\").</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>DrawSwitch(g As Graphics, x As Double, y As Double, style As XUIInspectorStyle)</p> <p>Draws the switch to the passed graphics context at the precomputed x, y position.</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't happen in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <pre><code>|----------------------|\n| CAPTION       (()  ) |\n|----------------------|\n</code></pre> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorTextFieldItem/","title":"XUIInspectorTextFieldItem","text":"<p>Implements <code>XUIInspectorItem</code>, <code>XUIInspectorItemKeyHandler</code></p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorTextFieldItem/#description","title":"Description","text":"<p>An item containing an editable text field beside a caption.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorTextFieldItem/#properties","title":"Properties","text":"Name Type Read-Only Caption <code>String</code> CaptionWidth <code>Integer</code> HasFocus <code>Boolean</code> mBounds <code>Rect</code> mCaption <code>String</code> mContentsWhenActivated <code>String</code> mData <code>Variant</code> mID <code>String</code> mLastNewlineEvent <code>Double</code> mPlaceholder <code>String</code> mSection <code>WeakRef</code> mTextField <code>XUIInspectorTextFieldRenderer</code> mTextFieldBounds <code>Rect</code> mTextFieldWidth <code>Integer</code> Placeholder <code>String</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorTextFieldItem/#methods","title":"Methods","text":"Name Parameters Returns Bounds <code>Rect</code> Bounds Assigns b As <code>Rect</code> CanAcceptBackTab <code>Boolean</code> CanAcceptTab <code>Boolean</code> Constructor id As <code>String</code>, caption As <code>String</code>, captionWidth As <code>Integer</code>, initialContents As <code>String</code>, placeHolder As <code>String</code> Data <code>Variant</code> Data Assigns v As <code>Variant</code> DidReceiveBackTab DidReceiveTabFocus DoCommand command As <code>String</code> HandleNewline Height style As <code>XUIInspectorStyle</code> <code>Double</code> ID <code>String</code> InsertCharacter char As <code>String</code>, range As <code>TextRange</code> LostFocus MouseDown x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseDownData</code> MouseExit <code>Boolean</code> MouseMoved x As <code>Double</code>, y As <code>Double</code> <code>XUIInspectorMouseMoveData</code> MouseUp x As <code>Integer</code>, y As <code>Integer</code>, clickType As <code>XUI.ClickTypes</code> <code>XUIInspectorMouseUpData</code> Owner <code>XUIInspector</code> PopupDismissed PopupItemSelected index As <code>Integer</code> RectForRange range As <code>TextRange</code> <code>Xojo.Rect</code> Render g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, width As <code>Double</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> Section <code>XUIInspectorSection</code> Section Assigns section As <code>XUIInspectorSection</code>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorTextFieldItem/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> NEWLINE_EVENT_DELAY <code>Double</code> TEXTFIELD_CONTENT_VPADDING <code>Double</code> VPADDING <code>Double</code> <p>HPADDING As Double The number of pixels to pad the item's content left and right.</p> <p>NEWLINE_EVENT_DELAY As Double The number of microseconds to wait between accepting two consecutive newline insertion events.</p> <p>TEXTFIELD_CONTENT_VPADDING As Double The number of pixels to pad the contents of the text field from the text field borders.</p> <p>VPADDING As Double The number of pixels to pad the text field above and below.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorTextFieldItem/#property-descriptions","title":"Property Descriptions","text":"<p>Caption As String</p> <p>The caption to display next to the text field.</p> <p>CaptionWidth As Integer</p> <p>The desired width of the caption.</p> <p>HasFocus As Boolean</p> <p>If True then the text field has the focus.</p> <p>mBounds As Rect</p> <p>The bounds of this item.</p> <p>mCaption As String</p> <p>The caption to display next to the text field.</p> <p>mContentsWhenActivated As String</p> <p>The contents of the text field when last activated.</p> <p>mData As Variant</p> <p>Arbitrary data associated with this item.</p> <p>mID As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>mLastNewlineEvent As Double</p> <p>When the last newline insertion event was handled.</p> <p>mPlaceholder As String</p> <p>Optional placeholder for the text field.</p> <p>mSection As WeakRef</p> <p>A weak reference to the inspector section this item is within. May be Nil.</p> <p>mTextField As XUIInspectorTextFieldRenderer</p> <p>This item's text field.</p> <p>mTextFieldBounds As Rect</p> <p>The bounds of the text field.</p> <p>mTextFieldWidth As Integer</p> <p>The width of the text field.</p> <p>Placeholder As String</p> <p>Optional placeholder for the text field.</p>"},{"location":"XUI/XUIInspector/Inspector%20Items/XUIInspectorTextFieldItem/#method-descriptions","title":"Method Descriptions","text":"<p>Bounds() As Rect</p> <p>The bounds of this item within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>Bounds(Assigns b As Rect)</p> <p>Sets the bounds of this item in the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>CanAcceptBackTab() As Boolean</p> <p>Returns True if pressing the \"back tab\" key combo should move the focus to a previous control within this item.</p> <p>Part of the <code>XUIInspectorItemWithMultipleTabFocusControls</code> interface.</p> <p>CanAcceptTab() As Boolean</p> <p>Returns True if this item is able to accept the focus via the tab key.</p> <p>Constructor(id As String, caption As String, captionWidth As Integer, initialContents As String, placeHolder As String)</p> <p>Constructs a new item with an editable text field. The text field can have a optional placeholder text.</p> <p>Data() As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Data(Assigns v As Variant)</p> <p>Arbitrary data associated with this item.</p> <p>DidReceiveBackTab()</p> <p>This item has just received the focus via the shift-tab key combo (the \"back tab\").</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>DidReceiveTabFocus()</p> <p>This item has just received the focus via the tab key.</p> <p>DoCommand(command As String)</p> <p>A key command has occurred.</p> <p>Part of the <code>XUIInspectorItemKeyHandler</code> interface.</p> <p>HandleNewline()</p> <p>Handle the insertion of a newline (i.e the return key).</p> <p>Height(style As XUIInspectorStyle) As Double</p> <p>The height of this item given the desired style.</p> <p>Part of the XUIInspectorItem interface.</p> <p>ID() As String</p> <p>Used to identify this item in notifications. You should ensure it is unique within the inspector.</p> <p>Part of the XUIInspectorItem interface.</p> <p>InsertCharacter(char As String, range As TextRange)</p> <p>The user is attempting to insert a single character into this item.</p> <p>Part of the <code>XUIInspectorItemKeyHandler</code> interface.</p> <p>LostFocus()</p> <p>This item just lost the focus.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>MouseDown(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseDownData</p> <p>Tells the item that a mouse down event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseDownData instance instructing the inspector how to handle the event or Nil if the click didn't occur in this item.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseExit() As Boolean</p> <p>Used to tell this item that the mouse has just exited it. Returns True if the inspector should redraw.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseMoved(x As Double, y As Double) As XUIInspectorMouseMoveData</p> <p>The mouse has just moved over this item. Returns data to inform the inspector how to handle the movement. May return Nil.</p> <p>Part of the XUIInspectorItem interface.</p> <p>MouseUp(x As Integer, y As Integer, clickType As XUI.ClickTypes) As XUIInspectorMouseUpData</p> <p>Tells the item that a mouse up event has occurred within its bounds. x, y are the absolute coordinates relative to the inspector (adjusted for scrolling). Returns a MouseUpData instance instructing the inspector how to handle the event or Nil if the click didn't occur in this item.</p> <p>Owner() As XUIInspector</p> <p>A weak reference to the inspector this item belongs to.</p> <p>PopupDismissed()</p> <p>Tells this item that any popup it thinks it has displayed has been dismissed with no action.</p> <p>Part of the <code>XUIInspectorItem</code> interface.</p> <p>PopupItemSelected(index As Integer)</p> <p>The entry at <code>index</code> has been selected in this item's popup menu.</p> <p>Part of the XUIInspectorItem interface.</p> <p>RectForRange(range As TextRange) As Xojo.Rect</p> <p>Return a range for macOS to display the character picker.</p> <p>I'm being lazy here and returning an arbitrary width and height because for our purposes we are only interested in the popup being positioned at the correct location. This will likely mean that I'm not fully supporting advanced uses of this event but since I don't actually understand the event, that's OK by me.</p> <p>Render(g As Graphics, x As Double, y As Double, width As Double, style As XUIInspectorStyle) As Double</p> <p>The item should render itself to the passed graphics context at the specified location. Returns the position of the item's bottom edge.</p> <p>Part of the XUIInspectorItem interface.</p> <pre><code>|--------------------------|\n| CAPTION   [ TEXT FIELD ] |\n|--------------------------|\n</code></pre> <p>Section() As XUIInspectorSection</p> <p>A weak reference to the section this item is in.</p> <p>Section(Assigns section As XUIInspectorSection)</p> <p>The section this item is within to. A weak reference will be created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/","title":"XUIInspectorItemPopupMenu","text":""},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/#description","title":"Description","text":"<p>Represents a popup menu in the inspector.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/#properties","title":"Properties","text":"Name Type Read-Only Anchor <code>XUIInspectorItemPopupMenu.Anchors</code> AnchorX <code>Double</code> Bounds <code>Rect</code> ItemBounds() <code>Rect</code> Items() <code>String</code> mOwner <code>WeakRef</code> Owner <code>XUIInspectorItem</code> PreferredBottomY <code>Double</code> PreferredTopY <code>Double</code> SelectedIndex <code>Integer</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUIInspectorItem</code>, items() As <code>String</code>, selectedIndex As <code>Integer</code>, anchorX As <code>Double</code>, anchorSide As <code>XUIInspectorItemPopupMenu.Anchors</code>, preferredTopY As <code>Double</code>, preferredBottomY As <code>Double</code> Render g As <code>Graphics</code>, style As <code>XUIInspectorStyle</code>, yScrollOffset As <code>Double</code> RenderIndicator g As <code>Graphics</code>, x As <code>Double</code>, y As <code>Double</code>, selected As <code>Boolean</code>, style As <code>XUIInspectorStyle</code> RequiredHeight g As <code>Graphics</code>, style As <code>XUIInspectorStyle</code> <code>Double</code> RequiredWidth g As <code>Graphics</code>, style As <code>XUIInspectorStyle</code> <code>Double</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/#constants","title":"Constants","text":"Name Type HPADDING <code>Double</code> INDICATOR_ITEM_PADDING <code>Double</code> INDICATOR_SIZE <code>Double</code> ITEM_VPADDING <code>Double</code> <p>HPADDING As Double The number of pixels to pad the items laterally.</p> <p>INDICATOR_ITEM_PADDING As Double The number of pixels between the right edge of the indicator and the left edge of an item.</p> <p>INDICATOR_SIZE As Double The size of the indicator.</p> <p>ITEM_VPADDING As Double The number of pixels to pad above and below each item in the popup menu.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/#enumerations","title":"Enumerations","text":"<p>Anchors</p> <p>Which side of the popup menu is anchored.</p> Name Left Right"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/#property-descriptions","title":"Property Descriptions","text":"<p>Anchor As XUIInspectorItemPopupMenu.Anchors</p> <p>Which side of the popup menu is anchored.</p> <p>AnchorX As Double</p> <p>The desired x coordinate of the anchored edge of the popup menu. The inspector will determine its vertical position.</p> <p>Bounds As Rect</p> <p>The bounds of this popup menu.</p> <p>ItemBounds() As Rect</p> <p>The bounds of each item in the popup menu.</p> <p>Items() As String</p> <p>The items in the popup menu.</p> <p>mOwner As WeakRef</p> <p>A weak reference to this popup menu's owning item.</p> <p>Owner As XUIInspectorItem</p> <p>A weak reference to this popup menu's owning item.</p> <p>PreferredBottomY As Double</p> <p>If there is insufficient space to use <code>preferredTopY</code> then the inspector will try to draw the popup menu with its bottom edge at <code>preferredBottomY</code>.</p> <p>PreferredTopY As Double</p> <p>The preferred y coordinate of the top of the popup menu. If there is enought space, the inspector will draw the top of the popup menu here.</p> <p>SelectedIndex As Integer</p> <p>The 0-based index of the currently selected item.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorItemPopupMenu/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUIInspectorItem, items() As String, selectedIndex As Integer, anchorX As Double, anchorSide As XUIInspectorItemPopupMenu.Anchors, preferredTopY As Double, preferredBottomY As Double)</p> <p>Constructs a new popup menu containing <code>items</code> with <code>selectedIndex</code> selected. <code>anchorX</code> specifies where the popup should be anchored horizontally and <code>anchorSide</code> specifies whether the anchor applies to the left or right side of the popup menu. The inspector ultimately decides where the popup is placed but you can indicate a preferred top and bottom <code>Y</code> coordinate.</p> <p>Render(g As Graphics, style As XUIInspectorStyle, yScrollOffset As Double)</p> <p>Renders is popup menu to <code>g</code>. Preserves the state of <code>g</code>.</p> <p>yScrollOffset will offset the drawing in the vertical direction.</p> <p>RenderIndicator(g As Graphics, x As Double, y As Double, selected As Boolean, style As XUIInspectorStyle)</p> <p>Renders the indicator icon to <code>g</code>. Preserves the state of <code>g</code></p> <p>RequiredHeight(g As Graphics, style As XUIInspectorStyle) As Double</p> <p>Returns the height required to draw this popup menu. Expensive operation.</p> <p>RequiredWidth(g As Graphics, style As XUIInspectorStyle) As Double</p> <p>Returns the width required to draw this popup menu. Expensive operation.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseDownData/","title":"XUIInspectorMouseDownData","text":""},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseDownData/#description","title":"Description","text":"<p>Represents data passed between an inspector item and the inspector after a <code>MouseDown</code> event.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseDownData/#properties","title":"Properties","text":"Name Type Read-Only PopupMenu <code>XUIInspectorItemPopupMenu</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseDownData/#methods","title":"Methods","text":"Name Parameters Returns Constructor popupMenu As <code>XUIInspectorItemPopupMenu</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseDownData/#property-descriptions","title":"Property Descriptions","text":"<p>PopupMenu As XUIInspectorItemPopupMenu</p> <p>The popup menu created as a result of the mouse down event. Will be Nil if no popup was created.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseDownData/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(popupMenu As XUIInspectorItemPopupMenu)</p> <p>Constructs a new <code>MouseDownData</code> instance with an optional popup menu.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseMoveData/","title":"XUIInspectorMouseMoveData","text":""},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseMoveData/#description","title":"Description","text":"<p>Represents data passed between an inspector item and the inspector after a <code>MouseMove</code> event.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseMoveData/#properties","title":"Properties","text":"Name Type Read-Only mOwner <code>WeakRef</code> Owner <code>XUIInspectorItem</code> VisualChange <code>Boolean</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseMoveData/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUIInspectorItem</code>, visualChange As <code>Boolean</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseMoveData/#property-descriptions","title":"Property Descriptions","text":"<p>mOwner As WeakRef</p> <p>A weak reference to the item affected by this mouse move.</p> <p>Owner As XUIInspectorItem</p> <p>A weak reference to the item affected by this mouse move.</p> <p>VisualChange As Boolean</p> <p>If True then a visual change occurred in the section or item the mouse moved over.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseMoveData/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUIInspectorItem, visualChange As Boolean)</p> <p>Constructs a new <code>MouseMoveData</code> instance owned by <code>owner</code> and specifying if a visual change occurred or not.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseUpData/","title":"XUIInspectorMouseUpData","text":""},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseUpData/#description","title":"Description","text":"<p>Represents data passed between an inspector item and the inspector after a <code>MouseUp</code> event.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseUpData/#properties","title":"Properties","text":"Name Type Read-Only PopupMenu <code>XUIInspectorItemPopupMenu</code> VisualChange <code>Boolean</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseUpData/#methods","title":"Methods","text":"Name Parameters Returns Constructor visualChange As <code>Boolean</code> Constructor visualChange As <code>Boolean</code>, popupMenu As <code>XUIInspectorItemPopupMenu</code>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseUpData/#property-descriptions","title":"Property Descriptions","text":"<p>PopupMenu As XUIInspectorItemPopupMenu</p> <p>The popup menu created as a result of the mouse up event. Will be Nil if no popup was created.</p> <p>VisualChange As Boolean</p> <p>If True then a visual change occurred in the section or item clicked.</p>"},{"location":"XUI/XUIInspector/Inspector%20Misc/XUIInspectorMouseUpData/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(visualChange As Boolean)</p> <p>Constructs a new MouseUpData instance specifying whether a visual change has occured.</p> <p>Constructor(visualChange As Boolean, popupMenu As XUIInspectorItemPopupMenu)</p> <p>Constructs a new MouseUpData instance specifying whether a visual change has occured and with a popup menu.</p>"},{"location":"XUI/XUISourceList/XUISourceList/","title":"XUISourceList","text":""},{"location":"XUI/XUISourceList/XUISourceList/#description","title":"Description","text":"<p>A powerful control that is frequently used as a navigator control. It can replicate the sidebar functionality seen in macOS Finder and the Windows File Explorer or even the Xojo IDE navigator.</p>"},{"location":"XUI/XUISourceList/XUISourceList/#properties","title":"Properties","text":"Name Type Read-Only AllowMultipleSelection <code>Boolean</code> Hierarchical <code>Boolean</code> mIsDraggingRow <code>Boolean</code> mLastMouseDownRow <code>Integer</code> mLastMouseDownX <code>Integer</code> mLastMouseDownY <code>Integer</code> mLastMouseDragRow <code>Integer</code> mLastMouseDragX <code>Integer</code> mLastMouseDragY <code>Integer</code> mMouseMoveRow <code>Integer</code> mRenderer <code>XUISourceListRenderer</code> mSections() <code>XUISourceListItem</code> mSelectedItems() <code>XUISourceListItem</code> mStyle <code>XUISourceListStyle</code> Renderer <code>XUISourceListRenderer</code> Style <code>XUISourceListStyle</code>"},{"location":"XUI/XUISourceList/XUISourceList/#methods","title":"Methods","text":"Name Parameters Returns AddSection section As <code>XUISourceListItem</code> AddToSourceList item As <code>XUISourceListItem</code> ExpandRow row As <code>Integer</code> HandleContiguousRowClick item As <code>XUISourceListItem</code>, x As <code>Integer</code>, y As <code>Integer</code> HandleDiscontiguousRowClick item As <code>XUISourceListItem</code>, x As <code>Integer</code>, y As <code>Integer</code> IsDraggingOverRow row As <code>Integer</code> <code>Boolean</code> ItemAtRowIndex index As <code>Integer</code> <code>XUISourceListItem</code> ItemAtRowIndex_ parent As <code>XUISourceListItem</code>, current As <code>Integer</code>, target As <code>Integer</code>, result As <code>XUISourceListItem</code> MoveItem item As <code>XUISourceListItem</code>, newParent As <code>XUISourceListItem</code>, index As <code>Integer</code> Rebuild RemoveAllSections ResetMouseProperties RowForItem item As <code>XUISourceListItem</code> <code>Integer</code> SectionAtIndex index As <code>Integer</code> <code>XUISourceListItem</code> SectionWithName sectionTitle As <code>String</code>, caseSensitive As <code>Boolean</code> <code>XUISourceListItem</code> SelectItemAtRow row As <code>Integer</code> <code>XUISourceListItem</code> StoppedDragging"},{"location":"XUI/XUISourceList/XUISourceList/#events","title":"Events","text":"Name Parameters Returns ClickedItemWidget item As <code>XUISourceListItem</code> CollapsedItem item As <code>XUISourceListItem</code> ExpandedItem item As <code>XUISourceListItem</code> ItemSelected item As <code>XUISourceListItem</code>, x As <code>Integer</code>, y As <code>Integer</code> ItemUnselected item As <code>XUISourceListItem</code>, x As <code>Integer</code>, y As <code>Integer</code> MouseDidMove x As <code>Integer</code>, y As <code>Integer</code> MovedItem item As <code>XUISourceListItem</code>, oldParent As <code>XUISourceListItem</code>, newParent As <code>XUISourceListItem</code> Opening"},{"location":"XUI/XUISourceList/XUISourceList/#constants","title":"Constants","text":"Name Type DROP_OVER_THRESHOLD <code>Double</code> <p>DROP_OVER_THRESHOLD As Double This percentage of the row dropped on that is considered the actual row. Above and below this are considered the row above and the row below. 0.5 = 50%.</p>"},{"location":"XUI/XUISourceList/XUISourceList/#property-descriptions","title":"Property Descriptions","text":"<p>AllowMultipleSelection As Boolean</p> <p>If <code>True</code> then multiple item selection is permitted.</p> <p>Hierarchical As Boolean</p> <p>If False then only sections draw their children. Items do not. This allows for subtle visual differences like seen between the macOS Finder and Mail apps.</p> <p>mIsDraggingRow As Boolean</p> <p>True if the use is actively dragging a row.</p> <p>mLastMouseDownRow As Integer</p> <p>The row under the mouse during the last MouseDown event. May be -1.</p> <p>mLastMouseDownX As Integer</p> <p>The X coordinate in the last MouseDown event.</p> <p>mLastMouseDownY As Integer</p> <p>The Y coordinate in the last MouseDown event.</p> <p>mLastMouseDragRow As Integer</p> <p>The value of <code>mLastMouseDownRow</code> during the last <code>MouseDrag</code> event.</p> <p>mLastMouseDragX As Integer</p> <p>The local X value determined in <code>DragTimer.Action</code>.</p> <p>mLastMouseDragY As Integer</p> <p>The local X value determined in <code>DragTimer.Action</code>.</p> <p>mMouseMoveRow As Integer</p> <p>The row under the mouse cursor. Updated in the <code>MouseMove</code> event. Will be <code>-1</code> if there is no valid row under the mouse.</p> <p>mRenderer As XUISourceListRenderer</p> <p>The renderer to use to draw the rows in the source list.</p> <p>mSections() As XUISourceListItem</p> <p>This source list's sections.</p> <p>mSelectedItems() As XUISourceListItem</p> <p>The currently selected items. May be empty.</p> <p>mStyle As XUISourceListStyle</p> <p>The colour style to use for the source list.</p> <p>Renderer As XUISourceListRenderer</p> <p>The renderer to use to draw the rows in the source list.</p> <p>Style As XUISourceListStyle</p> <p>The colour style to use for the source list.</p>"},{"location":"XUI/XUISourceList/XUISourceList/#method-descriptions","title":"Method Descriptions","text":"<p>AddSection(section As XUISourceListItem)</p> <p>Appends the passed item as a section in the source list. Rebuilds the source list.</p> <p>AddToSourceList(item As XUISourceListItem)</p> <p>Internal method for physically adding an item to the source list.</p> <p>ExpandRow(row As Integer)</p> <p>Internal methods. Actually expands <code>row</code> in the listbox. Called by <code>Rebuild()</code> and <code>AddToSourceList()</code>.</p> <p>HandleContiguousRowClick(item As XUISourceListItem, x As Integer, y As Integer)</p> <p>The user has clicked <code>item</code> in the source list whilst holding down the shift key.</p> <p>HandleDiscontiguousRowClick(item As XUISourceListItem, x As Integer, y As Integer)</p> <p>The user has clicked <code>item</code> in the source list whilst holding down Cmd (macOS) or CTRL (Windows / Linux).</p> <p>IsDraggingOverRow(row As Integer) As Boolean</p> <p>Returns True if the user is currently dragging over the item at <code>row</code>.</p> <p>ItemAtRowIndex(index As Integer) As XUISourceListItem</p> <p>Returns the item at the 0-based row <code>index</code>. Only visible rows are counted. Row <code>0</code> is the first visible row. May return Nil.</p> <p>ItemAtRowIndex_(parent As XUISourceListItem, current As Integer, target As Integer, result As XUISourceListItem)</p> <p>Internal recursive method.</p> <p>MoveItem(item As XUISourceListItem, newParent As XUISourceListItem, index As Integer)</p> <p>Moves <code>item</code> to be a child of <code>newParent</code>. By default appends it as a child but optionally you can stipulate the index in <code>newParent</code> to move it to. Does not rebuild the tree.</p> <p>Rebuild()</p> <p>Rebuilds the source list.</p> <p>RemoveAllSections()</p> <p>Removes every section in the source list. Rebuilds the source list.</p> <p>ResetMouseProperties()</p> <p>Resets the private properties tracking mouse actions.</p> <p>RowForItem(item As XUISourceListItem) As Integer</p> <p>Returns the 0-based row that <code>item</code> appears on. Only visible items are included. Row <code>0</code> is the first visible row. Returns <code>-1</code> if not found.</p> <p>SectionAtIndex(index As Integer) As XUISourceListItem</p> <p>Returns the section at 0-based <code>index</code>. Raises an <code>InvalidArgumentException</code> if index is invalid. The index is the seciton index, not the row index.</p> <p>SectionWithName(sectionTitle As String, caseSensitive As Boolean) As XUISourceListItem</p> <p>Returns the first matching section whose title is <code>sectionTitle</code>. Returns Nil if not found.</p> <p>SelectItemAtRow(row As Integer) As XUISourceListItem</p> <p>Selects the item at row (0 based). Returns the item selected or Nil if none was selected. Does not raise the <code>ItemSelected()</code> event.</p> <p>StoppedDragging()</p> <p>Stops DragTimer and marks that we are no longer dragging.</p>"},{"location":"XUI/XUISourceList/XUISourceList/#event-descriptions","title":"Event Descriptions","text":"<p>ClickedItemWidget(item As XUISourceListItem) The user has clicked on an item's widget.</p> <p>CollapsedItem(item As XUISourceListItem) The user has collapsed an item by clicking on the disclosure widget.</p> <p>ExpandedItem(item As XUISourceListItem) The user has expanded an item by clicking on the disclosure widget.</p> <p>ItemSelected(item As XUISourceListItem, x As Integer, y As Integer) An item in the source list was selected. If clicked, X and Y are the mouse coordinates of the click local to the row the item is on. These will be <code>-1</code> if the selection was programatic.</p> <p>ItemUnselected(item As XUISourceListItem, x As Integer, y As Integer) An item in the source list was unselected. If clicked, X and Y are the mouse coordinates of the click local to the row the item is on. These will be <code>-1</code> if the selection was programatic.</p> <p>MouseDidMove(x As Integer, y As Integer) The mouse has moved within the source list. X and Y are local to the source list control.</p> <p>MovedItem(item As XUISourceListItem, oldParent As XUISourceListItem, newParent As XUISourceListItem) Called when <code>item</code> has been moved from <code>oldParent</code> to <code>newParent</code>. Occurs when there has been a drag reordering.</p> <p>Opening() The source list control is opening.</p>"},{"location":"XUI/XUISourceList/XUISourceListItem/","title":"XUISourceListItem","text":""},{"location":"XUI/XUISourceList/XUISourceListItem/#description","title":"Description","text":"<p>Represents an item in a <code>XUISourceList</code>.</p>"},{"location":"XUI/XUISourceList/XUISourceListItem/#properties","title":"Properties","text":"Name Type Read-Only BadgeValue <code>Integer</code> \u2714 CanAcceptChildren <code>Boolean</code> ChildCount <code>Integer</code> \u2714 Data <code>Variant</code> Depth <code>Integer</code> \u2714 DisclosureBounds <code>Rect</code> Expandable <code>Boolean</code> Expanded <code>Boolean</code> HasIcon <code>Boolean</code> \u2714 HasWidget <code>Boolean</code> Icon <code>Picture</code> IsSection <code>Boolean</code> \u2714 mChildren() <code>XUISourceListItem</code> mOwner <code>WeakRef</code> mParent <code>WeakRef</code> Owner <code>XUISourceList</code> Section <code>XUISourceListItem</code> \u2714 ShowBadge <code>Boolean</code> Title <code>String</code> Value <code>Integer</code> WidgetBounds <code>Rect</code> WidgetIcon <code>Picture</code>"},{"location":"XUI/XUISourceList/XUISourceListItem/#methods","title":"Methods","text":"Name Parameters Returns AddChild item As <code>XUISourceListItem</code>, shouldRebuild As <code>Boolean</code> AddChildAt index As <code>Integer</code>, item As <code>XUISourceListItem</code>, shouldRebuild As <code>Boolean</code> ChildAtIndex index As <code>Integer</code> <code>XUISourceListItem</code> Constructor title As <code>String</code>, icon As <code>Picture</code>, value As <code>Integer</code>, data As <code>Variant</code>, canAcceptChildren As <code>Boolean</code> GetParent <code>XUISourceListItem</code> IndexOfChild child As <code>XUISourceListItem</code> <code>Integer</code> RemoveChild child As <code>XUISourceListItem</code>, shouldRebuild As <code>Boolean</code> SetParent parent As <code>XUISourceListItem</code>, shouldRebuild As <code>Boolean</code>"},{"location":"XUI/XUISourceList/XUISourceListItem/#property-descriptions","title":"Property Descriptions","text":"<p>BadgeValue As Integer</p> <p>The sum of this item's Value and all of its children's Value properties.</p> <p>CanAcceptChildren As Boolean</p> <p>If True then this item can accept child rows dropped on it.</p> <p>ChildCount As Integer</p> <p>The number of children this item has.</p> <p>Data As Variant</p> <p>Arbitrary data associated with this item.</p> <p>Depth As Integer</p> <p>How deep in the source list this item is. Sections have a depth of zero.</p> <p>DisclosureBounds As Rect</p> <p>The hit bounds for the item's disclosure widget. Local to the source list control. May be Nil.</p> <p>Expandable As Boolean</p> <p>True if this item is allowed to be expanded. Setting this does not immediately refresh the source list.</p> <p>Expanded As Boolean</p> <p>True if this item is expanded. Setting this will not automatically refresh the source list.</p> <p>HasIcon As Boolean</p> <p>True if this item's icon is not Nil.</p> <p>HasWidget As Boolean</p> <p>If True and a widget icon is set then a widget will be drawn beside the item.</p> <p>Icon As Picture</p> <p>This item's icon. May or may not be visible depending on the renderer used.</p> <p>IsSection As Boolean</p> <p>True if this item is a section (read only).</p> <p>mChildren() As XUISourceListItem</p> <p>This item's children. May be empty.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the owning source list. May be Nil if the item was created programmatically.</p> <p>mParent As WeakRef</p> <p>Weak reference to this item's parent. Will be Nil if this item is a section.</p> <p>Owner As XUISourceList</p> <p>The owning source list. May be Nil if the item was created programmatically.</p> <p>Section As XUISourceListItem</p> <p>This item's section or Nil if the item is a section.</p> <p>ShowBadge As Boolean</p> <p>If True and the item has a cumulative value &gt; 0 then a badge will be shown. Only shown on sections if the section is expanded.</p> <p>Title As String</p> <p>The item's title.</p> <p>Value As Integer</p> <p>Optional integer value associated with this item. Note that <code>BadgeValue</code> is the sum of this item's <code>Value</code> plus the <code>Value</code> of all children.</p> <p>WidgetBounds As Rect</p> <p>The hit bounds for the item's widget. Local to the source list control. May be Nil.</p> <p>WidgetIcon As Picture</p> <p>The icon to use for this item's widget. Depending on the renderer used, this may be ignored. It must not be Nil if the renderer expects a Picture when HasWidget is True.</p>"},{"location":"XUI/XUISourceList/XUISourceListItem/#method-descriptions","title":"Method Descriptions","text":"<p>AddChild(item As XUISourceListItem, shouldRebuild As Boolean)</p> <p>Appends <code>item</code> to the end of this item's children. By default this will not immediately rebuild the source list.</p> <p>AddChildAt(index As Integer, item As XUISourceListItem, shouldRebuild As Boolean)</p> <p>Adds <code>item</code> to the specified 0-based index of this item's children. By default this will not immediately rebuild the source list.</p> <p>ChildAtIndex(index As Integer) As XUISourceListItem</p> <p>Returns the child at the 0-based <code>index</code>. Returns Nil if the index is invalid.</p> <p>Constructor(title As String, icon As Picture, value As Integer, data As Variant, canAcceptChildren As Boolean)</p> <p>Default constructor.</p> <ul> <li><code>title</code> is the visible title of this item. </li> <li><code>icon</code> is an optional icon. </li> <li><code>value</code> is an optional value for this item. It and the sum of all of this item's children will be used for the badge value. </li> <li><code>data</code> is optional arbitrary data for use in your application. </li> <li>If <code>canAcceptChildren</code> is True then this item is permitted to contain children. </li> </ul> <p>GetParent() As XUISourceListItem</p> <p>Gets this item's parent. May be Nil (for example if the item is a section).</p> <p>IndexOfChild(child As XUISourceListItem) As Integer</p> <p>Returns the 0-based index in this item of <code>child</code> in its top level children or -1 if this item does not contain <code>child</code>.</p> <p>RemoveChild(child As XUISourceListItem, shouldRebuild As Boolean)</p> <p>Removes <code>child</code> from this item's top-level children (if present). By default this will trigger a full rebuild of the source list.</p> <p>SetParent(parent As XUISourceListItem, shouldRebuild As Boolean)</p> <p>Sets this item's parent item. By default setting the parent will trigger a full rebuild of the source list.</p>"},{"location":"XUI/XUISourceList/XUISourceListStyle/","title":"XUISourceListStyle","text":""},{"location":"XUI/XUISourceList/XUISourceListStyle/#description","title":"Description","text":"<p><code>XUISourceList</code> is highly customisable. This class contains the various properties that can be  styled in a source list that are honoured by renderers.</p>"},{"location":"XUI/XUISourceList/XUISourceListStyle/#properties","title":"Properties","text":"Name Type Read-Only BackgroundColor <code>ColorGroup</code> BadgeColor <code>ColorGroup</code> BadgeValueColor <code>ColorGroup</code> DisclosureWidgetCollapsedColor <code>ColorGroup</code> DisclosureWidgetExpandedColor <code>ColorGroup</code> DropTargetBackgroundColor <code>ColorGroup</code> DropTargetColor <code>ColorGroup</code> ItemColor <code>ColorGroup</code> Name <code>String</code> SectionColor <code>ColorGroup</code> SectionDisclosureWidgetCollapsedColor <code>ColorGroup</code> SectionDisclosureWidgetExpandedColor <code>ColorGroup</code> SelectedBackgroundColor <code>ColorGroup</code> SelectedColor <code>ColorGroup</code> WidgetColor <code>ColorGroup</code>"},{"location":"XUI/XUISourceList/XUISourceListStyle/#methods","title":"Methods","text":"Name Parameters Returns Monterey <code>XUISourceListStyle</code> Windows11 <code>XUISourceListStyle</code>"},{"location":"XUI/XUISourceList/XUISourceListStyle/#property-descriptions","title":"Property Descriptions","text":"<p>BackgroundColor As ColorGroup</p> <p>The source list background colour.</p> <p>BadgeColor As ColorGroup</p> <p>The badge background color.</p> <p>BadgeValueColor As ColorGroup</p> <p>The colour of the badge's value.</p> <p>DisclosureWidgetCollapsedColor As ColorGroup</p> <p>The colour to use for regular item (not section) disclosure widgets when collapsed.</p> <p>DisclosureWidgetExpandedColor As ColorGroup</p> <p>The colour to use for regular item (not section) disclosure widgets when expanded.</p> <p>DropTargetBackgroundColor As ColorGroup</p> <p>The background colour for items when they are a valid drop target.</p> <p>DropTargetColor As ColorGroup</p> <p>The text colour for items when they are a valid drop target.</p> <p>ItemColor As ColorGroup</p> <p>The color to use for item title text.</p> <p>Name As String</p> <p>This style's name.</p> <p>SectionColor As ColorGroup</p> <p>The colour to use for section titles.</p> <p>SectionDisclosureWidgetCollapsedColor As ColorGroup</p> <p>The colour to use for collapsed section disclosure widgets.</p> <p>SectionDisclosureWidgetExpandedColor As ColorGroup</p> <p>The colour to use for expanded section disclosure widgets.</p> <p>SelectedBackgroundColor As ColorGroup</p> <p>The background colour of selected items.</p> <p>SelectedColor As ColorGroup</p> <p>The text colour of selected items.</p> <p>WidgetColor As ColorGroup</p> <p>The color to use for drawn item widgets. This is optionally used by some renderers.</p>"},{"location":"XUI/XUISourceList/XUISourceListStyle/#method-descriptions","title":"Method Descriptions","text":"<p>Monterey() As XUISourceListStyle This method is shared.</p> <p>Returns a new style with the colours for macOS Monterey's style source lists.</p> <p>Windows11() As XUISourceListStyle This method is shared.</p> <p>Returns a new style with the colours for Windows 11 style source lists.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRenderer/","title":"XUISourceListRenderer","text":""},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRenderer/#description","title":"Description","text":"<p>Source lists often look different on different platforms. Largely this is because there is no standard source list control. To cope with this, <code>XUISourceList</code> outsources its appearance to a Renderer. A renderer is a class that implements this interface.  It exposes methods that are called by <code>XUISourceList</code> to alter its appearance. Several example renderers are included with XUI.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRenderer/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUISourceList</code> Owner <code>XUISourceList</code> RenderBackground g As <code>Graphics</code>, row As <code>Integer</code> RenderItem item As <code>XUISourceListItem</code>, g As <code>Graphics</code>, hoveringOverRow As <code>Boolean</code>, isSelected As <code>Boolean</code>, draggingOverRow As <code>Boolean</code> RowHeight <code>Integer</code>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRenderer/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUISourceList) <code>owner</code> is the <code>XUISourceList</code> that owns this renderer.</p> <p>Owner() As XUISourceList The source list this renderer operates on.</p> <p>RenderBackground(g As Graphics, row As Integer) Draw the background for the specified row. The row may be empty.</p> <p>RenderItem(item As XUISourceListItem, g As Graphics, hoveringOverRow As Boolean, isSelected As Boolean, draggingOverRow As Boolean) Renders <code>item</code> to the passed graphics context. The context is the entire row the item occupies.</p> <p>RowHeight() As Integer The height of a row in the source list.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererMonterey/","title":"XUISourceListRendererMonterey","text":"<p>Implements <code>XUISourceListRenderer</code></p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererMonterey/#description","title":"Description","text":"<p>A source list renderer that renders a <code>XUISourceList</code> similar to that seen in the  macOS Monterey Finder.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererMonterey/#properties","title":"Properties","text":"Name Type Read-Only mOwner <code>WeakRef</code>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererMonterey/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUISourceList</code> DrawBadge g As <code>Graphics</code>, badgeValue As <code>Integer</code>, x As <code>Double</code>, y As <code>Double</code>, w As <code>Double</code>, h As <code>Double</code> IndentWidth <code>Integer</code> Owner <code>XUISourceList</code> RenderBackground g As <code>Graphics</code>, row As <code>Integer</code> RenderItem item As <code>XUISourceListItem</code>, g As <code>Graphics</code>, hoveringOverRow As <code>Boolean</code>, isSelected As <code>Boolean</code>, draggingOverRow As <code>Boolean</code> RenderSection section As <code>XUISourceListItem</code>, g As <code>Graphics</code>, hoveringOverRow As <code>Boolean</code> RowHeight <code>Integer</code>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererMonterey/#constants","title":"Constants","text":"Name Type BADGE_HORIZ_PADDING <code>Double</code> BADGE_LEFT_PADDING <code>Double</code> BADGE_MIN_WIDTH <code>Double</code> BADGE_VERT_PADDING <code>Double</code> CONTENT_HORIZ_PADDING <code>Double</code> CONTENT_VERT_PADDING <code>Double</code> DISCLOSURE_LEFT_PADDING <code>Double</code> DISCLOSURE_MAX_WIDTH <code>Double</code> DISCLOSURE_OFFSET_FROM_BOTTOM <code>Double</code> DOWN_DISCLOSURE_HEIGHT <code>Double</code> DOWN_DISCLOSURE_OFFSET_FROM_BOTTOM <code>Double</code> DOWN_DISCLOSURE_WIDTH <code>Double</code> ICON_LEFT_PADDING <code>Double</code> INDENT_WIDTH_HIERARCHICAL <code>Double</code> INDENT_WIDTH_NON_HIERARCHICAL <code>Double</code> RIGHT_DISCLOSURE_HALF_HEIGHT <code>Double</code> RIGHT_DISCLOSURE_HEIGHT <code>Double</code> RIGHT_DISCLOSURE_WIDTH <code>Double</code> SECTION_BADGE_OFFSET_FROM_BOTTOM <code>Double</code> SECTION_LEFT_PADDING <code>Double</code> SECTION_WIDGET_DIAMETER <code>Double</code> SECTION_WIDGET_LEFT_PADDING <code>Double</code> SECTION_WIDGET_OFFSET_FROM_BOTTOM <code>Double</code> SECTION_WIDGET_PLUS_HEIGHT <code>Double</code> SECTION_WIDGET_PLUS_WIDTH <code>Double</code> SECTION_WIDGET_RADIUS <code>Double</code> TITLE_LEFT_PADDING <code>Double</code> <p>BADGE_HORIZ_PADDING As Double The number of pixels to pad the the badge value internally left and right from the surrounding rounded rect.</p> <p>BADGE_LEFT_PADDING As Double The number of pixels to pad the left edge of the badge.</p> <p>BADGE_MIN_WIDTH As Double The mimimum width of a badge.</p> <p>BADGE_VERT_PADDING As Double The number of pixels to pad the the badge value internally above and below from the surrounding rounded rect.</p> <p>CONTENT_HORIZ_PADDING As Double The number of pixels to pad the content of a row from its left and right edges. </p> <p>CONTENT_VERT_PADDING As Double The number of pixels to pad the content of a row above and below.</p> <p>DISCLOSURE_LEFT_PADDING As Double The number of pixels to pad the left edge of the disclosure widget.</p> <p>DISCLOSURE_MAX_WIDTH As Double The maximum width the disclosure widget is.</p> <p>DISCLOSURE_OFFSET_FROM_BOTTOM As Double The number of pixels the bottom of the disclosure widget is offset from the bottom edge of the row.</p> <p>DOWN_DISCLOSURE_HEIGHT As Double The height in pixels of the downwards facing disclosure widget.</p> <p>DOWN_DISCLOSURE_OFFSET_FROM_BOTTOM As Double The number of pixels the bottom of the down disclosure widget is offset from the bottom edge of the row.</p> <p>DOWN_DISCLOSURE_WIDTH As Double The width in pixels of the downwards facing disclosure widget.</p> <p>ICON_LEFT_PADDING As Double The number of pixels to pad the left side of an item's icon from a disclosure widget.</p> <p>INDENT_WIDTH_HIERARCHICAL As Double The number of pixels of indentation each level of depth adds to the X offset.</p> <p>INDENT_WIDTH_NON_HIERARCHICAL As Double The number of pixels of indentation each level of depth adds to the X offset.</p> <p>RIGHT_DISCLOSURE_HALF_HEIGHT As Double The half height in pixels of the rightwards facing disclosure widget.</p> <p>RIGHT_DISCLOSURE_HEIGHT As Double The height in pixels of the rightwards facing disclosure widget.</p> <p>RIGHT_DISCLOSURE_WIDTH As Double The width in pixels of the rightwards facing disclosure widget.</p> <p>SECTION_BADGE_OFFSET_FROM_BOTTOM As Double The number of pixels to offset the bottom badges from the bottom edge of section rows.</p> <p>SECTION_LEFT_PADDING As Double The number of pixels to pad the left of the section title in from the content area.</p> <p>SECTION_WIDGET_DIAMETER As Double The diameter of the section widget circle.</p> <p>SECTION_WIDGET_LEFT_PADDING As Double The number of pixels to pad the left edge of the badge.</p> <p>SECTION_WIDGET_OFFSET_FROM_BOTTOM As Double The number of pixels the bottom of the section widget is offset from the bottom edge of the row.</p> <p>SECTION_WIDGET_PLUS_HEIGHT As Double The height of the plus icon in the section widget.</p> <p>SECTION_WIDGET_PLUS_WIDTH As Double The width of the plus icon in the section widget.</p> <p>SECTION_WIDGET_RADIUS As Double The raidus of the section widget circle.</p> <p>TITLE_LEFT_PADDING As Double The number of pixels to pad the left side of an item's title from its icon.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererMonterey/#property-descriptions","title":"Property Descriptions","text":"<p>mOwner As WeakRef</p> <p>A weak reference to the source list that this renderer operates on.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererMonterey/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUISourceList)</p> <p><code>owner</code> is the <code>XUISourceList</code> that owns this renderer. A <code>WeakRef</code> will be created.</p> <p>DrawBadge(g As Graphics, badgeValue As Integer, x As Double, y As Double, w As Double, h As Double)</p> <p>Draws a badge at <code>x</code>, <code>y</code> of width <code>w</code> and height <code>h</code>.</p> <p>Assumes the font name and size have been previously set.</p> <p>IndentWidth() As Integer</p> <p>Returns the indent width to use. Depends on whether or not the source list is hierarchical.</p> <p>Owner() As XUISourceList</p> <p>The source list that this renderer operates on.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p> <p>RenderBackground(g As Graphics, row As Integer)</p> <p>Draw the background for the specified row. The row may be empty.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p> <p>RenderItem(item As XUISourceListItem, g As Graphics, hoveringOverRow As Boolean, isSelected As Boolean, draggingOverRow As Boolean)</p> <p>Renders <code>item</code> to the passed graphics context. The context is the entire row the item occupies.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p> <p>RenderSection(section As XUISourceListItem, g As Graphics, hoveringOverRow As Boolean)</p> <p>Renders <code>section</code> as a section to the passed graphics context.</p> <p>Assumes <code>g</code> is the graphics context provided by the <code>PaintCellBackground</code> event.</p> <p>When hovered over the presentation is:</p> <p><code>TITLE BADGE WIDGET DISCLOSURE</code></p> <p>When not hovered over the presentation is:</p> <p><code>TITLE BADGE</code></p> <p>RowHeight() As Integer</p> <p>The height of a row in the source list.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererWindows11/","title":"XUISourceListRendererWindows11","text":"<p>Implements <code>XUISourceListRenderer</code></p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererWindows11/#description","title":"Description","text":"<p>A source list renderer that renders a <code>XUISourceList</code> similar to that seen in the  Windows 11 File Explorer application.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererWindows11/#properties","title":"Properties","text":"Name Type Read-Only mOwner <code>WeakRef</code>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererWindows11/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUISourceList</code> IndentWidth <code>Integer</code> Owner <code>XUISourceList</code> RenderBackground g As <code>Graphics</code>, row As <code>Integer</code> RenderItem item As <code>XUISourceListItem</code>, g As <code>Graphics</code>, hoveringOverRow As <code>Boolean</code>, isSelected As <code>Boolean</code>, draggingOverRow As <code>Boolean</code> RowHeight <code>Integer</code>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererWindows11/#constants","title":"Constants","text":"Name Type BADGE_LEFT_PADDING <code>Double</code> CONTENT_HORIZ_PADDING <code>Double</code> CONTENT_VERT_PADDING <code>Double</code> DISCLOSURE_LEFT_PADDING <code>Double</code> DISCLOSURE_MAX_WIDTH <code>Double</code> ICON_LEFT_PADDING <code>Double</code> INDENT_WIDTH_HIERARCHICAL <code>Double</code> INDENT_WIDTH_NON_HIERARCHICAL <code>Double</code> SELECTION_HORIZ_PADDING <code>Double</code> TITLE_LEFT_PADDING <code>Double</code> <p>BADGE_LEFT_PADDING As Double The number of pixels to pad the left edge of the badge.</p> <p>CONTENT_HORIZ_PADDING As Double The number of pixels to pad the content of a row from its left and right edges. </p> <p>CONTENT_VERT_PADDING As Double The number of pixels to pad the content of a row above and below.</p> <p>DISCLOSURE_LEFT_PADDING As Double The number of pixels to pad the left edge of the disclosure widget.</p> <p>DISCLOSURE_MAX_WIDTH As Double The maximum width the disclosure widget is.</p> <p>ICON_LEFT_PADDING As Double The number of pixels to pad the left side of an item's icon from a disclosure widget.</p> <p>INDENT_WIDTH_HIERARCHICAL As Double The number of pixels of indentation each level of depth adds to the X offset.</p> <p>INDENT_WIDTH_NON_HIERARCHICAL As Double The number of pixels of indentation each level of depth adds to the X offset.</p> <p>SELECTION_HORIZ_PADDING As Double The number of pixels to pad the selection background from its left and right edges.</p> <p>TITLE_LEFT_PADDING As Double The number of pixels to pad the left side of an item's title from its icon.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererWindows11/#property-descriptions","title":"Property Descriptions","text":"<p>mOwner As WeakRef</p> <p>A weak reference to the source list that this renderer operates on.</p>"},{"location":"XUI/XUISourceList/SourceList%20Renderers/XUISourceListRendererWindows11/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUISourceList)</p> <p><code>owner</code> is the <code>XUISourceList</code> that owns this renderer. A <code>WeakRef</code> will be created.</p> <p>IndentWidth() As Integer</p> <p>Returns the indent width to use. Depends on whether or not the source list is hierarchical.</p> <p>Owner() As XUISourceList</p> <p>The source list that this renderer operates on.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p> <p>RenderBackground(g As Graphics, row As Integer)</p> <p>Draw the background for the specified row. The row may be empty.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p> <p>RenderItem(item As XUISourceListItem, g As Graphics, hoveringOverRow As Boolean, isSelected As Boolean, draggingOverRow As Boolean)</p> <p>Renders <code>item</code> to the passed graphics context. The context is the entire row the item occupies.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p> <p>RowHeight() As Integer</p> <p>The height of a row in the source list.</p> <p>Part of the <code>XUISourceListRenderer</code> interface.</p>"},{"location":"XUI/XUITabBar/XUITabBar/","title":"XUITabBar","text":"<p>Inherits <code>DesktopCanvas</code></p>"},{"location":"XUI/XUITabBar/XUITabBar/#description","title":"Description","text":"<p><code>XUITabBar</code> is a beautiful, flexible and powerful UI control. It provides an easy-to-use  implementation of a source list. Source lists are a familiar UI control typically used as a  navigation sidebar in applications. Examples are the sidebar in the Finder on macOS and the  navigator in the Xojo IDE.</p> <p><code>XUITabBar</code> abstracts away a lot of the complexity of managing a navigation sidebar so you don't have to worry about it.</p> <p>The control supports drag reordering, unlimited item depths, badge counts, custom widgets and  more.</p>"},{"location":"XUI/XUITabBar/XUITabBar/#properties","title":"Properties","text":"Name Type Read-Only AllowDragReordering <code>Boolean</code> AvailableTabSpace <code>Double</code> \u2714 DraggingTabLeftEdgeXOffset <code>Integer</code> \u2714 FirstTabIsFixed <code>Boolean</code> HasLeftBorder <code>Boolean</code> HasLeftMenuButton <code>Boolean</code> HasRightBorder <code>Boolean</code> HasRightMenuButton <code>Boolean</code> IsDraggingTab <code>Boolean</code> \u2714 LeftMenuButtonBounds <code>Rect</code> LeftMenuButtonIcon <code>Picture</code> mDraggingTabLeftEdgeXOffset <code>Integer</code> mDragIndex <code>Integer</code> mHasLeftMenuButton <code>Boolean</code> mHasRightMenuButton <code>Boolean</code> mIsDraggingTab <code>Boolean</code> mLastClickWasContextual <code>Boolean</code> mLeftMenuButtonIcon <code>Picture</code> mMouseDownIndex <code>Integer</code> mMouseDownTicks <code>Double</code> mMouseDownX <code>Integer</code> mMouseDownY <code>Integer</code> mMouseDragX <code>Integer</code> mMouseDragY <code>Integer</code> mMouseMoveX <code>Integer</code> mMouseMoveY <code>Integer</code> mMouseOverIndex <code>Integer</code> mMouseOverLeftMenuButton <code>Boolean</code> mMouseOverRightMenuButton <code>Boolean</code> mNeedsFullRedraw <code>Boolean</code> MouseDragX <code>Integer</code> \u2714 MouseDragY <code>Integer</code> \u2714 MouseMoveX <code>Integer</code> \u2714 MouseMoveY <code>Integer</code> \u2714 mPaintLeft <code>Integer</code> mPaintTop <code>Integer</code> mPaintWidth <code>Integer</code> mRenderer <code>XUITabBarRenderer</code> mRightMenuButtonIcon <code>Picture</code> mScaleX <code>Double</code> mScrollPosX <code>Integer</code> mSelectedTabIndex <code>Integer</code> mStyle <code>XUITabBarStyle</code> mTabs() <code>XUITabBarItem</code> Renderer <code>XUITabBarRenderer</code> RightMenuButtonBounds <code>Rect</code> RightMenuButtonIcon <code>Picture</code> ScrollPosX <code>Integer</code> SelectedTab <code>XUITabBarItem</code> \u2714 SelectedTabIndex <code>Integer</code> \u2714 Style <code>XUITabBarStyle</code> TabCount <code>Integer</code> \u2714"},{"location":"XUI/XUITabBar/XUITabBar/#methods","title":"Methods","text":"Name Parameters Returns AddTabAt index As <code>Integer</code>, caption As <code>String</code>, icon As <code>Picture</code>, tag As <code>Variant</code>, closable As <code>Boolean</code>, enabled As <code>Boolean</code> AppendTab caption As <code>String</code>, icon As <code>Picture</code>, tag As <code>Variant</code>, closable As <code>Boolean</code>, enabled As <code>Boolean</code> Constructor OverCloseIconAtIndex index As <code>Integer</code> <code>Boolean</code> OverLeftMenuButton x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> OverRightMenuButton x As <code>Integer</code>, y As <code>Integer</code> <code>Boolean</code> PageLeft PageRight PopTab <code>XUITabBarItem</code> RemoveAll RemoveTabAt index As <code>Integer</code> ReplaceTabAt index As <code>Integer</code>, newTab As <code>XUITabBarItem</code> SelectTabAtIndex index As <code>Integer</code> SwapTabs index1 As <code>Integer</code>, index2 As <code>Integer</code>, shouldRedraw As <code>Boolean</code> TabIndexAtXY x As <code>Integer</code>, y As <code>Integer</code>, excludeSelected As <code>Boolean</code> <code>Integer</code> Tabs <code>XUITabBarItem()</code> ValidTabIndex index As <code>Integer</code> <code>Boolean</code>"},{"location":"XUI/XUITabBar/XUITabBar/#events","title":"Events","text":"Name Parameters Returns DidAddTab tab As <code>XUITabBarItem</code>, index As <code>Integer</code> DidContextualClickLeftMenuButton x As <code>Integer</code>, y As <code>Integer</code> DidContextualClickRightMenuButton x As <code>Integer</code>, y As <code>Integer</code> DidContextualClickTab tab As <code>XUITabBarItem</code>, x As <code>Integer</code>, y As <code>Integer</code> DidFinishDragging tab As <code>XUITabBarItem</code>, index As <code>Integer</code> DidRemoveTab tab As <code>XUITabBarItem</code> DidSelectTab tab As <code>XUITabBarItem</code>, index As <code>Integer</code> DidStartDragging tab As <code>XUITabBarItem</code>, index As <code>Integer</code> MouseExit MouseMove x As <code>Integer</code>, y As <code>Integer</code> MouseWheel x As <code>Integer</code>, y As <code>Integer</code>, deltaX As <code>Integer</code>, deltaY As <code>Integer</code> PressedLeftMenuButton PressedRightMenuButton"},{"location":"XUI/XUITabBar/XUITabBar/#constants","title":"Constants","text":"Name Type DRAG_SCROLL_THRESHOLD <code>Double</code> DRAG_THRESHOLD_DISTANCE <code>Double</code> DRAG_THRESHOLD_TICKS <code>Double</code> <p>DRAG_SCROLL_THRESHOLD As Double The number of pixels from the edge when dragging that the mouse needs to be within to scroll the tab bar.</p> <p>DRAG_THRESHOLD_DISTANCE As Double The number of pixels difference between the current mouse position and the last to trigger a drag operation.</p> <p>DRAG_THRESHOLD_TICKS As Double The number of ticks that must have elapsed between the last drag operation to trigger another drag.</p>"},{"location":"XUI/XUITabBar/XUITabBar/#property-descriptions","title":"Property Descriptions","text":"<p>AllowDragReordering As Boolean</p> <p>True if tabs can be reordered by dragging with the mouse.</p> <p>AvailableTabSpace As Double</p> <p>The width available to render tabs, factoring in the presence or absence of the optional menu buttons.</p> <p>DraggingTabLeftEdgeXOffset As Integer</p> <p>The offset from the left edge of the tab that's being dragged.</p> <p>FirstTabIsFixed As Boolean</p> <p>If True then the first tab (index 0) is fixed and cannot be dragged to a new position.</p> <p>HasLeftBorder As Boolean</p> <p>True if the tab bar should draw a left border on the left-most tab.</p> <p>HasLeftMenuButton As Boolean</p> <p>If True and the (renderer suports it) then a menu button will be drawn to the left of the tab bar.</p> <p>HasRightBorder As Boolean</p> <p>True if the tab bar should draw a right border on the right-most tab.</p> <p>HasRightMenuButton As Boolean</p> <p>If True and the (renderer suports it) then a menu button will be drawn to the right of the tab bar.</p> <p>IsDraggingTab As Boolean</p> <p>True if a tab is currently being dragged.</p> <p>LeftMenuButtonBounds As Rect</p> <p>The bounds of the left menu button (if enabled). Set by the renderer. May be Nil.</p> <p>LeftMenuButtonIcon As Picture</p> <p>If the left menu button is enabled, this is the icon to use.</p> <p>mDraggingTabLeftEdgeXOffset As Integer</p> <p>The offset from the left edge of the tab that's being dragged.</p> <p>mDragIndex As Integer</p> <p>When dragging a tab, this is the index being dragged to.</p> <p>mHasLeftMenuButton As Boolean</p> <p>If True and the (renderer suports it) then a menu button will be drawn to the left of the tab bar.</p> <p>mHasRightMenuButton As Boolean</p> <p>If True and the (renderer suports it) then a menu button will be drawn to the right of the tab bar.</p> <p>mIsDraggingTab As Boolean</p> <p>True if a tab is currently being dragged.</p> <p>mLastClickWasContextual As Boolean</p> <p>True if the mouse click that just occurred in the <code>MouseDown</code> event was a contextual click.</p> <p>mLeftMenuButtonIcon As Picture</p> <p>If the left menu button is enabled, this is the icon to use.</p> <p>mMouseDownIndex As Integer</p> <p>The index of the tab under the mouse during the last <code>MouseDown</code> event. <code>-1</code> if there wasn't one.</p> <p>mMouseDownTicks As Double</p> <p>The ticks when the last MouseDown event occurred.</p> <p>mMouseDownX As Integer</p> <p>The <code>X</code> coordinate of the last <code>MouseDown</code> event.</p> <p>mMouseDownY As Integer</p> <p>The <code>Y</code> coordinate of the last <code>MouseDown</code> event.</p> <p>mMouseDragX As Integer</p> <p>The <code>X</code> coordinate in the last <code>MouseDrag</code> event.</p> <p>mMouseDragY As Integer</p> <p>The <code>Y</code> coordinate in the last <code>MouseDrag</code> event.</p> <p>mMouseMoveX As Integer</p> <p>The X value during the last <code>MouseMove</code> event. Set to -1 if the mouse leaves the tab bar.</p> <p>mMouseMoveY As Integer</p> <p>The Y value during the last <code>MouseMove</code> event. Set to -1 if the mouse leaves the tab bar.</p> <p>mMouseOverIndex As Integer</p> <p>The index of the tab that the mouse is currently over or <code>-1</code> if not over one.</p> <p>mMouseOverLeftMenuButton As Boolean</p> <p>Cached computation of<code>OverLeftMenuButton</code> computed in <code>MouseMove()</code>.</p> <p>mMouseOverRightMenuButton As Boolean</p> <p>Cached computation of<code>OverRightMenuButton</code> computed in <code>MouseMove()</code>.</p> <p>mNeedsFullRedraw As Boolean</p> <p>True if the tab bar needs a full redraw during its next <code>Paint()</code> event.</p> <p>MouseDragX As Integer</p> <p>The <code>X</code> coordinate in the last <code>MouseDrag</code> event. Read only.</p> <p>MouseDragY As Integer</p> <p>The <code>Y</code> coordinate in the last <code>MouseDrag</code> event. Read only.</p> <p>MouseMoveX As Integer</p> <p>The X value during the last <code>MouseMove</code> event. Set to -1 if the mouse leaves the tab bar.</p> <p>MouseMoveY As Integer</p> <p>The Y value during the last <code>MouseMove</code> event. Set to -1 if the mouse leaves the tab bar.</p> <p>mPaintLeft As Integer</p> <p>The left of the control during the last <code>Paint</code> event.</p> <p>mPaintTop As Integer</p> <p>The top of the control during the last <code>Paint</code> event.</p> <p>mPaintWidth As Integer</p> <p>The width of the control during the last <code>Paint</code> event.</p> <p>mRenderer As XUITabBarRenderer</p> <p>The renderer to use for the tab bar.</p> <p>mRightMenuButtonIcon As Picture</p> <p>If the right menu button is enabled, this is the icon to use.</p> <p>mScaleX As Double</p> <p>Cached value of <code>g.ScaleX</code> from the last <code>Paint</code> event.</p> <p>mScrollPosX As Integer</p> <p>The horizontal scroll offset. 0 is baseline. Positive indicates scrolling to the right. Backs the <code>ScrollPosX</code> computed property.</p> <p>mSelectedTabIndex As Integer</p> <p>The index of the currently selected tab.</p> <p>mStyle As XUITabBarStyle</p> <p>The colour style to use for the tab bar.</p> <p>mTabs() As XUITabBarItem</p> <p>This tab bar's items.</p> <p>Renderer As XUITabBarRenderer</p> <p>The renderer to use for the tab bar.</p> <p>RightMenuButtonBounds As Rect</p> <p>The bounds of the right menu button (if enabled). Set by the renderer. May be Nil.</p> <p>RightMenuButtonIcon As Picture</p> <p>If the right menu button is enabled, this is the icon to use.</p> <p>ScrollPosX As Integer</p> <p>The horizontal scroll offset. 0 is baseline. Positive indicates scrolling to the right.</p> <p>SelectedTab As XUITabBarItem</p> <p>The currently selected tab. May be Nil.</p> <p>SelectedTabIndex As Integer</p> <p>The index of the currently selected tab. Read only. Use <code>SelectTabAtIndex</code> to select a tab.</p> <p>Style As XUITabBarStyle</p> <p>The colour style to use for the tab bar.</p> <p>TabCount As Integer</p> <p>The number of tabs in the tab bar.</p>"},{"location":"XUI/XUITabBar/XUITabBar/#method-descriptions","title":"Method Descriptions","text":"<p>AddTabAt(index As Integer, caption As String, icon As Picture, tag As Variant, closable As Boolean, enabled As Boolean)</p> <p>Adds a new tab at the 0-based <code>index</code>. Will raise an <code>OutOfBoundsException</code> if <code>index</code> is invalid.</p> <p>AppendTab(caption As String, icon As Picture, tag As Variant, closable As Boolean, enabled As Boolean)</p> <p>Appends a new tab to this tab bar.</p> <p>Constructor()</p> <p>Default constructor.</p> <p>OverCloseIconAtIndex(index As Integer) As Boolean</p> <p>True if the mouse is over the close icon of the tab at <code>index</code>.</p> <p>OverLeftMenuButton(x As Integer, y As Integer) As Boolean</p> <p>True if <code>x, y</code> is over the left menu button.</p> <p><code>x</code> is the absolute coordinate from the left edge of the tab bar. It does not account for any scrolling of the tab bar. <code>y</code> is the absolute coordinate from the top left edge of the tab bar.</p> <p>OverRightMenuButton(x As Integer, y As Integer) As Boolean</p> <p>True if <code>x, y</code> is over the right menu button.</p> <p><code>x</code> is the absolute coordinate from the left edge of the tab bar. It does not account for any scrolling of the tab bar. <code>y</code> is the absolute coordinate from the top left edge of the tab bar.</p> <p>PageLeft()</p> <p>Moves the selected tab to the tab to the left of the currently selected tab, wrapping round to the right-most tab if paging from the left-most tab.</p> <p>PageRight()</p> <p>Moves the selected tab to the tab to the right of the currently selected tab, wrapping around to the first tab if on the right-most tab presently.</p> <p>PopTab() As XUITabBarItem</p> <p>Pops the right-most tab off of the tab bar and returns it. May return Nil if there are no tabs.</p> <p>RemoveAll()</p> <p>Removes all tabs, starting from the right-most tab.</p> <p>RemoveTabAt(index As Integer)</p> <p>Removes the tab at <code>index</code>. Will raise an <code>OutOfBoundsException</code> if <code>index</code> is invalid</p> <p>ReplaceTabAt(index As Integer, newTab As XUITabBarItem)</p> <p>Replaces the tab at <code>index</code> with <code>newTab</code> and selects it. Will raise an <code>OutOfBoundsException</code> if <code>index</code> is invalid.</p> <p>SelectTabAtIndex(index As Integer)</p> <p>Selects the tab at <code>index</code>. Will raise an <code>OutOfBoundsException</code> if <code>index</code> is invalid.</p> <p>SwapTabs(index1 As Integer, index2 As Integer, shouldRedraw As Boolean)</p> <p>Swaps the tabs at the passed indices and redraws the tab bar.</p> <p>TabIndexAtXY(x As Integer, y As Integer, excludeSelected As Boolean) As Integer</p> <p>Returns the index of the tab at mouse position <code>x, y</code> or -1 if there isn't one.</p> <ul> <li><code>x</code> is the absolute coordinate from the left edge of the tab bar. It does not account for any scrolling of the tab bar. </li> <li><code>y</code> is the absolute coordinate from the top left edge of the tab bar. </li> <li>If <code>excludeSelected</code> then we don't check the currently selected tab's bounds. </li> </ul> <p>Tabs() As XUITabBarItem()</p> <p>Returns the tab bar's tabs. This array should be considered read only. Do not modify it!</p> <p>ValidTabIndex(index As Integer) As Boolean</p> <p>Returns True if <code>index</code> is a valid tab index.</p>"},{"location":"XUI/XUITabBar/XUITabBar/#event-descriptions","title":"Event Descriptions","text":"<p>DidAddTab(tab As XUITabBarItem, index As Integer) A tab was just added to the tab bar at <code>index</code>.</p> <p>DidContextualClickLeftMenuButton(x As Integer, y As Integer) The user contexutal clicked (right clicked) over the left menu button at the passed coordinates. The coordinates are local to the top left corner of the tab bar.</p> <p>DidContextualClickRightMenuButton(x As Integer, y As Integer) The user contexutal clicked (left clicked) over the left menu button at the passed coordinates. The coordinates are local to the top left corner of the tab bar.</p> <p>DidContextualClickTab(tab As XUITabBarItem, x As Integer, y As Integer) The user contexutal clicked (right clicked) over a tab at the passed coordinates. The coordinates are local to the top left corner of the tab bar.</p> <p>DidFinishDragging(tab As XUITabBarItem, index As Integer) The user just finished dragging <code>tab</code> (which has a current index of <code>index</code>).</p> <p>DidRemoveTab(tab As XUITabBarItem) A tab has just been removed from the tab bar.</p> <p>DidSelectTab(tab As XUITabBarItem, index As Integer) The tab at the specified index was just selected.</p> <p>DidStartDragging(tab As XUITabBarItem, index As Integer) The user just began dragging <code>tab</code> (which has a current index of <code>index</code>).</p> <p>MouseExit() The mouse has just exited the control.</p> <p>MouseMove(x As Integer, y As Integer) The mouse has just moved within the control.</p> <p>MouseWheel(x As Integer, y As Integer, deltaX As Integer, deltaY As Integer) The mouse scroll wheel has triggered over the control.</p> <p>PressedLeftMenuButton() The user has just just pressed the left menu button.</p> <p>PressedRightMenuButton() The user has just just pressed the right menu button.</p>"},{"location":"XUI/XUITabBar/XUITabBarItem/","title":"XUITabBarItem","text":""},{"location":"XUI/XUITabBar/XUITabBarItem/#description","title":"Description","text":"<p>This class represents a tab in a <code>XUITabBar</code>.</p>"},{"location":"XUI/XUITabBar/XUITabBarItem/#properties","title":"Properties","text":"Name Type Read-Only Bounds <code>Rect</code> Caption <code>String</code> Closable <code>Boolean</code> CloseIconBounds <code>Rect</code> Enabled <code>Boolean</code> Icon <code>Picture</code> mOwner <code>WeakRef</code> Owner <code>XUITabBar</code> Tag <code>Variant</code>"},{"location":"XUI/XUITabBar/XUITabBarItem/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUITabBar</code>, caption As <code>String</code>, icon As <code>Picture</code>, tag As <code>Variant</code>, closable As <code>Boolean</code>, enabled As <code>Boolean</code>"},{"location":"XUI/XUITabBar/XUITabBarItem/#property-descriptions","title":"Property Descriptions","text":"<p>Bounds As Rect</p> <p>This tab's bounds. They are local to the renderer's buffer.</p> <p>Caption As String</p> <p>The tab's caption (visible text).</p> <p>Closable As Boolean</p> <p>If True then this tab can be closed by the user by clicking on the close icon.</p> <p>CloseIconBounds As Rect</p> <p>This tab's close icon bounds. They are local to the renderer's buffer. May be Nil.</p> <p>Enabled As Boolean</p> <p>True if this tab is enabled.</p> <p>Icon As Picture</p> <p>Optional icon.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the tab bar that owns this tab.</p> <p>Owner As XUITabBar</p> <p>The tab bar that owns this tab.</p> <p>Tag As Variant</p> <p>Optional arbitrary data associated with this tab.</p>"},{"location":"XUI/XUITabBar/XUITabBarItem/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUITabBar, caption As String, icon As Picture, tag As Variant, closable As Boolean, enabled As Boolean)</p> <ul> <li><code>owner</code> is the owing tab bar. A <code>WeakRef</code> will be created. </li> <li><code>caption</code> is the text displayed on the tab. </li> <li><code>icon</code> is an optional icon for the tab. </li> <li><code>tag</code> is optional arbitrary data to associate with the tab. </li> <li>If <code>closable</code> is <code>True</code> (the default) then this tab will be closable by the user. </li> <li><code>enabled</code> determines if the tab is enable (default is <code>True</code>). </li> </ul>"},{"location":"XUI/XUITabBar/XUITabBarStyle/","title":"XUITabBarStyle","text":""},{"location":"XUI/XUITabBar/XUITabBarStyle/#description","title":"Description","text":"<p>Stores styling properties for a <code>XUITabBar</code>.</p> <p>The appearance of a <code>XUITabBar</code> is determined by two things - the tab bar's renderer (which is responsible for how the tab bar is drawn) and the tab bar's style. It's style (represented by this class) specifies the colours the renderer should use for certain parts of the tab bar. Of course it is up to the renderer to decide if it should honour these colours but all of the renderers  provided with XUI do.</p> <p>The logic behind separating the renderering of a tab bar from its styling is to facilitate  scenarios such as wanting to have a tab bar that looks like the macOS Safari tab bar but has colours more in keeping with Windows or your own branding, for example.</p>"},{"location":"XUI/XUITabBar/XUITabBarStyle/#properties","title":"Properties","text":"Name Type Read-Only BackgroundColor <code>ColorGroup</code> DisabledTabBackgroundColor <code>ColorGroup</code> DisabledTabTextColor <code>ColorGroup</code> FontName <code>String</code> FontSize <code>Integer</code> HoverTabBackgroundColor <code>ColorGroup</code> HoverTabCloseColor <code>ColorGroup</code> HoverTabTextColor <code>ColorGroup</code> InactiveTabBackgroundColor <code>ColorGroup</code> InactiveTabTextColor <code>ColorGroup</code> MenuButtonBackgroundColor <code>ColorGroup</code> MenuButtonBorderColor <code>ColorGroup</code> MenuButtonColor <code>ColorGroup</code> MenuButtonHoverBackgroundColor <code>ColorGroup</code> MenuButtonHoverColor <code>ColorGroup</code> Name <code>String</code> SelectedTabBackgroundColor <code>ColorGroup</code> SelectedTabBottomBorderColor <code>ColorGroup</code> SelectedTabTextColor <code>ColorGroup</code> SelectedTabTopBorderColor <code>ColorGroup</code> TabBorderColor <code>ColorGroup</code> TabCloseColor <code>ColorGroup</code> Tag <code>Variant</code>"},{"location":"XUI/XUITabBar/XUITabBarStyle/#methods","title":"Methods","text":"Name Parameters Returns Constructor Edge <code>XUITabBarStyle</code> Safari <code>XUITabBarStyle</code>"},{"location":"XUI/XUITabBar/XUITabBarStyle/#property-descriptions","title":"Property Descriptions","text":"<p>BackgroundColor As ColorGroup</p> <p>The tab bar's background colour. It is visible when tabs are dragged around.</p> <p>DisabledTabBackgroundColor As ColorGroup</p> <p>The colour to use for the background of a disabled tab.</p> <p>DisabledTabTextColor As ColorGroup</p> <p>The colour of the text on a tab when the tab is disabled.</p> <p>FontName As String</p> <p>The font family name to use for text in the tab bar.</p> <p>FontSize As Integer</p> <p>The size of the tab bar font.</p> <p>HoverTabBackgroundColor As ColorGroup</p> <p>The colour of the background of the tab being hovered over.</p> <p>HoverTabCloseColor As ColorGroup</p> <p>The color of the close icon when hovered over.</p> <p>HoverTabTextColor As ColorGroup</p> <p>The colour of the text in the tab being hovered over.</p> <p>InactiveTabBackgroundColor As ColorGroup</p> <p>The background colour of inactive tabs.</p> <p>InactiveTabTextColor As ColorGroup</p> <p>The text colour for inactive tabs.</p> <p>MenuButtonBackgroundColor As ColorGroup</p> <p>The background colour of the optional tab bar menu button.</p> <p>MenuButtonBorderColor As ColorGroup</p> <p>The border colour of the optional tab bar menu button.</p> <p>MenuButtonColor As ColorGroup</p> <p>If the menu button has no icon, this is the colour of the drawn icon.</p> <p>MenuButtonHoverBackgroundColor As ColorGroup</p> <p>The background colour of the optional tab bar menu button when hovered over.</p> <p>MenuButtonHoverColor As ColorGroup</p> <p>If the menu button has no icon, this is the colour of the drawn icon when hovered over.</p> <p>Name As String</p> <p>An optional name for this style.</p> <p>SelectedTabBackgroundColor As ColorGroup</p> <p>The colour to use for the currently selected tab's background.</p> <p>SelectedTabBottomBorderColor As ColorGroup</p> <p>If the currently selected tab has a bottom border (determined by the renderer) then this is the colour to use.</p> <p>SelectedTabTextColor As ColorGroup</p> <p>The colour of the text on the currently selected tab.</p> <p>SelectedTabTopBorderColor As ColorGroup</p> <p>If the currently selected tab has a top border (determined by the renderer) then this is the colour to use.</p> <p>TabBorderColor As ColorGroup</p> <p>The colour to use for the borders of a tab.</p> <p>TabCloseColor As ColorGroup</p> <p>The color of the close icon when not hovered over.</p> <p>Tag As Variant</p> <p>Optional arbitrary data associated with this style.</p>"},{"location":"XUI/XUITabBar/XUITabBarStyle/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor()</p> <p>Default constructor.</p> <p>Edge() As XUITabBarStyle This method is shared.</p> <p>Creates and returns a new style that mimics the tabs seen in Microsoft's Edge.</p> <p>Safari() As XUITabBarStyle This method is shared.</p> <p>Creates and returns a new style that mimics the tabs seen in Safari.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRenderer/","title":"XUITabBarRenderer","text":""},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRenderer/#description","title":"Description","text":"<p>Tab bars look different on different operating systems and even between different  applications on the same operating system. To handle this, <code>XUITabBar</code> outsources  its appearance to a Renderer. Renderers are classes that implement this interface. They expose methods to <code>XUITabBar</code> to alter its appearance. Several example renderers are included with XUI.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRenderer/#methods","title":"Methods","text":"Name Parameters Returns BufferWidth <code>Integer</code> Constructor owner As <code>XUITabBar</code> LeftMenuButtonWidth <code>Double</code> Name <code>String</code> Owner <code>XUITabBar</code> Render ownerGraphics As <code>Graphics</code>, scrollPosX As <code>Integer</code>, needsFullRedraw As <code>Boolean</code> RightMenuButtonWidth <code>Double</code> SupportsLeftMenuButton <code>Boolean</code> SupportsRightMenuButton <code>Boolean</code> TabBarHeight <code>Integer</code>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRenderer/#method-descriptions","title":"Method Descriptions","text":"<p>BufferWidth() As Integer The current width of the buffer in points.</p> <p>Constructor(owner As XUITabBar) <code>owner</code> is the <code>XUITabBar</code> that owns this renderer.</p> <p>LeftMenuButtonWidth() As Double The width of the left menu button (if supported by this renderer).</p> <p>Name() As String The name of this renderer.</p> <p>Owner() As XUITabBar The tab bar this renderer operates on.</p> <p>Render(ownerGraphics As Graphics, scrollPosX As Integer, needsFullRedraw As Boolean) Returns the image to be drawn to the tab bar's graphics context in its <code>Paint</code> event.</p> <p>RightMenuButtonWidth() As Double The width of the right menu button (if supported by this renderer).</p> <p>SupportsLeftMenuButton() As Boolean True if this renderer supports the concept of a left menu button.</p> <p>SupportsRightMenuButton() As Boolean True if this renderer supports the concept of a right menu button.</p> <p>TabBarHeight() As Integer Returns the height the tab bar will be rendered at.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererEdge/","title":"XUITabBarRendererEdge","text":"<p>Implements <code>XUITabBarRenderer</code></p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererEdge/#description","title":"Description","text":"<p>A tab bar renderer that renders a <code>XUITabBar</code> similar to that seen in Microsoft Edge.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererEdge/#properties","title":"Properties","text":"Name Type Read-Only mBuffer <code>Picture</code> mOwner <code>WeakRef</code>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererEdge/#methods","title":"Methods","text":"Name Parameters Returns BufferWidth <code>Integer</code> Constructor owner As <code>XUITabBar</code> DrawTabBorders g As <code>Graphics</code>, style As <code>XUITabBarStyle</code> DrawTabCloseIcon tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, x As <code>Double</code>, style As <code>XUITabBarStyle</code> LeftMenuButtonWidth <code>Double</code> Name <code>String</code> Owner <code>XUITabBar</code> Render ownerGraphics As <code>Graphics</code>, scrollPosX As <code>Integer</code>, needsFullRedraw As <code>Boolean</code> RenderLeftMenuButton g As <code>Graphics</code>, style As <code>XUITabBarStyle</code> RenderRightMenuButton g As <code>Graphics</code>, style As <code>XUITabBarStyle</code>, x As <code>Double</code> RenderSelectedTab g As <code>Graphics</code>, x As <code>Double</code>, style As <code>XUITabBarStyle</code>, width As <code>Double</code> RenderUnselectedTab tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, x As <code>Double</code>, style As <code>XUITabBarStyle</code>, width As <code>Double</code> RightMenuButtonWidth <code>Double</code> SetGraphicsBackgroundColor tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, isSelected As <code>Boolean</code>, hoveredOver As <code>Boolean</code>, style As <code>XUITabBarStyle</code> SetGraphicsFontProperties tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, isSelected As <code>Boolean</code>, hoveredOver As <code>Boolean</code> SupportsLeftMenuButton <code>Boolean</code> SupportsRightMenuButton <code>Boolean</code> TabBarHeight <code>Integer</code> TabWidth tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, style As <code>XUITabBarStyle</code> <code>Double</code> TabWidthExcludingCaption tab As <code>XUITabBarItem</code> <code>Double</code>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererEdge/#constants","title":"Constants","text":"Name Type BORDER_VERT_PADDING <code>Double</code> CLOSE_ICON_CROSS_HEIGHT <code>Double</code> CLOSE_ICON_CROSS_WIDTH <code>Double</code> CLOSE_ICON_HEIGHT <code>Double</code> CLOSE_ICON_LEFT_PADDING <code>Double</code> CLOSE_ICON_WIDTH <code>Double</code> CONTENTS_HORIZONTAL_PADDING <code>Double</code> ICON_PADDING <code>Double</code> LEFT_MENU_BUTTON_HEIGHT <code>Double</code> LEFT_MENU_BUTTON_HOVER_VERT_PADDING <code>Double</code> LEFT_MENU_BUTTON_HOVER_WIDTH <code>Double</code> LEFT_MENU_BUTTON_PADDING <code>Double</code> LEFT_MENU_BUTTON_WIDTH <code>Double</code> MAX_TAB_WIDTH <code>Double</code> MIN_TAB_WIDTH <code>Double</code> RIGHT_MENU_BUTTON_HEIGHT <code>Double</code> RIGHT_MENU_BUTTON_HOVER_VERT_PADDING <code>Double</code> RIGHT_MENU_BUTTON_HOVER_WIDTH <code>Double</code> RIGHT_MENU_BUTTON_PADDING <code>Double</code> RIGHT_MENU_BUTTON_WIDTH <code>Double</code> <p>BORDER_VERT_PADDING As Double The number of pixels to pad above and below the left and right tab borders.</p> <p>CLOSE_ICON_CROSS_HEIGHT As Double The height of the close icon cross.</p> <p>CLOSE_ICON_CROSS_WIDTH As Double The width of the close icon cross.</p> <p>CLOSE_ICON_HEIGHT As Double The height of the close icon rounded rect.</p> <p>CLOSE_ICON_LEFT_PADDING As Double How much to pad the left of the close icon (if the tab is closable).</p> <p>CLOSE_ICON_WIDTH As Double The width of the close icon rounded rect.</p> <p>CONTENTS_HORIZONTAL_PADDING As Double How much to pad left and right of the contents of the tab (close icon, icon and caption).</p> <p>ICON_PADDING As Double how much to pad the left and right sides of the icon from the tab's caption.</p> <p>LEFT_MENU_BUTTON_HEIGHT As Double The height of the left menu button.</p> <p>LEFT_MENU_BUTTON_HOVER_VERT_PADDING As Double How much to pad above and below the rounded rectangle drawn when hovering over the left menu button if there is no left menu button icon.</p> <p>LEFT_MENU_BUTTON_HOVER_WIDTH As Double The width of the left menu button when hovered over if no icon specified.</p> <p>LEFT_MENU_BUTTON_PADDING As Double How much to pad the left and right of the left menu button if present.</p> <p>LEFT_MENU_BUTTON_WIDTH As Double The width of the left menu button.</p> <p>MAX_TAB_WIDTH As Double The maximum width a tab can be.</p> <p>MIN_TAB_WIDTH As Double The minimum width a tab can be.</p> <p>RIGHT_MENU_BUTTON_HEIGHT As Double The height of the right menu button.</p> <p>RIGHT_MENU_BUTTON_HOVER_VERT_PADDING As Double How much to pad above and below the rounded rectangle drawn when hovering over the right menu button if there is no right menu button icon.</p> <p>RIGHT_MENU_BUTTON_HOVER_WIDTH As Double The width of the right menu button when hovered over if no icon specified.</p> <p>RIGHT_MENU_BUTTON_PADDING As Double How much to pad the left and right of the right menu button if present.</p> <p>RIGHT_MENU_BUTTON_WIDTH As Double The width of the right menu button.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererEdge/#property-descriptions","title":"Property Descriptions","text":"<p>mBuffer As Picture</p> <p>Cache of the Picture returned from the last call to <code>XUITabBarRender.Buffer()</code>. May be Nil.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the tab bar that this renderer operates on.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererEdge/#method-descriptions","title":"Method Descriptions","text":"<p>BufferWidth() As Integer</p> <p>The current width of the buffer in points.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>Constructor(owner As XUITabBar)</p> <p><code>owner</code> is the <code>XUITabBar</code> that owns this renderer. A <code>WeakRef</code> will be created.</p> <p>Part of the XUITabBarRenderer interface.</p> <p>DrawTabBorders(g As Graphics, style As XUITabBarStyle)</p> <p>Draws the tab borders to <code>g</code> using <code>style</code>.</p> <p>This is the last step in rendering the tab bar's buffer. We do it separate from rendering the tabs because there are several edge cases to deal with that we can more gracefully handle after all tabs have been rendered.</p> <p>DrawTabCloseIcon(tab As XUITabBarItem, g As Graphics, x As Double, style As XUITabBarStyle)</p> <p>Draws this tab's close icon to <code>g</code> at <code>x</code>. Also sets the tab's <code>CloseIconBounds</code>.</p> <p>Assumes this tab has a close icon.</p> <p>LeftMenuButtonWidth() As Double</p> <p>The width of the left menu button (if supported by this renderer).</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>Name() As String</p> <p>The name of this renderer.</p> <p>Owner() As XUITabBar</p> <p>The tab bar this renderer operates on.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>Render(ownerGraphics As Graphics, scrollPosX As Integer, needsFullRedraw As Boolean)</p> <p>Renders the tab bar to the passed graphics context at <code>scrollPosX</code>.</p> <p>Assumes that <code>ownerGraphics</code> is the graphics context from the tab bar's <code>Paint</code> event. <code>scrollPosX</code> is the number of pixels (&gt;= 0) the tab bar has been scrolled to the right. <code>0</code> is no scrolling. <code>ownerGraphics</code> will be used as a temporary drawing scratch pad but will ultimately be overwritten when we draw the background and buffer to it.</p> <p>Part of the XUITabBarRenderer interface.</p> <p>RenderLeftMenuButton(g As Graphics, style As XUITabBarStyle)</p> <p>Renders the left menu button to <code>g</code> at <code>x</code>.</p> <p>RenderRightMenuButton(g As Graphics, style As XUITabBarStyle, x As Double)</p> <p>Renders the right menu button to <code>g</code> at <code>x</code>.</p> <p>RenderSelectedTab(g As Graphics, x As Double, style As XUITabBarStyle, width As Double)</p> <p>Renders the selected to <code>g</code>, placing its left edge at <code>x</code> and sets its bounds.</p> <p>RenderUnselectedTab(tab As XUITabBarItem, g As Graphics, x As Double, style As XUITabBarStyle, width As Double)</p> <p>Renders the unselected <code>tab</code> with <code>width</code> to <code>g</code>, placing its left edge at <code>x</code> and sets its bounds.</p> <p>RightMenuButtonWidth() As Double</p> <p>The width of the right menu button (if supported by this renderer).</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>SetGraphicsBackgroundColor(tab As XUITabBarItem, g As Graphics, isSelected As Boolean, hoveredOver As Boolean, style As XUITabBarStyle)</p> <p>Sets the background drawing colour of <code>g</code> to those required for <code>tab</code>.</p> <p>SetGraphicsFontProperties(tab As XUITabBarItem, g As Graphics, isSelected As Boolean, hoveredOver As Boolean)</p> <p>Sets the font properties of <code>g</code> to those required for <code>tab</code>.</p> <p>SupportsLeftMenuButton() As Boolean</p> <p>True if this renderer supports the concept of a left menu button.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>SupportsRightMenuButton() As Boolean</p> <p>True if this renderer supports the concept of a right menu button.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>TabBarHeight() As Integer</p> <p>Returns the height the tab bar will be rendered at.</p> <p>Part of the XUITabBarRenderer interface.</p> <p>TabWidth(tab As XUITabBarItem, g As Graphics, style As XUITabBarStyle) As Double</p> <p>Returns the width of <code>tab</code> if it were drawn to <code>g</code>.</p> <p>TabWidthExcludingCaption(tab As XUITabBarItem) As Double</p> <p>Returns the width of <code>tab</code> excluding its caption.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererSafari/","title":"XUITabBarRendererSafari","text":"<p>Implements <code>XUITabBarRenderer</code></p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererSafari/#description","title":"Description","text":"<p>A tab bar renderer that renders a <code>XUITabBar</code> similar to that seen in macOS Safari.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererSafari/#properties","title":"Properties","text":"Name Type Read-Only mBuffer <code>Picture</code> mOwner <code>WeakRef</code>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererSafari/#methods","title":"Methods","text":"Name Parameters Returns BufferWidth <code>Integer</code> Constructor owner As <code>XUITabBar</code> DrawTabCloseIcon tab As <code>XUITabBarItem</code>, x As <code>Integer</code>, g As <code>Graphics</code>, style As <code>XUITabBarStyle</code> LeftMenuButtonWidth <code>Double</code> Name <code>String</code> Owner <code>XUITabBar</code> Render ownerGraphics As <code>Graphics</code>, scrollPosX As <code>Integer</code>, needsFullRedraw As <code>Boolean</code> RenderTab tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, x As <code>Double</code>, style As <code>XUITabBarStyle</code>, width As <code>Double</code> RightMenuButtonWidth <code>Double</code> SetGraphicsBackgroundColor tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, isSelected As <code>Boolean</code>, hoveredOver As <code>Boolean</code>, style As <code>XUITabBarStyle</code> SetGraphicsFontProperties tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, isSelected As <code>Boolean</code>, hoveredOver As <code>Boolean</code> SupportsLeftMenuButton <code>Boolean</code> SupportsRightMenuButton <code>Boolean</code> TabBarHeight <code>Integer</code> TabWidth tab As <code>XUITabBarItem</code>, g As <code>Graphics</code>, style As <code>XUITabBarStyle</code> <code>Double</code>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererSafari/#constants","title":"Constants","text":"Name Type CLOSE_ICON_HEIGHT <code>Double</code> CLOSE_ICON_RIGHT_PADDING <code>Double</code> CLOSE_ICON_WIDTH <code>Double</code> CONTENTS_HORIZONTAL_PADDING <code>Double</code> ICON_RIGHT_PADDING <code>Double</code> MIN_TAB_WIDTH <code>Double</code> TAB_HORIZONTAL_PADDING <code>Double</code> <p>CLOSE_ICON_HEIGHT As Double The height of the close icon.</p> <p>CLOSE_ICON_RIGHT_PADDING As Double How much to pad the right of the close icon (if the tab is closable).</p> <p>CLOSE_ICON_WIDTH As Double The width of the close icon.</p> <p>CONTENTS_HORIZONTAL_PADDING As Double How much to pad left and right of the contents of the tab (close icon, icon and caption).</p> <p>ICON_RIGHT_PADDING As Double how much to pad the right side of the icon from the tab's caption.</p> <p>MIN_TAB_WIDTH As Double The minimum width a tab should be.</p> <p>TAB_HORIZONTAL_PADDING As Double The number of pixels to pad the content from the tab edges.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererSafari/#property-descriptions","title":"Property Descriptions","text":"<p>mBuffer As Picture</p> <p>Cache of the Picture returned from the last call to <code>XUITabBarRender.Buffer()</code>. May be Nil.</p> <p>mOwner As WeakRef</p> <p>A weak reference to the tab bar that this renderer operates on.</p>"},{"location":"XUI/XUITabBar/Tab%20Bar%20Renderers/XUITabBarRendererSafari/#method-descriptions","title":"Method Descriptions","text":"<p>BufferWidth() As Integer</p> <p>The current width of the buffer in points.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>Constructor(owner As XUITabBar)</p> <p><code>owner</code> is the <code>XUITabBar</code> that owns this renderer. A <code>WeakRef</code> will be created.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>DrawTabCloseIcon(tab As XUITabBarItem, x As Integer, g As Graphics, style As XUITabBarStyle)</p> <p>Draws the close icon for <code>tab</code> at <code>x</code>. Also sets the tab's <code>CloseIconBounds</code>.</p> <p>LeftMenuButtonWidth() As Double</p> <p>The width of the left menu button (if supported by this renderer).</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>Name() As String</p> <p>The name of this renderer.</p> <p>Owner() As XUITabBar</p> <p>The tab bar this renderer operates on.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>Render(ownerGraphics As Graphics, scrollPosX As Integer, needsFullRedraw As Boolean)</p> <p>Renders the tab bar to the passed graphics context at <code>scrollPosX</code>.</p> <p>Assumes that <code>ownerGraphics</code> is the graphics context from the tab bar's <code>Paint</code> event.</p> <p><code>scrollPosX</code> is the number of pixels (&gt;= 0) the tab bar has been scrolled to the right. <code>0</code> is no scrolling.</p> <p><code>ownerGraphics</code> will be used as a temporary drawing scratch pad but will ultimately be overwritten when we draw the background and buffer to it.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>RenderTab(tab As XUITabBarItem, g As Graphics, x As Double, style As XUITabBarStyle, width As Double)</p> <p>Renders <code>tab</code> with <code>width</code> to <code>g</code>, placing its left edge at <code>x</code> and sets its bounds.</p> <p>RightMenuButtonWidth() As Double</p> <p>The width of the right menu button (if supported by this renderer).</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>SetGraphicsBackgroundColor(tab As XUITabBarItem, g As Graphics, isSelected As Boolean, hoveredOver As Boolean, style As XUITabBarStyle)</p> <p>Sets the background drawing colour of <code>g</code> to those required for <code>tab</code>.</p> <p>SetGraphicsFontProperties(tab As XUITabBarItem, g As Graphics, isSelected As Boolean, hoveredOver As Boolean)</p> <p>Sets the font properties of <code>g</code> to those required for <code>tab</code>.</p> <p>SupportsLeftMenuButton() As Boolean</p> <p>True if this renderer supports the concept of a left menu button.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>SupportsRightMenuButton() As Boolean</p> <p>True if this renderer supports the concept of a right menu button.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>TabBarHeight() As Integer</p> <p>Returns the height the tab bar will be rendered at.</p> <p>Part of the <code>XUITabBarRenderer</code> interface.</p> <p>TabWidth(tab As XUITabBarItem, g As Graphics, style As XUITabBarStyle) As Double</p> <p>Returns the width of <code>tab</code> if it were drawn to <code>g</code>.</p>"},{"location":"XUI/XUITagCanvas/XUITag/","title":"XUITag","text":""},{"location":"XUI/XUITagCanvas/XUITag/#description","title":"Description","text":"<p>Represents a tag within a <code>XUITagCanvas</code>.</p>"},{"location":"XUI/XUITagCanvas/XUITag/#properties","title":"Properties","text":"Name Type Read-Only Bounds <code>Rect</code> Data <code>Variant</code> HasWidget <code>Boolean</code> \u2714 Title <code>String</code> WidgetBounds <code>Rect</code>"},{"location":"XUI/XUITagCanvas/XUITag/#methods","title":"Methods","text":"Name Parameters Returns Constructor title As <code>String</code>, data As <code>Variant</code>"},{"location":"XUI/XUITagCanvas/XUITag/#property-descriptions","title":"Property Descriptions","text":"<p>Bounds As Rect</p> <p>The absolute bounds of this tag, relative to the backing buffer's top left corner.</p> <p>Data As Variant</p> <p>Optional arbitrary data associated with this tag.</p> <p>HasWidget As Boolean</p> <p>True if this icon has a clickable dingus (e.g. a close icon, disclosure triangle, etc).</p> <p>Title As String</p> <p>This tag's title.</p> <p>WidgetBounds As Rect</p> <p>If this tag has a clickable dingus (e.g. close icon, disclosure triangle) then these are its bounds, relative to the backing buffer's top left corner. May be Nil.</p>"},{"location":"XUI/XUITagCanvas/XUITag/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(title As String, data As Variant)</p> <p>Default constructor.</p> <ul> <li><code>title</code> is the tag text that is visible to the user. </li> <li><code>data</code> is optional arbitrary data associated with the tag. </li> </ul>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/","title":"XUITagCanvas","text":"<p>Inherits <code>DesktopTextInputCanvas</code></p> <p>Implements <code>XUINotificationListener</code></p>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#description","title":"Description","text":"<p><code>XUITagCanvas</code> is a really useful, highly customisable and good looking UI control for accepting and presenting \"tags\".</p> <p>You will most likely have seen examples of this type of control in the address field of email  clients or perhaps in the search fields of applications such as the Finder on macOS.</p> <p>The <code>XUITagCanvas</code> is a fully functioning <code>DesktopTextInputCanvas</code> subclass so you can type freely into it. </p> <p>The control supports autocompletion of tags using a flexible \"parselet\" system. What does this mean?  Well, let's say you want to replicate the functionality commonly seen in the \"To:\" field of an email client (where if the user types a valid email address a tag is created or if the user types a known contact's name into the field a tag is created). This is natively supported with the included  <code>XUIEmailTagParselet</code> and an example is provided in the demo app of how easy this is to implement.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#properties","title":"Properties","text":"Name Type Read-Only AllowAutocomplete <code>Boolean</code> AutocompleteData <code>XUITagAutocompleteData</code> CaretBlinkPeriod <code>Integer</code> CaretLineNumber <code>Integer</code> \u2714 CaretXCoordinate <code>Integer</code> \u2714 CurrentLine <code>XUITagCanvasLine</code> HasBorder <code>Boolean</code> HasFocus <code>Boolean</code> \u2714 LineHeight <code>Integer</code> \u2714 mAutocompletePopup <code>XUITagCanvasAutocompletePopup</code> mBuffer <code>Picture</code> mCaretBlinker <code>Timer</code> mCaretVisible <code>Boolean</code> mCurrentLine <code>XUITagCanvasLine</code> mHasBorder <code>Boolean</code> mHasFocus <code>Boolean</code> MinimumAutocompletionLength <code>Integer</code> mLastClickWasContextual <code>Boolean</code> mLastPaintHeight <code>Integer</code> mLastPaintWidth <code>Integer</code> mLineHeight <code>Double</code> mLines() <code>XUITagCanvasLine</code> mMinimumAutocompletionLength <code>Integer</code> mReadOnly <code>Boolean</code> mRequiredBufferWidth <code>Integer</code> mScrollPosX <code>Integer</code> mScrollPosY <code>Integer</code> mStyle <code>XUITagCanvasStyle</code> mSuppressAutocompletePopup <code>Boolean</code> mTriggers() <code>String</code> Multiline <code>Boolean</code> Parselet <code>XUITagParselet</code> ParseOnComma <code>Boolean</code> ParseOnReturn <code>Boolean</code> ParseOnTab <code>Boolean</code> ParseTriggers <code>String</code> ReadOnly <code>Boolean</code> Renderer <code>XUITagCanvasRenderer</code> ScrollPosX <code>Integer</code> ScrollPosY <code>Integer</code> Style <code>XUITagCanvasStyle</code> TagsHaveWidget <code>Boolean</code>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#methods","title":"Methods","text":"Name Parameters Returns AcceptCurrentAutocompleteOption AddTag tag As <code>XUITag</code> CaretBlinkerAction caretBlinker As <code>Timer</code> Clear ComputeBufferWidth Constructor FetchAutocompleteData HandleDeleteBackwards HandleEscKey HideAutocompletePopup shouldSetFocus As <code>Boolean</code> InsertCharacter char As <code>String</code>, range As <code>TextRange</code> InsertString s As <code>String</code> IsTrigger char As <code>String</code> <code>Boolean</code> Lines <code>XUITagCanvasLine()</code> LineWidth line As <code>XUITagCanvasLine</code> <code>Double</code> MaxVisibleLines lineHeight As <code>Double</code> <code>Integer</code> NotificationReceived n As <code>XUINotification</code> PaintCaret g As <code>Graphics</code> Parse <code>Boolean</code> RebuildBuffer RegisterForNotifications RemoveTagInstance tag As <code>XUITag</code> ScrollDown linesToScroll As <code>Integer</code> ScrollToCaret ScrollUp linesToScroll As <code>Integer</code> SetContents s As <code>String</code> ShowAutocompletePopup TagAtXY x As <code>Integer</code>, y As <code>Integer</code> <code>XUITag</code> UpdateLayout XYAtCaretPos x As <code>Double</code>, y As <code>Double</code>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#events","title":"Events","text":"Name Parameters Returns AddedTag tag As <code>XUITag</code> AutocompleteDataForPrefix prefix As <code>String</code> <code>XUITagAutocompleteData</code> ClickedTag tag As <code>XUITag</code>, isContextualClick As <code>Boolean</code> Opening RemovedTag tag As <code>XUITag</code>, viaWidget As <code>Boolean</code>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#constants","title":"Constants","text":"Name Type LEFT_PADDING <code>Double</code> LEFT_SCROLL_PADDING <code>Double</code> POPUP_PADDING <code>Double</code> RIGHT_SCROLL_PADDING <code>Double</code> TYPING_SPEED_TICKS <code>Double</code> UNDO_EVENT_BLOCK_SECONDS <code>Double</code> VSCROLL_SENSITIVITY <code>Double</code> <p>LEFT_PADDING As Double The number of pixels to pad content from the left edge of the canvas.</p> <p>LEFT_SCROLL_PADDING As Double The number of pixels to pad left when scrolling leftwards.</p> <p>POPUP_PADDING As Double The number of pixels between the autocomplete popup and the edge of the canvas.</p> <p>RIGHT_SCROLL_PADDING As Double Fudge factor for padding the right of lines when horizontal scrolling.</p> <p>TYPING_SPEED_TICKS As Double The number of ticks between keystrokes to still be considered as actively typing.</p> <p>UNDO_EVENT_BLOCK_SECONDS As Double The number of seconds within which undoable action will be grouped together as a single undoable action.</p> <p>VSCROLL_SENSITIVITY As Double Higher number = more lines scrolled when quickly scrolling vertically. Values between 1 - 3 work well.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#property-descriptions","title":"Property Descriptions","text":"<p>AllowAutocomplete As Boolean</p> <p>True if the tag canvas supports autocomplete.</p> <p>AutocompleteData As XUITagAutocompleteData</p> <p>The autocomplete options for the unparsed text. May be Nil.</p> <p>CaretBlinkPeriod As Integer</p> <p>The interval (in ms) between caret blinks.</p> <p>CaretLineNumber As Integer</p> <p>The number of the line the caret is currently on.</p> <p>CaretXCoordinate As Integer</p> <p>The absolute X coordinate of the caret at its current position (computed and expensive).</p> <p>CurrentLine As XUITagCanvasLine</p> <p>The line that the caret is currently on.</p> <p>HasBorder As Boolean</p> <p>True if a border should be drawn around the control.</p> <p>HasFocus As Boolean</p> <p>Returns True if this tag canvas currently has the focus.</p> <p>LineHeight As Integer</p> <p>The height (in pixels) of a line.</p> <p>mAutocompletePopup As XUITagCanvasAutocompletePopup</p> <p>This tag canvas' autocomplete popup control.</p> <p>mBuffer As Picture</p> <p>The buffer we draw the contents to and then blit to the screen each frame.</p> <p>mCaretBlinker As Timer</p> <p>The timer responsible for blinking the caret.</p> <p>mCaretVisible As Boolean</p> <p>True if the caret has blinked visible, False if not.</p> <p>mCurrentLine As XUITagCanvasLine</p> <p>Backing field for the <code>CurrentLine</code> computed property.</p> <p>mHasBorder As Boolean</p> <p>True if a border should be drawn around the control.</p> <p>mHasFocus As Boolean</p> <p>Backing field for the <code>HasFocus</code> computed property.</p> <p>MinimumAutocompletionLength As Integer</p> <p>The minimum number of characters required before autocompletion is offered. Must be &gt;= 2.</p> <p>mLastClickWasContextual As Boolean</p> <p>True if the mouse click that just occurred in the <code>MouseDown</code> event was a contextual click.</p> <p>mLastPaintHeight As Integer</p> <p>The height of the canvas at the beginning of the last <code>Paint</code> event.</p> <p>mLastPaintWidth As Integer</p> <p>The width of the canvas at the beginning of the last <code>Paint</code> event.</p> <p>mLineHeight As Double</p> <p>Internal cache of the current line height.</p> <p>mLines() As XUITagCanvasLine</p> <p>The lines in this canvas.</p> <p>mMinimumAutocompletionLength As Integer</p> <p>The minimum number of characters required before autocompletion is offered. Backs the <code>MinimumAutocompletionLength</code> computed property.</p> <p>mReadOnly As Boolean</p> <p>Backing store for the <code>ReadOnly</code> computed property.</p> <p>mRequiredBufferWidth As Integer</p> <p>The width the buffer should be. Set in <code>ComputeBufferWidth</code>.</p> <p>mScrollPosX As Integer</p> <p>The horizontal scroll offset. 0 is baseline. Positive indicates scrolling to the right. Backs the <code>ScrollPosX</code> computed property.</p> <p>mScrollPosY As Integer</p> <p>The vetical scroll offset. 0 is baseline. Positive indicates scrolling down. Backs the <code>ScrollPosY</code> computed property.</p> <p>mStyle As XUITagCanvasStyle</p> <p>The colour style to use for the tag canvas and tags.</p> <p>mSuppressAutocompletePopup As Boolean</p> <p>If True then the autocomplete popup is suppressed even if there is autocomplete data available. Set after the user has cancelled autocomplete.</p> <p>mTriggers() As String</p> <p>Additional characters that trigger tag parsing. Set with the <code>ParseTriggers</code> computed property.</p> <p>Multiline As Boolean</p> <p>If True then tags will wrap to new lines.</p> <p>Parselet As XUITagParselet</p> <p>The parselet to use to parse text entered in the tag canvas.</p> <p>ParseOnComma As Boolean</p> <p>If True then the comma key triggers the parsing of any contiguous text not yet parsed as a tag.</p> <p>ParseOnReturn As Boolean</p> <p>If True then the return key triggers the parsing of any contiguous text not yet parsed as a tag.</p> <p>ParseOnTab As Boolean</p> <p>If True then the tag key triggers the parsing of any contiguous text not yet parsed as a tag.</p> <p>ParseTriggers As String</p> <p>A comma delimited list of characters that will trigger tag parsing. Return, tab and comma characters are stipulated by the <code>ParseOn...</code> properties.</p> <p>ReadOnly As Boolean</p> <p>If True then the canvas is read-only (i.e. not editable).</p> <p>Renderer As XUITagCanvasRenderer</p> <p>The renderer to use to draw the tags in the canvas.</p> <p>ScrollPosX As Integer</p> <p>The horizontal scroll offset. 0 is baseline. Positive indicates scrolling to the right. Refreshes the canvas.</p> <p>ScrollPosY As Integer</p> <p>The vertical scroll offset. 0 is baseline. Positive indicates scrolling down. Refreshes the canvas.</p> <p>Style As XUITagCanvasStyle</p> <p>The colour style to use for the tag canvas and tags.</p> <p>TagsHaveWidget As Boolean</p> <p>If True then tags will be drawn with a clickable dingus.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#method-descriptions","title":"Method Descriptions","text":"<p>AcceptCurrentAutocompleteOption()</p> <p>Accepts the currently selected option in the autocomplete popup.</p> <p>AddTag(tag As XUITag)</p> <p>Adds <code>tag</code> to the end of the current line, clearing any unparsed text. Refreshes the canvas.</p> <p>CaretBlinkerAction(caretBlinker As Timer)</p> <p>Toggles the visibility of the caret. Called by <code>mCaretBlinker.Action</code>.</p> <p>Clear()</p> <p>Clears the contents of the tag canvas.</p> <p>ComputeBufferWidth()</p> <p>Computes the width of the buffer. Sets <code>mRequiredBufferWidth</code>.</p> <p>The buffer will always be at least as wide as the tag canvas' current width.</p> <p>Constructor()</p> <p>Default constructor.</p> <p>FetchAutocompleteData()</p> <p>Requests autocomplete data for the unparsed text immediately in front of the caret.</p> <p>HandleDeleteBackwards()</p> <p>Deletes the character or tag immediately in front of the caret.</p> <p>HandleEscKey()</p> <p>Handles the pressing of the Esc key.</p> <p>HideAutocompletePopup(shouldSetFocus As Boolean)</p> <p>Hides the autocomplete popup.</p> <p>InsertCharacter(char As String, range As TextRange)</p> <p>Inserts a single character at the current caret position.</p> <p>Assumes <code>char</code> is only one character.</p> <p>InsertString(s As String)</p> <p>Inserts text of arbitrary length at the current caret position.</p> <p>IsTrigger(char As String) As Boolean</p> <p>True if <code>char</code> is a trigger character.</p> <p>Lines() As XUITagCanvasLine()</p> <p>Returns the lines of text in the canvas. You should consider this array read-only as modifying its contents may have undesired side effects.</p> <p>LineWidth(line As XUITagCanvasLine) As Double</p> <p>Returns the total width of the specified line (including its contents and all padding).</p> <p>MaxVisibleLines(lineHeight As Double) As Integer</p> <p>The maximum number of lines that are visible in the canvas.</p> <p>Will never be more than the maximum number of lines in existence.</p> <p>NotificationReceived(n As XUINotification)</p> <p>A notification has been received from the Notification Center.</p> <p>Part of the <code>XUINotificationListener</code> interface.</p> <p>PaintCaret(g As Graphics)</p> <p>Paints the caret at the end of the current line.</p> <p>Parse() As Boolean</p> <p>Attempts to parse the unparsed text on the current line into a tag. Returns False if unable. Refreshes the canvas if successful.</p> <p>RebuildBuffer()</p> <p>Rebuilds the entire buffer by drawing all visible content to it.</p> <p>RegisterForNotifications()</p> <p>Registers the canvas for desired notifications.</p> <p>RemoveTagInstance(tag As XUITag)</p> <p>Removes <code>tag</code> from the tag canvas. Refreshes the canvas but does not raise the <code>RemovedTag</code> event.</p> <p>ScrollDown(linesToScroll As Integer)</p> <p>Scrolls the canvas down <code>linesToScroll</code> lines.  Refreshes the canvas.</p> <p>ScrollToCaret()</p> <p>Scrolls the canvas (if necessary) to the caret. Refreshes the canvas.</p> <p>ScrollUp(linesToScroll As Integer)</p> <p>Scrolls the canvas up <code>linesToScroll</code> lines. Refreshes the canvas.</p> <p>SetContents(s As String)</p> <p>Sets the contents of the tag canvas to <code>s</code>, clearing any existing text and tags first. Will trigger parsing.</p> <p>ShowAutocompletePopup()</p> <p>Shows the autocomplete popup at the caret position.</p> <p>TagAtXY(x As Integer, y As Integer) As XUITag</p> <p>Returns the tag at <code>(x, y)</code> or Nil if there isn't one.</p> <p>UpdateLayout()</p> <p>This method forces a deep redraw of all tags, re-computing the line they should be on. Does not refresh the canvas.</p> <p>Expensive but is called whenever the canvas is resized.</p> <p>XYAtCaretPos(x As Double, y As Double)</p> <p>Computes (ByRef) the canvas x, y coordinates at the current caret position. <code>y</code> is the top of the caret.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvas/#event-descriptions","title":"Event Descriptions","text":"<p>AddedTag(tag As XUITag) Added <code>tag</code> to the tag canvas.</p> <p>AutocompleteDataForPrefix(prefix As String) As XUITagAutocompleteData The tag canvas is asking for autocompletion options for the specified <code>prefix</code>. You should return Nil if there are none.</p> <p>ClickedTag(tag As XUITag, isContextualClick As Boolean) A tag has been clicked.</p> <p>Opening() The control is opening.</p> <p>RemovedTag(tag As XUITag, viaWidget As Boolean) A tag has been removed from the tag canvas. If <code>viaDingus</code> is True then the tag was removed because the dingus was clicked.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvasLine/","title":"XUITagCanvasLine","text":""},{"location":"XUI/XUITagCanvas/XUITagCanvasLine/#description","title":"Description","text":"<p>Represents a line of text (including any tags) within the <code>XUITagCanvas</code>.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvasLine/#properties","title":"Properties","text":"Name Type Read-Only mOwner <code>WeakRef</code> Number <code>Integer</code> Owner <code>XUITagCanvas</code> \u2714 Tags() <code>XUITag</code> UnparsedText <code>String</code>"},{"location":"XUI/XUITagCanvas/XUITagCanvasLine/#methods","title":"Methods","text":"Name Parameters Returns Append s As <code>String</code> Constructor owner As <code>XUITagCanvas</code>, lineNumber As <code>Integer</code> ContentsWidth g As <code>Graphics</code> <code>Double</code> Draw g As <code>Graphics</code>, x As <code>Double</code>, topLeftY As <code>Double</code>, lineH As <code>Double</code>"},{"location":"XUI/XUITagCanvas/XUITagCanvasLine/#property-descriptions","title":"Property Descriptions","text":"<p>mOwner As WeakRef</p> <p>A weak reference to the owning tag canvas.</p> <p>Number As Integer</p> <p>This line's 1-based number.</p> <p>Owner As XUITagCanvas</p> <p>The owning tag canvas.</p> <p>Tags() As XUITag</p> <p>The tags on this line. Should be considered read only.</p> <p>UnparsedText As String</p> <p>Contiguous text on this line that has not yet been parsed into a tag.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvasLine/#method-descriptions","title":"Method Descriptions","text":"<p>Append(s As String)</p> <p>Appends <code>s</code> to the end of this line.</p> <p>Constructor(owner As XUITagCanvas, lineNumber As Integer)</p> <p>Default constructor.</p> <ul> <li><code>owner</code> is the <code>XUITagCanvas</code> that owns this line. A new <code>WeakRef</code> to the canvas will be created. </li> <li><code>lineNumber</code> is the 1-based line number of this new line. </li> </ul> <p>ContentsWidth(g As Graphics) As Double</p> <p>Returns the width from the left edge of this line to the end of the line's contents.</p> <p><code>g</code> is the context the line would be drawn to if it were being drawn.</p> <p>Draw(g As Graphics, x As Double, topLeftY As Double, lineH As Double)</p> <p>Draws this line to <code>g</code>.</p> <ul> <li><code>x</code> is the X coord of the top left corner of the line. </li> <li><code>topLeftY</code> is the Y coord of the top left corner of the line. </li> <li><code>lineH</code> is the height of the line. </li> </ul>"},{"location":"XUI/XUITagCanvas/XUITagCanvasStyle/","title":"XUITagCanvasStyle","text":""},{"location":"XUI/XUITagCanvas/XUITagCanvasStyle/#description","title":"Description","text":"<p>This class stores the style properties (such as colours and font size) that should be used when rendering a <code>XUITagCanvas</code> and any tags it contains.</p> <p>Contains shared methods that conveniently return preconfigured styles for common operating systems.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvasStyle/#properties","title":"Properties","text":"Name Type Read-Only AutocompleteOptionColor <code>ColorGroup</code> AutocompletePopupBackgroundColor <code>ColorGroup</code> AutocompletePopupBorderColor <code>ColorGroup</code> BackgroundColor <code>ColorGroup</code> BorderColor <code>ColorGroup</code> CaretColor <code>ColorGroup</code> FontColor <code>ColorGroup</code> FontName <code>String</code> FontSize <code>Integer</code> HasAutocompletePopupBorder <code>Boolean</code> Name <code>String</code> SelectedAutocompleteOptionBackgroundColor <code>ColorGroup</code> SelectedAutocompleteOptionColor <code>ColorGroup</code> TagBackgroundColor <code>ColorGroup</code> TagBorderColor <code>ColorGroup</code> TagTextColor <code>ColorGroup</code> WidgetColor <code>ColorGroup</code>"},{"location":"XUI/XUITagCanvas/XUITagCanvasStyle/#methods","title":"Methods","text":"Name Parameters Returns Monterey <code>XUITagCanvasStyle</code> Windows <code>XUITagCanvasStyle</code>"},{"location":"XUI/XUITagCanvas/XUITagCanvasStyle/#property-descriptions","title":"Property Descriptions","text":"<p>AutocompleteOptionColor As ColorGroup</p> <p>The colour of the text of unselected options in the autocomplete popup.</p> <p>AutocompletePopupBackgroundColor As ColorGroup</p> <p>The colour to use for the background of the autocomplete popup.</p> <p>AutocompletePopupBorderColor As ColorGroup</p> <p>If the autocomplete popup has a border then this is its colour.</p> <p>BackgroundColor As ColorGroup</p> <p>The background colour of the tag canvas.</p> <p>BorderColor As ColorGroup</p> <p>The border colour (if enabled).</p> <p>CaretColor As ColorGroup</p> <p>The colour of the caret in the tag canvas.</p> <p>FontColor As ColorGroup</p> <p>The colour of unparsed text.</p> <p>FontName As String</p> <p>The font to use for the tag canvas.</p> <p>FontSize As Integer</p> <p>The font size to use for the tag canvas.</p> <p>HasAutocompletePopupBorder As Boolean</p> <p>True if the autocomplete popup has a border.</p> <p>Name As String</p> <p>This style's name.</p> <p>SelectedAutocompleteOptionBackgroundColor As ColorGroup</p> <p>The background colour for the currently selected option in the autocomplete popup.</p> <p>SelectedAutocompleteOptionColor As ColorGroup</p> <p>The colour of the text of the currently selected option in the autocomplete popup.</p> <p>TagBackgroundColor As ColorGroup</p> <p>The background colour of a tag.</p> <p>TagBorderColor As ColorGroup</p> <p>The border colour of a tag.</p> <p>TagTextColor As ColorGroup</p> <p>The tag text colour.</p> <p>WidgetColor As ColorGroup</p> <p>The colour of optional tag dinguses.</p>"},{"location":"XUI/XUITagCanvas/XUITagCanvasStyle/#method-descriptions","title":"Method Descriptions","text":"<p>Monterey() As XUITagCanvasStyle This method is shared.</p> <p>Returns a new style with the colours for macOS Monterey style tags.</p> <p>Windows() As XUITagCanvasStyle This method is shared.</p> <p>Returns a new style with the colours for Windows style tags.</p>"},{"location":"XUI/XUITagCanvas/XUITagData/","title":"XUITagData","text":""},{"location":"XUI/XUITagCanvas/XUITagData/#description","title":"Description","text":"<p>This class stores the necessary information required to create a tag.</p>"},{"location":"XUI/XUITagCanvas/XUITagData/#properties","title":"Properties","text":"Name Type Read-Only Data <code>Variant</code> Title <code>String</code>"},{"location":"XUI/XUITagCanvas/XUITagData/#methods","title":"Methods","text":"Name Parameters Returns Constructor title As <code>String</code>, data As <code>Variant</code>"},{"location":"XUI/XUITagCanvas/XUITagData/#property-descriptions","title":"Property Descriptions","text":"<p>Data As Variant</p> <p>Optional arbitrary data.</p> <p>Title As String</p> <p>The tag's title.</p>"},{"location":"XUI/XUITagCanvas/XUITagData/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(title As String, data As Variant)</p> <p>Default constructor.</p> <ul> <li><code>title</code> is the tag text visible to the user. </li> <li><code>data</code> is optional arbitrary data associated with the tag to be created. </li> </ul>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteData/","title":"XUITagAutocompleteData","text":""},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteData/#description","title":"Description","text":"<p>Contains the tag autocomplete options for a given prefix. Returned by autocomplete engines when requested by the tag canvas.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteData/#properties","title":"Properties","text":"Name Type Read-Only LongestCommonPrefix <code>String</code> Options() <code>XUITagAutocompleteOption</code> Prefix <code>String</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteData/#methods","title":"Methods","text":"Name Parameters Returns LongestOptionValue <code>String</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteData/#property-descriptions","title":"Property Descriptions","text":"<p>LongestCommonPrefix As String</p> <p>The longest common prefix amongst all suggestions minus the triggering prefix.</p> <p>Options() As XUITagAutocompleteOption</p> <p>The autocomplete options available for the specified prefix.</p> <p>Prefix As String</p> <p>The prefix that the data contained within this instance is valid for.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteData/#method-descriptions","title":"Method Descriptions","text":"<p>LongestOptionValue() As String</p> <p>Returns the option with the longest value.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteOption/","title":"XUITagAutocompleteOption","text":""},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteOption/#description","title":"Description","text":"<p>Represents a single autocomplete option for the tag canvas.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteOption/#properties","title":"Properties","text":"Name Type Read-Only TagData <code>XUITagData</code> Value <code>String</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteOption/#methods","title":"Methods","text":"Name Parameters Returns Clone <code>XUITagAutocompleteOption</code> Constructor value As <code>String</code>, tagData As <code>XUITagData</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteOption/#property-descriptions","title":"Property Descriptions","text":"<p>TagData As XUITagData</p> <p>The data required to create a tag.</p> <p>Value As String</p> <p>The string visible to the user in the autocompletion list.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagAutocompleteOption/#method-descriptions","title":"Method Descriptions","text":"<p>Clone() As XUITagAutocompleteOption</p> <p>Returns a clone of this option. Note that <code>TagData.Data</code> will only be shallow cloned.</p> <p>Constructor(value As String, tagData As XUITagData)</p> <p>Default constructor.</p> <ul> <li><code>value</code> is the string that will be visible to the user in the autocomplete popup. </li> <li><code>tagData</code> is the data required to create a tag instance. </li> </ul>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagCanvasAutocompletePopup/","title":"XUITagCanvasAutocompletePopup","text":"<p>Inherits <code>DesktopTextInputCanvas</code></p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagCanvasAutocompletePopup/#description","title":"Description","text":"<p>The customisable autocomplete popup that appears in the tag canvas when autocomplete  options are available.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagCanvasAutocompletePopup/#properties","title":"Properties","text":"Name Type Read-Only mBuffer <code>Picture</code> mOwner <code>WeakRef</code> mScrollPosY <code>Integer</code> mSelectedIndex <code>Integer</code> Owner <code>XUITagCanvas</code> \u2714 ScrollPosY <code>Integer</code> SelectedIndex <code>Integer</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagCanvasAutocompletePopup/#methods","title":"Methods","text":"Name Parameters Returns Constructor owner As <code>XUITagCanvas</code> ScrollToSelectedIndex Update maxWidth As <code>Integer</code>, maxHeight As <code>Integer</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagCanvasAutocompletePopup/#property-descriptions","title":"Property Descriptions","text":"<p>mBuffer As Picture</p> <p>The picture that represents the popup. Drawn in the <code>Paint()</code> event.</p> <p>mOwner As WeakRef</p> <p>The tag canvas that owns this popup.</p> <p>mScrollPosY As Integer</p> <p>The vetical scroll offset. 0 is baseline. Positive indicates scrolling down. Backs the <code>ScrollPosY</code> computed property.</p> <p>mSelectedIndex As Integer</p> <p>0-based index of the currently selected option in the popup.</p> <p>Owner As XUITagCanvas</p> <p>The tag canvas that owns this popup.</p> <p>ScrollPosY As Integer</p> <p>The vertical scroll offset. 0 is baseline. Positive indicates scrolling down. Refreshes the popup.</p> <p>SelectedIndex As Integer</p> <p>0-based index of the currently selected option in the popup.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Autocompletion/XUITagCanvasAutocompletePopup/#method-descriptions","title":"Method Descriptions","text":"<p>Constructor(owner As XUITagCanvas)</p> <p><code>owner</code> is the <code>XUITagCanvas</code> that owns this popup. A new <code>WeakRef</code> to it will be created.</p> <p>ScrollToSelectedIndex()</p> <p>Scrolls the popup to wholly display the selected index if it is not already. Refreshes the canvas.</p> <p>Assumes <code>SelectedIndex</code> is valid.</p> <p>Update(maxWidth As Integer, maxHeight As Integer)</p> <p>Resizes and redraws this autocomplete popup using the autocomplete data from its owner.</p> <p><code>maxwidth</code> is the maximum permissable width of the popup. <code>maxHeight</code> is the maximum permissable height of the popup.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIDefaultTagParselet/","title":"XUIDefaultTagParselet","text":"<p>Implements <code>XUITagParselet</code></p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIDefaultTagParselet/#description","title":"Description","text":"<p>This parselet creates a tag from any string passed to it. This is the simplest parselet possible.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIDefaultTagParselet/#methods","title":"Methods","text":"Name Parameters Returns Parse s As <code>String</code> <code>XUITag</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIDefaultTagParselet/#method-descriptions","title":"Method Descriptions","text":"<p>Parse(s As String) As XUITag</p> <p>Returns a tag with a title of <code>s</code> and no arbitrary data.</p> <p>Part of the <code>XUITagParselet</code> interface.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIEmailTagParselet/","title":"XUIEmailTagParselet","text":"<p>Implements <code>XUITagParselet</code></p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIEmailTagParselet/#description","title":"Description","text":"<p>If the string passed to this parselet looks like an email address then it will return a tag whose title is the email address. If the parselet does not think the string passed is an email address then no tag is returned.</p> <p>The following regular expression is used to determine if the string is an email address or not:</p> <pre><code>^([a-zA-Z0-9_\\-.\\+]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,10})$\n</code></pre>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIEmailTagParselet/#methods","title":"Methods","text":"Name Parameters Returns Parse s As <code>String</code> <code>XUITag</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUIEmailTagParselet/#method-descriptions","title":"Method Descriptions","text":"<p>Parse(s As String) As XUITag</p> <p>If <code>s</code> looks like an email address then returns a tag with a title of <code>s</code> and no arbitrary data.</p> <p>Part of the <code>XUITagParselet</code> interface.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUITagParselet/","title":"XUITagParselet","text":""},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUITagParselet/#description","title":"Description","text":"<p>Parslets are responsible for parsing text into data that can be used to form a tag.  Tags vary in their appearance but all require the same information to construct  (a title +/- arbitrary data).</p> <p>Example parselets are included with XUI but you are, of course, able to create your own.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUITagParselet/#methods","title":"Methods","text":"Name Parameters Returns Parse s As <code>String</code> <code>XUITag</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Parselets/XUITagParselet/#method-descriptions","title":"Method Descriptions","text":"<p>Parse(s As String) As XUITag Parses <code>s</code> into a tag. If a tag cannot be formed then Nil is returned.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRenderer/","title":"XUITagCanvasRenderer","text":""},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRenderer/#description","title":"Description","text":"<p>Responsible for rendering tag data into a visible tag.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRenderer/#methods","title":"Methods","text":"Name Parameters Returns AutocompleteHorizontalPadding <code>Integer</code> AutocompleteOptionHeight <code>Integer</code> AutocompleteOptionVerticalPadding <code>Integer</code> AutocompletePopupBorderRadius <code>Integer</code> AutocompleteVerticalPadding <code>Integer</code> Owner <code>XUITagCanvas</code> RenderAutocompletePopup maxWidth As <code>Integer</code>, selectedIndex As <code>Integer</code> <code>Picture</code> RenderTag tag As <code>XUITag</code>, g As <code>Graphics</code>, x As <code>Integer</code>, y As <code>Integer</code>, hasWidget As <code>Boolean</code> <code>Double</code> TagHeight g As <code>Graphics</code> <code>Integer</code> TagHorizontalPadding <code>Integer</code> TagVerticalPadding <code>Integer</code> TagWidth tag As <code>XUITag</code>, g As <code>Graphics</code> <code>Double</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRenderer/#method-descriptions","title":"Method Descriptions","text":"<p>AutocompleteHorizontalPadding() As Integer The suggested number of pixels to pad to the left and right of autocomplete options in the autocomplete popup.</p> <p>AutocompleteOptionHeight() As Integer Returns the height of an autocomplete option in the autocomplete popup.</p> <p>AutocompleteOptionVerticalPadding() As Integer The suggested number of pixels to pad above and below autocomplete options in the autocomplete popup.</p> <p>AutocompletePopupBorderRadius() As Integer The border radius of the autocomplete popup.</p> <p>AutocompleteVerticalPadding() As Integer The number of pixels to pad above the first and below the last  autocomplete options in the autocomplete popup.</p> <p>Owner() As XUITagCanvas The <code>XUITagCanvas</code> that owns this renderer.</p> <p>RenderAutocompletePopup(maxWidth As Integer, selectedIndex As Integer) As Picture Renders and returns a picture for the canvas autocomplete popup.</p> <p>RenderTag(tag As XUITag, g As Graphics, x As Integer, y As Integer, hasWidget As Boolean) As Double Renders <code>tag</code> to <code>g</code> at <code>x, y</code>. Returns the x coordinate at the far right of the rendered tag.</p> <p>TagHeight(g As Graphics) As Integer Returns the height of a tag.</p> <p>TagHorizontalPadding() As Integer The suggested number of pixels to pad either side of tags in the tag canvas.</p> <p>TagVerticalPadding() As Integer The suggested number of pixels to pad above and below tags in the tag canvas.</p> <p>TagWidth(tag As XUITag, g As Graphics) As Double Computes the total width of <code>tag</code> if drawn to the specified graphics context <code>g</code>.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererMonterey/","title":"XUITagCanvasRendererMonterey","text":"<p>Implements <code>XUITagCanvasRenderer</code></p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererMonterey/#description","title":"Description","text":"<p>Renders tags and the autocomplete popup in a way that mimics tags on macOS Monterey. Examples on macOS include Mail.app.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererMonterey/#properties","title":"Properties","text":"Name Type Read-Only mOwner <code>WeakRef</code> mTitlePadding <code>Integer</code> mVerticalPadding <code>Integer</code> mWidgetLeftPadding <code>Integer</code> mWidgetRightPadding <code>Integer</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererMonterey/#methods","title":"Methods","text":"Name Parameters Returns AutocompleteHorizontalPadding <code>Integer</code> AutocompleteOptionHeight <code>Integer</code> AutocompleteOptionVerticalPadding <code>Integer</code> AutocompletePopupBorderRadius <code>Integer</code> AutocompleteVerticalPadding <code>Integer</code> Constructor owner As <code>XUITagCanvas</code> Owner <code>XUITagCanvas</code> RenderAutocompletePopup maxWidth As <code>Integer</code>, selectedIndex As <code>Integer</code> <code>Picture</code> RenderTag tag As <code>XUITag</code>, g As <code>Graphics</code>, x As <code>Integer</code>, y As <code>Integer</code>, hasWidget As <code>Boolean</code> <code>Double</code> TagHeight g As <code>Graphics</code> <code>Integer</code> TagHorizontalPadding <code>Integer</code> TagVerticalPadding <code>Integer</code> TagWidth tag As <code>XUITag</code>, g As <code>Graphics</code> <code>Double</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererMonterey/#constants","title":"Constants","text":"Name Type SELECTED_OPTION_BORDER_RADIUS <code>Double</code> SELECTED_OPTION_H_PADDING <code>Double</code> <p>SELECTED_OPTION_BORDER_RADIUS As Double The border radius for the background of the currently selected autocomplete option in the popup.</p> <p>SELECTED_OPTION_H_PADDING As Double The number of pixels to pad to the left and right of a selected autocomplete option in the popup. </p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererMonterey/#property-descriptions","title":"Property Descriptions","text":"<p>mOwner As WeakRef</p> <p>A weak reference to the owning tag canvas.</p> <p>mTitlePadding As Integer</p> <p>The number of pixels to pad left and right of the tag's title.</p> <p>mVerticalPadding As Integer</p> <p>The number of pixels to pad above and below the tag's title.</p> <p>mWidgetLeftPadding As Integer</p> <p>The number of pixels to pad to the left of the drop down icon.</p> <p>mWidgetRightPadding As Integer</p> <p>The number of pixels to pad to the right of the drop down icon.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererMonterey/#method-descriptions","title":"Method Descriptions","text":"<p>AutocompleteHorizontalPadding() As Integer</p> <p>The suggested number of pixels to pad to the left and right of autocomplete options in the autocomplete popup.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>AutocompleteOptionHeight() As Integer</p> <p>Returns the height of an autocomplete option in the autocomplete popup based on the owner's current style.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>AutocompleteOptionVerticalPadding() As Integer</p> <p>The suggested number of pixels to pad above and below autocomplete options in the autocomplete popup.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>AutocompletePopupBorderRadius() As Integer</p> <p>The border radius of the autocomplete popup.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>AutocompleteVerticalPadding() As Integer</p> <p>The number of pixels to pad above the first and below the last autocomplete options in the autocomplete popup.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>Constructor(owner As XUITagCanvas)</p> <p>Default constructor.</p> <ul> <li><code>owner</code> is the <code>XUITagCanvas</code> that owns this renderer. A new <code>WeakRef</code> to it will be created. </li> </ul> <p>Owner() As XUITagCanvas</p> <p>Returns the owning tag canvas.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>RenderAutocompletePopup(maxWidth As Integer, selectedIndex As Integer) As Picture</p> <p>Renders and returns a picture for the canvas autocomplete popup.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>RenderTag(tag As XUITag, g As Graphics, x As Integer, y As Integer, hasWidget As Boolean) As Double</p> <p>Renders <code>tag</code> to <code>g</code> at <code>x, y</code>. Returns the x coordinate at the far right of the rendered tag.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>TagHeight(g As Graphics) As Integer</p> <p>Returns the height of a tag based on the owner's current style.</p> <p><code>g</code> is the graphics context that the tag would be drawn to if it was being drawn.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>TagHorizontalPadding() As Integer</p> <p>The suggested number of pixels to pad either side of tags in the tag canvas.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>TagVerticalPadding() As Integer</p> <p>The suggested number of pixels to pad above and below tags in the tag canvas.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>TagWidth(tag As XUITag, g As Graphics) As Double</p> <p>Computes the total width of <code>tag</code> if drawn to the specified graphics context <code>g</code>.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererWindows11/","title":"XUITagCanvasRendererWindows11","text":"<p>Implements <code>XUITagCanvasRenderer</code></p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererWindows11/#description","title":"Description","text":"<p>Renders tags and the autocomplete popup in a way that mimics the <code>TokenizingTextBox</code> control in Windows 11.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererWindows11/#properties","title":"Properties","text":"Name Type Read-Only mOwner <code>WeakRef</code> mTitlePadding <code>Integer</code> mVerticalPadding <code>Integer</code> mWidgetLeftPadding <code>Integer</code> mWidgetRightPadding <code>Integer</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererWindows11/#methods","title":"Methods","text":"Name Parameters Returns AutocompleteHorizontalPadding <code>Integer</code> AutocompleteOptionHeight <code>Integer</code> AutocompleteOptionVerticalPadding <code>Integer</code> AutocompletePopupBorderRadius <code>Integer</code> AutocompleteVerticalPadding <code>Integer</code> Constructor owner As <code>XUITagCanvas</code> Owner <code>XUITagCanvas</code> RenderAutocompletePopup maxWidth As <code>Integer</code>, selectedIndex As <code>Integer</code> <code>Picture</code> RenderTag tag As <code>XUITag</code>, g As <code>Graphics</code>, x As <code>Integer</code>, y As <code>Integer</code>, hasWidget As <code>Boolean</code> <code>Double</code> TagHeight g As <code>Graphics</code> <code>Integer</code> TagHorizontalPadding <code>Integer</code> TagVerticalPadding <code>Integer</code> TagWidth tag As <code>XUITag</code>, g As <code>Graphics</code> <code>Double</code>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererWindows11/#property-descriptions","title":"Property Descriptions","text":"<p>mOwner As WeakRef</p> <p>A weak reference to the owning tag canvas.</p> <p>mTitlePadding As Integer</p> <p>The number of pixels to pad left and right of the tag's title.</p> <p>mVerticalPadding As Integer</p> <p>The number of pixels to pad above and below the tag's title.</p> <p>mWidgetLeftPadding As Integer</p> <p>The number of pixels to pad to the left of the close icon.</p> <p>mWidgetRightPadding As Integer</p> <p>The number of pixels to pad to the right of the close icon.</p>"},{"location":"XUI/XUITagCanvas/TagCanvas%20Renderers/XUITagCanvasRendererWindows11/#method-descriptions","title":"Method Descriptions","text":"<p>AutocompleteHorizontalPadding() As Integer</p> <p>The suggested number of pixels to pad to the left and right of autocomplete options in the autocomplete popup.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>AutocompleteOptionHeight() As Integer</p> <p>Returns the height of an autocomplete option in the autocomplete popup based on the owner's current style.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>AutocompleteOptionVerticalPadding() As Integer</p> <p>The suggested number of pixels to pad above and below autocomplete options in the autocomplete popup.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>AutocompletePopupBorderRadius() As Integer</p> <p>The border radius of the autocomplete popup.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>AutocompleteVerticalPadding() As Integer</p> <p>The number of pixels to pad above the first and below the last  autocomplete options in the autocomplete popup.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>Constructor(owner As XUITagCanvas)</p> <p>Default constructor.</p> <ul> <li><code>owner</code> is the <code>XUITagCanvas</code> that owns this renderer. A new <code>WeakRef</code> to it will be created. </li> </ul> <p>Owner() As XUITagCanvas</p> <p>Returns the owning tag canvas.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>RenderAutocompletePopup(maxWidth As Integer, selectedIndex As Integer) As Picture</p> <p>Renders and returns a picture for the canvas autocomplete popup.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>RenderTag(tag As XUITag, g As Graphics, x As Integer, y As Integer, hasWidget As Boolean) As Double</p> <p>Renders <code>tag</code> to <code>g</code> at <code>x, y</code>. Returns the x coordinate at the far right of the rendered tag.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>TagHeight(g As Graphics) As Integer</p> <p>Returns the height of a tag based on the owner's current style.</p> <p><code>g</code> is the graphics context that the tag would be drawn to if it was being drawn.</p> <p>Part of the XUITagCanvasRenderer interface.</p> <p>TagHorizontalPadding() As Integer</p> <p>The suggested number of pixels to pad either side of tags in the tag canvas.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>TagVerticalPadding() As Integer</p> <p>The suggested number of pixels to pad above and below tags in the tag canvas.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p> <p>TagWidth(tag As XUITag, g As Graphics) As Double</p> <p>Computes the total width of <code>tag</code> if drawn to the specified graphics context <code>g</code>.</p> <p>Part of the <code>XUITagCanvasRenderer</code> interface.</p>"},{"location":"XUI/XUIUndo/XUIUndoManager/","title":"XUIUndoManager","text":""},{"location":"XUI/XUIUndo/XUIUndoManager/#description","title":"Description","text":"<p><code>XUIUndoManager</code> forms the basis of a generic, application-wide, undo / redo manager. It is used extensively throughout XUI and can be seen in action in the <code>XUICodeEditor</code> demo.</p> <p>It essentially manages a stack of <code>XUIUndoableAction</code> instances.</p>"},{"location":"XUI/XUIUndo/XUIUndoManager/#properties","title":"Properties","text":"Name Type Read-Only CanRedo <code>Boolean</code> \u2714 CanUndo <code>Boolean</code> \u2714 IsUndoing <code>Boolean</code> \u2714 mIsUndoing <code>Boolean</code> mRedoStack() <code>XUIUndoableAction</code> mUndoStack() <code>XUIUndoableAction</code> mUndoStackIndex <code>Integer</code>"},{"location":"XUI/XUIUndo/XUIUndoManager/#methods","title":"Methods","text":"Name Parameters Returns AddActionToRedoStack action As <code>XUIUndoableAction</code> AddActionToUndoStack action As <code>XUIUndoableAction</code> NextRedo <code>XUIUndoableAction</code> NextUndo <code>XUIUndoableAction</code> Push action As <code>XUIUndoableAction</code> Redo Redo id As <code>Integer</code> RemoveAll Undo Undo ID As <code>integer</code>"},{"location":"XUI/XUIUndo/XUIUndoManager/#property-descriptions","title":"Property Descriptions","text":"<p>CanRedo As Boolean</p> <p>True if there are available redo actions.</p> <p>CanUndo As Boolean</p> <p>True if there are available undo actions.</p> <p>IsUndoing As Boolean</p> <p>True if the UndoManager is currently undoing.</p> <p>mIsUndoing As Boolean</p> <p>Backing field for the <code>IsUndoing</code> computed property.</p> <p>mRedoStack() As XUIUndoableAction</p> <p>The stack of redo actions.</p> <p>mUndoStack() As XUIUndoableAction</p> <p>The stack of undo actions.</p> <p>mUndoStackIndex As Integer</p> <p>A pointer to the top of the undo stack.</p>"},{"location":"XUI/XUIUndo/XUIUndoManager/#method-descriptions","title":"Method Descriptions","text":"<p>AddActionToRedoStack(action As XUIUndoableAction)</p> <p>Adds <code>action</code> to the stack of redoable actions.</p> <p>AddActionToUndoStack(action As XUIUndoableAction)</p> <p>Adds <code>action</code> to the stack of undoable actions.</p> <p>NextRedo() As XUIUndoableAction</p> <p>Returns a reference to the next redoable action.</p> <p>NextUndo() As XUIUndoableAction</p> <p>Returns a reference to the next undoable action.</p> <p>Push(action As XUIUndoableAction)</p> <p>Pushes an undoable <code>action</code> on to the UndoManager's stack.</p> <p>Redo()</p> <p>Redos the last action.</p> <p>Redo(id As Integer)</p> <p>Redos the action with the specified <code>id</code>.</p> <p>RemoveAll()</p> <p>Resets the UndoManager, removing all undoable actions.</p> <p>Undo()</p> <p>Undos the last action.</p> <p>Undo(ID As integer)</p> <p>Undos the action with the specified <code>id</code>.</p>"},{"location":"XUI/XUIUndo/XUIUndoableAction/","title":"XUIUndoableAction","text":""},{"location":"XUI/XUIUndo/XUIUndoableAction/#description","title":"Description","text":"<p>Represents an undoable / redoable action that can be handled by <code>XUIUndoManager</code>.</p>"},{"location":"XUI/XUIUndo/XUIUndoableAction/#methods","title":"Methods","text":"Name Parameters Returns Description <code>String</code> ID <code>Integer</code> ID Assigns value As <code>Integer</code> Redo Undo"},{"location":"XUI/XUIUndo/XUIUndoableAction/#method-descriptions","title":"Method Descriptions","text":"<p>Description() As String Describes this undoable action.</p> <p>ID() As Integer This action's unique ID.</p> <p>ID(Assigns value As Integer) This action's unique ID.</p> <p>Redo() Redo this action.</p> <p>Undo() Undo this action.</p>"}]}